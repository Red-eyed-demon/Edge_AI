
DNN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd24  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f9c  0800dfc4  0800dfc4  0001dfc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef60  0800ef60  0002049c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ef60  0800ef60  0001ef60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef68  0800ef68  0002049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef68  0800ef68  0001ef68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ef6c  0800ef6c  0001ef6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003dc  24000000  0800ef70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  240003dc  0800f34c  000203dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  2400043c  0800f3ac  0002043c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000071c  240004a0  0800f40c  000204a0  2**3
                  ALLOC
 12 ._user_heap_stack 00000a04  24000bbc  0800f40c  00020bbc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002049c  2**0
                  CONTENTS, READONLY
 14 .debug_line   00012950  00000000  00000000  000204ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_info   000265e5  00000000  00000000  00032e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00004058  00000000  00000000  000593ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00001288  00000000  00000000  0005d458  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0016b472  00000000  00000000  0005e6e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00001100  00000000  00000000  001c9b58  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  0003ad95  00000000  00000000  001cac58  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  002059ed  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000055a0  00000000  00000000  00205a68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240004a0 	.word	0x240004a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800dfac 	.word	0x0800dfac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240004a4 	.word	0x240004a4
 80002dc:	0800dfac 	.word	0x0800dfac

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_frsub>:
 8000390:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__addsf3>
 8000396:	bf00      	nop

08000398 <__aeabi_fsub>:
 8000398:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800039c <__addsf3>:
 800039c:	0042      	lsls	r2, r0, #1
 800039e:	bf1f      	itttt	ne
 80003a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a4:	ea92 0f03 	teqne	r2, r3
 80003a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003b0:	d06a      	beq.n	8000488 <__addsf3+0xec>
 80003b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003ba:	bfc1      	itttt	gt
 80003bc:	18d2      	addgt	r2, r2, r3
 80003be:	4041      	eorgt	r1, r0
 80003c0:	4048      	eorgt	r0, r1
 80003c2:	4041      	eorgt	r1, r0
 80003c4:	bfb8      	it	lt
 80003c6:	425b      	neglt	r3, r3
 80003c8:	2b19      	cmp	r3, #25
 80003ca:	bf88      	it	hi
 80003cc:	4770      	bxhi	lr
 80003ce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80003d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80003da:	bf18      	it	ne
 80003dc:	4240      	negne	r0, r0
 80003de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80003e6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80003ea:	bf18      	it	ne
 80003ec:	4249      	negne	r1, r1
 80003ee:	ea92 0f03 	teq	r2, r3
 80003f2:	d03f      	beq.n	8000474 <__addsf3+0xd8>
 80003f4:	f1a2 0201 	sub.w	r2, r2, #1
 80003f8:	fa41 fc03 	asr.w	ip, r1, r3
 80003fc:	eb10 000c 	adds.w	r0, r0, ip
 8000400:	f1c3 0320 	rsb	r3, r3, #32
 8000404:	fa01 f103 	lsl.w	r1, r1, r3
 8000408:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800040c:	d502      	bpl.n	8000414 <__addsf3+0x78>
 800040e:	4249      	negs	r1, r1
 8000410:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000414:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000418:	d313      	bcc.n	8000442 <__addsf3+0xa6>
 800041a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800041e:	d306      	bcc.n	800042e <__addsf3+0x92>
 8000420:	0840      	lsrs	r0, r0, #1
 8000422:	ea4f 0131 	mov.w	r1, r1, rrx
 8000426:	f102 0201 	add.w	r2, r2, #1
 800042a:	2afe      	cmp	r2, #254	; 0xfe
 800042c:	d251      	bcs.n	80004d2 <__addsf3+0x136>
 800042e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000432:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000436:	bf08      	it	eq
 8000438:	f020 0001 	biceq.w	r0, r0, #1
 800043c:	ea40 0003 	orr.w	r0, r0, r3
 8000440:	4770      	bx	lr
 8000442:	0049      	lsls	r1, r1, #1
 8000444:	eb40 0000 	adc.w	r0, r0, r0
 8000448:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800044c:	f1a2 0201 	sub.w	r2, r2, #1
 8000450:	d1ed      	bne.n	800042e <__addsf3+0x92>
 8000452:	fab0 fc80 	clz	ip, r0
 8000456:	f1ac 0c08 	sub.w	ip, ip, #8
 800045a:	ebb2 020c 	subs.w	r2, r2, ip
 800045e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000462:	bfaa      	itet	ge
 8000464:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000468:	4252      	neglt	r2, r2
 800046a:	4318      	orrge	r0, r3
 800046c:	bfbc      	itt	lt
 800046e:	40d0      	lsrlt	r0, r2
 8000470:	4318      	orrlt	r0, r3
 8000472:	4770      	bx	lr
 8000474:	f092 0f00 	teq	r2, #0
 8000478:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800047c:	bf06      	itte	eq
 800047e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000482:	3201      	addeq	r2, #1
 8000484:	3b01      	subne	r3, #1
 8000486:	e7b5      	b.n	80003f4 <__addsf3+0x58>
 8000488:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800048c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000490:	bf18      	it	ne
 8000492:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000496:	d021      	beq.n	80004dc <__addsf3+0x140>
 8000498:	ea92 0f03 	teq	r2, r3
 800049c:	d004      	beq.n	80004a8 <__addsf3+0x10c>
 800049e:	f092 0f00 	teq	r2, #0
 80004a2:	bf08      	it	eq
 80004a4:	4608      	moveq	r0, r1
 80004a6:	4770      	bx	lr
 80004a8:	ea90 0f01 	teq	r0, r1
 80004ac:	bf1c      	itt	ne
 80004ae:	2000      	movne	r0, #0
 80004b0:	4770      	bxne	lr
 80004b2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80004b6:	d104      	bne.n	80004c2 <__addsf3+0x126>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	bf28      	it	cs
 80004bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80004c6:	bf3c      	itt	cc
 80004c8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80004cc:	4770      	bxcc	lr
 80004ce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80004d2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80004d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004da:	4770      	bx	lr
 80004dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004e0:	bf16      	itet	ne
 80004e2:	4608      	movne	r0, r1
 80004e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e8:	4601      	movne	r1, r0
 80004ea:	0242      	lsls	r2, r0, #9
 80004ec:	bf06      	itte	eq
 80004ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004f2:	ea90 0f01 	teqeq	r0, r1
 80004f6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80004fa:	4770      	bx	lr

080004fc <__aeabi_ui2f>:
 80004fc:	f04f 0300 	mov.w	r3, #0
 8000500:	e004      	b.n	800050c <__aeabi_i2f+0x8>
 8000502:	bf00      	nop

08000504 <__aeabi_i2f>:
 8000504:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	ea5f 0c00 	movs.w	ip, r0
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000518:	4601      	mov	r1, r0
 800051a:	f04f 0000 	mov.w	r0, #0
 800051e:	e01c      	b.n	800055a <__aeabi_l2f+0x2a>

08000520 <__aeabi_ul2f>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	e00a      	b.n	8000544 <__aeabi_l2f+0x14>
 800052e:	bf00      	nop

08000530 <__aeabi_l2f>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800053c:	d502      	bpl.n	8000544 <__aeabi_l2f+0x14>
 800053e:	4240      	negs	r0, r0
 8000540:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000544:	ea5f 0c01 	movs.w	ip, r1
 8000548:	bf02      	ittt	eq
 800054a:	4684      	moveq	ip, r0
 800054c:	4601      	moveq	r1, r0
 800054e:	2000      	moveq	r0, #0
 8000550:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000554:	bf08      	it	eq
 8000556:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800055a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800055e:	fabc f28c 	clz	r2, ip
 8000562:	3a08      	subs	r2, #8
 8000564:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000568:	db10      	blt.n	800058c <__aeabi_l2f+0x5c>
 800056a:	fa01 fc02 	lsl.w	ip, r1, r2
 800056e:	4463      	add	r3, ip
 8000570:	fa00 fc02 	lsl.w	ip, r0, r2
 8000574:	f1c2 0220 	rsb	r2, r2, #32
 8000578:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800057c:	fa20 f202 	lsr.w	r2, r0, r2
 8000580:	eb43 0002 	adc.w	r0, r3, r2
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f102 0220 	add.w	r2, r2, #32
 8000590:	fa01 fc02 	lsl.w	ip, r1, r2
 8000594:	f1c2 0220 	rsb	r2, r2, #32
 8000598:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800059c:	fa21 f202 	lsr.w	r2, r1, r2
 80005a0:	eb43 0002 	adc.w	r0, r3, r2
 80005a4:	bf08      	it	eq
 80005a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005aa:	4770      	bx	lr

080005ac <__aeabi_uldivmod>:
 80005ac:	b953      	cbnz	r3, 80005c4 <__aeabi_uldivmod+0x18>
 80005ae:	b94a      	cbnz	r2, 80005c4 <__aeabi_uldivmod+0x18>
 80005b0:	2900      	cmp	r1, #0
 80005b2:	bf08      	it	eq
 80005b4:	2800      	cmpeq	r0, #0
 80005b6:	bf1c      	itt	ne
 80005b8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80005bc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80005c0:	f000 b972 	b.w	80008a8 <__aeabi_idiv0>
 80005c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80005c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005cc:	f000 f806 	bl	80005dc <__udivmoddi4>
 80005d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005d8:	b004      	add	sp, #16
 80005da:	4770      	bx	lr

080005dc <__udivmoddi4>:
 80005dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005e0:	9e08      	ldr	r6, [sp, #32]
 80005e2:	4604      	mov	r4, r0
 80005e4:	4688      	mov	r8, r1
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d14b      	bne.n	8000682 <__udivmoddi4+0xa6>
 80005ea:	428a      	cmp	r2, r1
 80005ec:	4615      	mov	r5, r2
 80005ee:	d967      	bls.n	80006c0 <__udivmoddi4+0xe4>
 80005f0:	fab2 f282 	clz	r2, r2
 80005f4:	b14a      	cbz	r2, 800060a <__udivmoddi4+0x2e>
 80005f6:	f1c2 0720 	rsb	r7, r2, #32
 80005fa:	fa01 f302 	lsl.w	r3, r1, r2
 80005fe:	fa20 f707 	lsr.w	r7, r0, r7
 8000602:	4095      	lsls	r5, r2
 8000604:	ea47 0803 	orr.w	r8, r7, r3
 8000608:	4094      	lsls	r4, r2
 800060a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800060e:	0c23      	lsrs	r3, r4, #16
 8000610:	fbb8 f7fe 	udiv	r7, r8, lr
 8000614:	fa1f fc85 	uxth.w	ip, r5
 8000618:	fb0e 8817 	mls	r8, lr, r7, r8
 800061c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000620:	fb07 f10c 	mul.w	r1, r7, ip
 8000624:	4299      	cmp	r1, r3
 8000626:	d909      	bls.n	800063c <__udivmoddi4+0x60>
 8000628:	18eb      	adds	r3, r5, r3
 800062a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800062e:	f080 811b 	bcs.w	8000868 <__udivmoddi4+0x28c>
 8000632:	4299      	cmp	r1, r3
 8000634:	f240 8118 	bls.w	8000868 <__udivmoddi4+0x28c>
 8000638:	3f02      	subs	r7, #2
 800063a:	442b      	add	r3, r5
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f0fe 	udiv	r0, r3, lr
 8000644:	fb0e 3310 	mls	r3, lr, r0, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000650:	45a4      	cmp	ip, r4
 8000652:	d909      	bls.n	8000668 <__udivmoddi4+0x8c>
 8000654:	192c      	adds	r4, r5, r4
 8000656:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800065a:	f080 8107 	bcs.w	800086c <__udivmoddi4+0x290>
 800065e:	45a4      	cmp	ip, r4
 8000660:	f240 8104 	bls.w	800086c <__udivmoddi4+0x290>
 8000664:	3802      	subs	r0, #2
 8000666:	442c      	add	r4, r5
 8000668:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800066c:	eba4 040c 	sub.w	r4, r4, ip
 8000670:	2700      	movs	r7, #0
 8000672:	b11e      	cbz	r6, 800067c <__udivmoddi4+0xa0>
 8000674:	40d4      	lsrs	r4, r2
 8000676:	2300      	movs	r3, #0
 8000678:	e9c6 4300 	strd	r4, r3, [r6]
 800067c:	4639      	mov	r1, r7
 800067e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000682:	428b      	cmp	r3, r1
 8000684:	d909      	bls.n	800069a <__udivmoddi4+0xbe>
 8000686:	2e00      	cmp	r6, #0
 8000688:	f000 80eb 	beq.w	8000862 <__udivmoddi4+0x286>
 800068c:	2700      	movs	r7, #0
 800068e:	e9c6 0100 	strd	r0, r1, [r6]
 8000692:	4638      	mov	r0, r7
 8000694:	4639      	mov	r1, r7
 8000696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800069a:	fab3 f783 	clz	r7, r3
 800069e:	2f00      	cmp	r7, #0
 80006a0:	d147      	bne.n	8000732 <__udivmoddi4+0x156>
 80006a2:	428b      	cmp	r3, r1
 80006a4:	d302      	bcc.n	80006ac <__udivmoddi4+0xd0>
 80006a6:	4282      	cmp	r2, r0
 80006a8:	f200 80fa 	bhi.w	80008a0 <__udivmoddi4+0x2c4>
 80006ac:	1a84      	subs	r4, r0, r2
 80006ae:	eb61 0303 	sbc.w	r3, r1, r3
 80006b2:	2001      	movs	r0, #1
 80006b4:	4698      	mov	r8, r3
 80006b6:	2e00      	cmp	r6, #0
 80006b8:	d0e0      	beq.n	800067c <__udivmoddi4+0xa0>
 80006ba:	e9c6 4800 	strd	r4, r8, [r6]
 80006be:	e7dd      	b.n	800067c <__udivmoddi4+0xa0>
 80006c0:	b902      	cbnz	r2, 80006c4 <__udivmoddi4+0xe8>
 80006c2:	deff      	udf	#255	; 0xff
 80006c4:	fab2 f282 	clz	r2, r2
 80006c8:	2a00      	cmp	r2, #0
 80006ca:	f040 808f 	bne.w	80007ec <__udivmoddi4+0x210>
 80006ce:	1b49      	subs	r1, r1, r5
 80006d0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006d4:	fa1f f885 	uxth.w	r8, r5
 80006d8:	2701      	movs	r7, #1
 80006da:	fbb1 fcfe 	udiv	ip, r1, lr
 80006de:	0c23      	lsrs	r3, r4, #16
 80006e0:	fb0e 111c 	mls	r1, lr, ip, r1
 80006e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006e8:	fb08 f10c 	mul.w	r1, r8, ip
 80006ec:	4299      	cmp	r1, r3
 80006ee:	d907      	bls.n	8000700 <__udivmoddi4+0x124>
 80006f0:	18eb      	adds	r3, r5, r3
 80006f2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80006f6:	d202      	bcs.n	80006fe <__udivmoddi4+0x122>
 80006f8:	4299      	cmp	r1, r3
 80006fa:	f200 80cd 	bhi.w	8000898 <__udivmoddi4+0x2bc>
 80006fe:	4684      	mov	ip, r0
 8000700:	1a59      	subs	r1, r3, r1
 8000702:	b2a3      	uxth	r3, r4
 8000704:	fbb1 f0fe 	udiv	r0, r1, lr
 8000708:	fb0e 1410 	mls	r4, lr, r0, r1
 800070c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000710:	fb08 f800 	mul.w	r8, r8, r0
 8000714:	45a0      	cmp	r8, r4
 8000716:	d907      	bls.n	8000728 <__udivmoddi4+0x14c>
 8000718:	192c      	adds	r4, r5, r4
 800071a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800071e:	d202      	bcs.n	8000726 <__udivmoddi4+0x14a>
 8000720:	45a0      	cmp	r8, r4
 8000722:	f200 80b6 	bhi.w	8000892 <__udivmoddi4+0x2b6>
 8000726:	4618      	mov	r0, r3
 8000728:	eba4 0408 	sub.w	r4, r4, r8
 800072c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000730:	e79f      	b.n	8000672 <__udivmoddi4+0x96>
 8000732:	f1c7 0c20 	rsb	ip, r7, #32
 8000736:	40bb      	lsls	r3, r7
 8000738:	fa22 fe0c 	lsr.w	lr, r2, ip
 800073c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000740:	fa01 f407 	lsl.w	r4, r1, r7
 8000744:	fa20 f50c 	lsr.w	r5, r0, ip
 8000748:	fa21 f30c 	lsr.w	r3, r1, ip
 800074c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000750:	4325      	orrs	r5, r4
 8000752:	fbb3 f9f8 	udiv	r9, r3, r8
 8000756:	0c2c      	lsrs	r4, r5, #16
 8000758:	fb08 3319 	mls	r3, r8, r9, r3
 800075c:	fa1f fa8e 	uxth.w	sl, lr
 8000760:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000764:	fb09 f40a 	mul.w	r4, r9, sl
 8000768:	429c      	cmp	r4, r3
 800076a:	fa02 f207 	lsl.w	r2, r2, r7
 800076e:	fa00 f107 	lsl.w	r1, r0, r7
 8000772:	d90b      	bls.n	800078c <__udivmoddi4+0x1b0>
 8000774:	eb1e 0303 	adds.w	r3, lr, r3
 8000778:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800077c:	f080 8087 	bcs.w	800088e <__udivmoddi4+0x2b2>
 8000780:	429c      	cmp	r4, r3
 8000782:	f240 8084 	bls.w	800088e <__udivmoddi4+0x2b2>
 8000786:	f1a9 0902 	sub.w	r9, r9, #2
 800078a:	4473      	add	r3, lr
 800078c:	1b1b      	subs	r3, r3, r4
 800078e:	b2ad      	uxth	r5, r5
 8000790:	fbb3 f0f8 	udiv	r0, r3, r8
 8000794:	fb08 3310 	mls	r3, r8, r0, r3
 8000798:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800079c:	fb00 fa0a 	mul.w	sl, r0, sl
 80007a0:	45a2      	cmp	sl, r4
 80007a2:	d908      	bls.n	80007b6 <__udivmoddi4+0x1da>
 80007a4:	eb1e 0404 	adds.w	r4, lr, r4
 80007a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80007ac:	d26b      	bcs.n	8000886 <__udivmoddi4+0x2aa>
 80007ae:	45a2      	cmp	sl, r4
 80007b0:	d969      	bls.n	8000886 <__udivmoddi4+0x2aa>
 80007b2:	3802      	subs	r0, #2
 80007b4:	4474      	add	r4, lr
 80007b6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007ba:	fba0 8902 	umull	r8, r9, r0, r2
 80007be:	eba4 040a 	sub.w	r4, r4, sl
 80007c2:	454c      	cmp	r4, r9
 80007c4:	46c2      	mov	sl, r8
 80007c6:	464b      	mov	r3, r9
 80007c8:	d354      	bcc.n	8000874 <__udivmoddi4+0x298>
 80007ca:	d051      	beq.n	8000870 <__udivmoddi4+0x294>
 80007cc:	2e00      	cmp	r6, #0
 80007ce:	d069      	beq.n	80008a4 <__udivmoddi4+0x2c8>
 80007d0:	ebb1 050a 	subs.w	r5, r1, sl
 80007d4:	eb64 0403 	sbc.w	r4, r4, r3
 80007d8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80007dc:	40fd      	lsrs	r5, r7
 80007de:	40fc      	lsrs	r4, r7
 80007e0:	ea4c 0505 	orr.w	r5, ip, r5
 80007e4:	e9c6 5400 	strd	r5, r4, [r6]
 80007e8:	2700      	movs	r7, #0
 80007ea:	e747      	b.n	800067c <__udivmoddi4+0xa0>
 80007ec:	f1c2 0320 	rsb	r3, r2, #32
 80007f0:	fa20 f703 	lsr.w	r7, r0, r3
 80007f4:	4095      	lsls	r5, r2
 80007f6:	fa01 f002 	lsl.w	r0, r1, r2
 80007fa:	fa21 f303 	lsr.w	r3, r1, r3
 80007fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000802:	4338      	orrs	r0, r7
 8000804:	0c01      	lsrs	r1, r0, #16
 8000806:	fbb3 f7fe 	udiv	r7, r3, lr
 800080a:	fa1f f885 	uxth.w	r8, r5
 800080e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000812:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000816:	fb07 f308 	mul.w	r3, r7, r8
 800081a:	428b      	cmp	r3, r1
 800081c:	fa04 f402 	lsl.w	r4, r4, r2
 8000820:	d907      	bls.n	8000832 <__udivmoddi4+0x256>
 8000822:	1869      	adds	r1, r5, r1
 8000824:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000828:	d22f      	bcs.n	800088a <__udivmoddi4+0x2ae>
 800082a:	428b      	cmp	r3, r1
 800082c:	d92d      	bls.n	800088a <__udivmoddi4+0x2ae>
 800082e:	3f02      	subs	r7, #2
 8000830:	4429      	add	r1, r5
 8000832:	1acb      	subs	r3, r1, r3
 8000834:	b281      	uxth	r1, r0
 8000836:	fbb3 f0fe 	udiv	r0, r3, lr
 800083a:	fb0e 3310 	mls	r3, lr, r0, r3
 800083e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000842:	fb00 f308 	mul.w	r3, r0, r8
 8000846:	428b      	cmp	r3, r1
 8000848:	d907      	bls.n	800085a <__udivmoddi4+0x27e>
 800084a:	1869      	adds	r1, r5, r1
 800084c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000850:	d217      	bcs.n	8000882 <__udivmoddi4+0x2a6>
 8000852:	428b      	cmp	r3, r1
 8000854:	d915      	bls.n	8000882 <__udivmoddi4+0x2a6>
 8000856:	3802      	subs	r0, #2
 8000858:	4429      	add	r1, r5
 800085a:	1ac9      	subs	r1, r1, r3
 800085c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000860:	e73b      	b.n	80006da <__udivmoddi4+0xfe>
 8000862:	4637      	mov	r7, r6
 8000864:	4630      	mov	r0, r6
 8000866:	e709      	b.n	800067c <__udivmoddi4+0xa0>
 8000868:	4607      	mov	r7, r0
 800086a:	e6e7      	b.n	800063c <__udivmoddi4+0x60>
 800086c:	4618      	mov	r0, r3
 800086e:	e6fb      	b.n	8000668 <__udivmoddi4+0x8c>
 8000870:	4541      	cmp	r1, r8
 8000872:	d2ab      	bcs.n	80007cc <__udivmoddi4+0x1f0>
 8000874:	ebb8 0a02 	subs.w	sl, r8, r2
 8000878:	eb69 020e 	sbc.w	r2, r9, lr
 800087c:	3801      	subs	r0, #1
 800087e:	4613      	mov	r3, r2
 8000880:	e7a4      	b.n	80007cc <__udivmoddi4+0x1f0>
 8000882:	4660      	mov	r0, ip
 8000884:	e7e9      	b.n	800085a <__udivmoddi4+0x27e>
 8000886:	4618      	mov	r0, r3
 8000888:	e795      	b.n	80007b6 <__udivmoddi4+0x1da>
 800088a:	4667      	mov	r7, ip
 800088c:	e7d1      	b.n	8000832 <__udivmoddi4+0x256>
 800088e:	4681      	mov	r9, r0
 8000890:	e77c      	b.n	800078c <__udivmoddi4+0x1b0>
 8000892:	3802      	subs	r0, #2
 8000894:	442c      	add	r4, r5
 8000896:	e747      	b.n	8000728 <__udivmoddi4+0x14c>
 8000898:	f1ac 0c02 	sub.w	ip, ip, #2
 800089c:	442b      	add	r3, r5
 800089e:	e72f      	b.n	8000700 <__udivmoddi4+0x124>
 80008a0:	4638      	mov	r0, r7
 80008a2:	e708      	b.n	80006b6 <__udivmoddi4+0xda>
 80008a4:	4637      	mov	r7, r6
 80008a6:	e6e9      	b.n	800067c <__udivmoddi4+0xa0>

080008a8 <__aeabi_idiv0>:
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop

080008ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80008b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80008b2:	e003      	b.n	80008bc <LoopCopyDataInit>

080008b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80008b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80008b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80008ba:	3104      	adds	r1, #4

080008bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80008bc:	480b      	ldr	r0, [pc, #44]	; (80008ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80008c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80008c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80008c4:	d3f6      	bcc.n	80008b4 <CopyDataInit>
  ldr  r2, =_sbss
 80008c6:	4a0b      	ldr	r2, [pc, #44]	; (80008f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80008c8:	e002      	b.n	80008d0 <LoopFillZerobss>

080008ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80008ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80008cc:	f842 3b04 	str.w	r3, [r2], #4

080008d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80008d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80008d4:	d3f9      	bcc.n	80008ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008d6:	f003 fa2f 	bl	8003d38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008da:	f00c fc9d 	bl	800d218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008de:	f002 fbdf 	bl	80030a0 <main>
  bx  lr    
 80008e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008e4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80008e8:	0800ef70 	.word	0x0800ef70
  ldr  r0, =_sdata
 80008ec:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80008f0:	240003dc 	.word	0x240003dc
  ldr  r2, =_sbss
 80008f4:	240004a0 	.word	0x240004a0
  ldr  r3, = _ebss
 80008f8:	24000bbc 	.word	0x24000bbc

080008fc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008fc:	e7fe      	b.n	80008fc <ADC3_IRQHandler>
	...

08000900 <crcIpInit>:
 * Device-related functions
 * -----------------------------------------------------------------------------
 */

__STATIC_INLINE void crcIpInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
#if defined(STM32H7)
    /* By default the CRC IP clock is enabled */
    __HAL_RCC_CRC_CLK_ENABLE();  
 8000906:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <crcIpInit+0x30>)
 8000908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090c:	4a08      	ldr	r2, [pc, #32]	; (8000930 <crcIpInit+0x30>)
 800090e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000912:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <crcIpInit+0x30>)
 8000918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]
        printf("W: CRC IP clock is NOT enabled\r\n");

    /* By default the CRC IP clock is enabled */
    __HAL_RCC_CRC_CLK_ENABLE();
#endif
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	58024400 	.word	0x58024400

08000934 <dwtIpInit>:

__STATIC_INLINE void dwtIpInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <dwtIpInit+0x2c>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	4a08      	ldr	r2, [pc, #32]	; (8000960 <dwtIpInit+0x2c>)
 800093e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000942:	60d3      	str	r3, [r2, #12]

#ifdef STM32F7
    DWT->LAR = 0xC5ACCE55;
#endif

    DWT->CYCCNT = 0;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <dwtIpInit+0x30>)
 8000946:	2200      	movs	r2, #0
 8000948:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk | DWT_CTRL_CPIEVTENA_Msk;
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <dwtIpInit+0x30>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	4905      	ldr	r1, [pc, #20]	; (8000964 <dwtIpInit+0x30>)
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <dwtIpInit+0x34>)
 8000952:	4313      	orrs	r3, r2
 8000954:	600b      	str	r3, [r1, #0]

}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	e000edf0 	.word	0xe000edf0
 8000964:	e0001000 	.word	0xe0001000
 8000968:	00020001 	.word	0x00020001

0800096c <dwtReset>:

__STATIC_INLINE void dwtReset(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
    DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <dwtReset+0x14>)
 8000972:	2200      	movs	r2, #0
 8000974:	605a      	str	r2, [r3, #4]
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e0001000 	.word	0xe0001000

08000984 <dwtGetCycles>:

__STATIC_INLINE uint32_t dwtGetCycles(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
    return DWT->CYCCNT;
 8000988:	4b03      	ldr	r3, [pc, #12]	; (8000998 <dwtGetCycles+0x14>)
 800098a:	685b      	ldr	r3, [r3, #4]
}
 800098c:	4618      	mov	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e0001000 	.word	0xe0001000

0800099c <cyclesCounterInit>:

__STATIC_INLINE void cyclesCounterInit(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
    struct dwtTime t;
    dwtCyclesToTime(UINT32_MAX, &t);
 80009a2:	463b      	mov	r3, r7
 80009a4:	461a      	mov	r2, r3
 80009a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009aa:	f04f 0100 	mov.w	r1, #0
 80009ae:	f000 f892 	bl	8000ad6 <dwtCyclesToTime>
    cyclesCount.dwt_max = t.s * 1000 + t.ms;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009b8:	fb02 f203 	mul.w	r2, r2, r3
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	4413      	add	r3, r2
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <cyclesCounterInit+0x38>)
 80009c4:	601a      	str	r2, [r3, #0]
    dwtIpInit();
 80009c6:	f7ff ffb5 	bl	8000934 <dwtIpInit>
}
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	240004bc 	.word	0x240004bc

080009d8 <cyclesCounterStart>:

__STATIC_INLINE void cyclesCounterStart(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
    cyclesCount.tick_start = HAL_GetTick();
 80009dc:	f003 fa94 	bl	8003f08 <HAL_GetTick>
 80009e0:	4602      	mov	r2, r0
 80009e2:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <cyclesCounterStart+0x20>)
 80009e4:	609a      	str	r2, [r3, #8]
    dwtReset();
 80009e6:	f7ff ffc1 	bl	800096c <dwtReset>
    cyclesCount.dwt_start = dwtGetCycles();
 80009ea:	f7ff ffcb 	bl	8000984 <dwtGetCycles>
 80009ee:	4602      	mov	r2, r0
 80009f0:	4b01      	ldr	r3, [pc, #4]	; (80009f8 <cyclesCounterStart+0x20>)
 80009f2:	605a      	str	r2, [r3, #4]
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	240004bc 	.word	0x240004bc

080009fc <cyclesCounterEnd>:

__STATIC_INLINE uint64_t cyclesCounterEnd(void)
{
 80009fc:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8000a00:	b088      	sub	sp, #32
 8000a02:	af00      	add	r7, sp, #0
#if _APP_FIX_CLK_OVERFLOW == 1
    struct dwtTime t;
    uint64_t dwt_e;
    uint64_t tick_e;
    dwt_e = dwtGetCycles() - cyclesCount.dwt_start;
 8000a04:	f7ff ffbe 	bl	8000984 <dwtGetCycles>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	4b2e      	ldr	r3, [pc, #184]	; (8000ac4 <cyclesCounterEnd+0xc8>)
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	f04f 0400 	mov.w	r4, #0
 8000a14:	e9c7 3406 	strd	r3, r4, [r7, #24]
    tick_e = HAL_GetTick() - cyclesCount.tick_start;
 8000a18:	f003 fa76 	bl	8003f08 <HAL_GetTick>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	4b29      	ldr	r3, [pc, #164]	; (8000ac4 <cyclesCounterEnd+0xc8>)
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	f04f 0400 	mov.w	r4, #0
 8000a28:	e9c7 3404 	strd	r3, r4, [r7, #16]
    dwtCyclesToTime(dwt_e, &t);
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	461a      	mov	r2, r3
 8000a30:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000a34:	f000 f84f 	bl	8000ad6 <dwtCyclesToTime>
    if (tick_e > cyclesCount.dwt_max) {
 8000a38:	4b22      	ldr	r3, [pc, #136]	; (8000ac4 <cyclesCounterEnd+0xc8>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f04f 0200 	mov.w	r2, #0
 8000a42:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000a46:	42a2      	cmp	r2, r4
 8000a48:	bf08      	it	eq
 8000a4a:	4299      	cmpeq	r1, r3
 8000a4c:	d231      	bcs.n	8000ab2 <cyclesCounterEnd+0xb6>
        /* overflow detected */
        // dwt_e = (tick_e * (uint64_t)t.fcpu) / 1000;
        dwt_e = ((tick_e/cyclesCount.dwt_max) * (uint64_t)UINT32_MAX + (uint64_t)dwt_e);
 8000a4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <cyclesCounterEnd+0xc8>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f04f 0400 	mov.w	r4, #0
 8000a56:	461a      	mov	r2, r3
 8000a58:	4623      	mov	r3, r4
 8000a5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000a5e:	f7ff fda5 	bl	80005ac <__aeabi_uldivmod>
 8000a62:	4603      	mov	r3, r0
 8000a64:	460c      	mov	r4, r1
 8000a66:	461d      	mov	r5, r3
 8000a68:	4626      	mov	r6, r4
 8000a6a:	46ab      	mov	fp, r5
 8000a6c:	46b4      	mov	ip, r6
 8000a6e:	f04f 0100 	mov.w	r1, #0
 8000a72:	f04f 0200 	mov.w	r2, #0
 8000a76:	ea4f 72cc 	mov.w	r2, ip, lsl #31
 8000a7a:	ea42 025b 	orr.w	r2, r2, fp, lsr #1
 8000a7e:	ea4f 71cb 	mov.w	r1, fp, lsl #31
 8000a82:	468b      	mov	fp, r1
 8000a84:	4694      	mov	ip, r2
 8000a86:	ebbb 0b05 	subs.w	fp, fp, r5
 8000a8a:	eb6c 0c06 	sbc.w	ip, ip, r6
 8000a8e:	eb1b 030b 	adds.w	r3, fp, fp
 8000a92:	eb4c 040c 	adc.w	r4, ip, ip
 8000a96:	469b      	mov	fp, r3
 8000a98:	46a4      	mov	ip, r4
 8000a9a:	eb1b 0805 	adds.w	r8, fp, r5
 8000a9e:	eb4c 0906 	adc.w	r9, ip, r6
 8000aa2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8000aa6:	eb18 0301 	adds.w	r3, r8, r1
 8000aaa:	eb49 0402 	adc.w	r4, r9, r2
 8000aae:	e9c7 3406 	strd	r3, r4, [r7, #24]
    }
    return dwt_e;
 8000ab2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
#else
    return (uint64_t)(dwtGetCycles() - cyclesCount.dwt_start);
#endif
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	4621      	mov	r1, r4
 8000aba:	3720      	adds	r7, #32
 8000abc:	46bd      	mov	sp, r7
 8000abe:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8000ac2:	bf00      	nop
 8000ac4:	240004bc 	.word	0x240004bc

08000ac8 <systemCoreClock>:


__STATIC_INLINE uint32_t systemCoreClock(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
#if !defined(STM32H7) 
    return HAL_RCC_GetHCLKFreq();
#else
    return HAL_RCC_GetSysClockFreq();
 8000acc:	f005 f950 	bl	8005d70 <HAL_RCC_GetSysClockFreq>
 8000ad0:	4603      	mov	r3, r0
#endif
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <dwtCyclesToTime>:

static int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 8000ad6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ada:	b08d      	sub	sp, #52	; 0x34
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
    if (!t)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d102      	bne.n	8000af0 <dwtCyclesToTime+0x1a>
        return -1;
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aee:	e120      	b.n	8000d32 <dwtCyclesToTime+0x25c>
    uint32_t fcpu = systemCoreClock();
 8000af0:	f7ff ffea 	bl	8000ac8 <systemCoreClock>
 8000af4:	62f8      	str	r0, [r7, #44]	; 0x2c
    uint64_t s  = clks / fcpu;
 8000af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af8:	f04f 0400 	mov.w	r4, #0
 8000afc:	461a      	mov	r2, r3
 8000afe:	4623      	mov	r3, r4
 8000b00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000b04:	f7ff fd52 	bl	80005ac <__aeabi_uldivmod>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	460c      	mov	r4, r1
 8000b0c:	e9c7 3408 	strd	r3, r4, [r7, #32]
    uint64_t ms = (clks * 1000) / fcpu;
 8000b10:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8000b14:	462b      	mov	r3, r5
 8000b16:	4634      	mov	r4, r6
 8000b18:	f04f 0100 	mov.w	r1, #0
 8000b1c:	f04f 0200 	mov.w	r2, #0
 8000b20:	0162      	lsls	r2, r4, #5
 8000b22:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8000b26:	0159      	lsls	r1, r3, #5
 8000b28:	460b      	mov	r3, r1
 8000b2a:	4614      	mov	r4, r2
 8000b2c:	1b5b      	subs	r3, r3, r5
 8000b2e:	eb64 0406 	sbc.w	r4, r4, r6
 8000b32:	f04f 0100 	mov.w	r1, #0
 8000b36:	f04f 0200 	mov.w	r2, #0
 8000b3a:	00a2      	lsls	r2, r4, #2
 8000b3c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8000b40:	0099      	lsls	r1, r3, #2
 8000b42:	460b      	mov	r3, r1
 8000b44:	4614      	mov	r4, r2
 8000b46:	195b      	adds	r3, r3, r5
 8000b48:	eb44 0406 	adc.w	r4, r4, r6
 8000b4c:	f04f 0100 	mov.w	r1, #0
 8000b50:	f04f 0200 	mov.w	r2, #0
 8000b54:	00e2      	lsls	r2, r4, #3
 8000b56:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000b5a:	00d9      	lsls	r1, r3, #3
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	4614      	mov	r4, r2
 8000b60:	4618      	mov	r0, r3
 8000b62:	4621      	mov	r1, r4
 8000b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b66:	f04f 0400 	mov.w	r4, #0
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	4623      	mov	r3, r4
 8000b6e:	f7ff fd1d 	bl	80005ac <__aeabi_uldivmod>
 8000b72:	4603      	mov	r3, r0
 8000b74:	460c      	mov	r4, r1
 8000b76:	e9c7 3406 	strd	r3, r4, [r7, #24]
    uint64_t us = (clks * 1000 * 1000) / fcpu;
 8000b7a:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8000b7e:	462b      	mov	r3, r5
 8000b80:	4634      	mov	r4, r6
 8000b82:	f04f 0100 	mov.w	r1, #0
 8000b86:	f04f 0200 	mov.w	r2, #0
 8000b8a:	0162      	lsls	r2, r4, #5
 8000b8c:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8000b90:	0159      	lsls	r1, r3, #5
 8000b92:	460b      	mov	r3, r1
 8000b94:	4614      	mov	r4, r2
 8000b96:	1b5b      	subs	r3, r3, r5
 8000b98:	eb64 0406 	sbc.w	r4, r4, r6
 8000b9c:	f04f 0100 	mov.w	r1, #0
 8000ba0:	f04f 0200 	mov.w	r2, #0
 8000ba4:	0262      	lsls	r2, r4, #9
 8000ba6:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8000baa:	0259      	lsls	r1, r3, #9
 8000bac:	460b      	mov	r3, r1
 8000bae:	4614      	mov	r4, r2
 8000bb0:	195b      	adds	r3, r3, r5
 8000bb2:	eb44 0406 	adc.w	r4, r4, r6
 8000bb6:	f04f 0100 	mov.w	r1, #0
 8000bba:	f04f 0200 	mov.w	r2, #0
 8000bbe:	01a2      	lsls	r2, r4, #6
 8000bc0:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 8000bc4:	0199      	lsls	r1, r3, #6
 8000bc6:	1ac9      	subs	r1, r1, r3
 8000bc8:	eb62 0204 	sbc.w	r2, r2, r4
 8000bcc:	194b      	adds	r3, r1, r5
 8000bce:	eb42 0406 	adc.w	r4, r2, r6
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	4621      	mov	r1, r4
 8000bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd8:	f04f 0400 	mov.w	r4, #0
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4623      	mov	r3, r4
 8000be0:	f7ff fce4 	bl	80005ac <__aeabi_uldivmod>
 8000be4:	4603      	mov	r3, r0
 8000be6:	460c      	mov	r4, r1
 8000be8:	e9c7 3404 	strd	r3, r4, [r7, #16]
    ms -= (s * 1000);
 8000bec:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 8000bf0:	462b      	mov	r3, r5
 8000bf2:	4634      	mov	r4, r6
 8000bf4:	f04f 0100 	mov.w	r1, #0
 8000bf8:	f04f 0200 	mov.w	r2, #0
 8000bfc:	0162      	lsls	r2, r4, #5
 8000bfe:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8000c02:	0159      	lsls	r1, r3, #5
 8000c04:	460b      	mov	r3, r1
 8000c06:	4614      	mov	r4, r2
 8000c08:	1b5b      	subs	r3, r3, r5
 8000c0a:	eb64 0406 	sbc.w	r4, r4, r6
 8000c0e:	f04f 0100 	mov.w	r1, #0
 8000c12:	f04f 0200 	mov.w	r2, #0
 8000c16:	00a2      	lsls	r2, r4, #2
 8000c18:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8000c1c:	0099      	lsls	r1, r3, #2
 8000c1e:	460b      	mov	r3, r1
 8000c20:	4614      	mov	r4, r2
 8000c22:	195b      	adds	r3, r3, r5
 8000c24:	eb44 0406 	adc.w	r4, r4, r6
 8000c28:	f04f 0100 	mov.w	r1, #0
 8000c2c:	f04f 0200 	mov.w	r2, #0
 8000c30:	00e2      	lsls	r2, r4, #3
 8000c32:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000c36:	00d9      	lsls	r1, r3, #3
 8000c38:	460b      	mov	r3, r1
 8000c3a:	4614      	mov	r4, r2
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4622      	mov	r2, r4
 8000c40:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000c44:	1a5b      	subs	r3, r3, r1
 8000c46:	eb64 0402 	sbc.w	r4, r4, r2
 8000c4a:	461d      	mov	r5, r3
 8000c4c:	4626      	mov	r6, r4
 8000c4e:	e9c7 5606 	strd	r5, r6, [r7, #24]
    us -= (ms * 1000 + s * 1000000);
 8000c52:	e9d7 5606 	ldrd	r5, r6, [r7, #24]
 8000c56:	462b      	mov	r3, r5
 8000c58:	4634      	mov	r4, r6
 8000c5a:	f04f 0100 	mov.w	r1, #0
 8000c5e:	f04f 0200 	mov.w	r2, #0
 8000c62:	0162      	lsls	r2, r4, #5
 8000c64:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8000c68:	0159      	lsls	r1, r3, #5
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4614      	mov	r4, r2
 8000c6e:	1b5b      	subs	r3, r3, r5
 8000c70:	eb64 0406 	sbc.w	r4, r4, r6
 8000c74:	f04f 0100 	mov.w	r1, #0
 8000c78:	f04f 0200 	mov.w	r2, #0
 8000c7c:	00a2      	lsls	r2, r4, #2
 8000c7e:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8000c82:	0099      	lsls	r1, r3, #2
 8000c84:	460b      	mov	r3, r1
 8000c86:	4614      	mov	r4, r2
 8000c88:	195b      	adds	r3, r3, r5
 8000c8a:	eb44 0406 	adc.w	r4, r4, r6
 8000c8e:	f04f 0100 	mov.w	r1, #0
 8000c92:	f04f 0200 	mov.w	r2, #0
 8000c96:	00e2      	lsls	r2, r4, #3
 8000c98:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000c9c:	00d9      	lsls	r1, r3, #3
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4614      	mov	r4, r2
 8000ca2:	4698      	mov	r8, r3
 8000ca4:	46a1      	mov	r9, r4
 8000ca6:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 8000caa:	462b      	mov	r3, r5
 8000cac:	4634      	mov	r4, r6
 8000cae:	f04f 0100 	mov.w	r1, #0
 8000cb2:	f04f 0200 	mov.w	r2, #0
 8000cb6:	0162      	lsls	r2, r4, #5
 8000cb8:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8000cbc:	0159      	lsls	r1, r3, #5
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4614      	mov	r4, r2
 8000cc2:	1b5b      	subs	r3, r3, r5
 8000cc4:	eb64 0406 	sbc.w	r4, r4, r6
 8000cc8:	f04f 0100 	mov.w	r1, #0
 8000ccc:	f04f 0200 	mov.w	r2, #0
 8000cd0:	0262      	lsls	r2, r4, #9
 8000cd2:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8000cd6:	0259      	lsls	r1, r3, #9
 8000cd8:	460b      	mov	r3, r1
 8000cda:	4614      	mov	r4, r2
 8000cdc:	195b      	adds	r3, r3, r5
 8000cde:	eb44 0406 	adc.w	r4, r4, r6
 8000ce2:	f04f 0100 	mov.w	r1, #0
 8000ce6:	f04f 0200 	mov.w	r2, #0
 8000cea:	01a2      	lsls	r2, r4, #6
 8000cec:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 8000cf0:	0199      	lsls	r1, r3, #6
 8000cf2:	1ac9      	subs	r1, r1, r3
 8000cf4:	eb62 0204 	sbc.w	r2, r2, r4
 8000cf8:	194b      	adds	r3, r1, r5
 8000cfa:	eb42 0406 	adc.w	r4, r2, r6
 8000cfe:	eb13 0508 	adds.w	r5, r3, r8
 8000d02:	eb44 0609 	adc.w	r6, r4, r9
 8000d06:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4614      	mov	r4, r2
 8000d0e:	1b5b      	subs	r3, r3, r5
 8000d10:	eb64 0406 	sbc.w	r4, r4, r6
 8000d14:	e9c7 3404 	strd	r3, r4, [r7, #16]
    t->fcpu = fcpu;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d1c:	601a      	str	r2, [r3, #0]
    t->s = s;
 8000d1e:	6a3a      	ldr	r2, [r7, #32]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	605a      	str	r2, [r3, #4]
    t->ms = ms;
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	609a      	str	r2, [r3, #8]
    t->us = us;
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	60da      	str	r2, [r3, #12]
    return 0;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3734      	adds	r7, #52	; 0x34
 8000d36:	46bd      	mov	sp, r7
 8000d38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000d3c <devIdToStr>:

__STATIC_INLINE const char *devIdToStr(uint16_t dev_id)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	80fb      	strh	r3, [r7, #6]
    /* DEV_ID field from DBGMCU register */
    const char *str;
    switch (dev_id) {
 8000d46:	88fb      	ldrh	r3, [r7, #6]
 8000d48:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 8000d4c:	2b5d      	cmp	r3, #93	; 0x5d
 8000d4e:	f200 80e6 	bhi.w	8000f1e <devIdToStr+0x1e2>
 8000d52:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <devIdToStr+0x1c>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000f01 	.word	0x08000f01
 8000d5c:	08000f1f 	.word	0x08000f1f
 8000d60:	08000f1f 	.word	0x08000f1f
 8000d64:	08000f1f 	.word	0x08000f1f
 8000d68:	08000f1f 	.word	0x08000f1f
 8000d6c:	08000f1f 	.word	0x08000f1f
 8000d70:	08000f1f 	.word	0x08000f1f
 8000d74:	08000f1f 	.word	0x08000f1f
 8000d78:	08000f1f 	.word	0x08000f1f
 8000d7c:	08000f1f 	.word	0x08000f1f
 8000d80:	08000f1f 	.word	0x08000f1f
 8000d84:	08000f1f 	.word	0x08000f1f
 8000d88:	08000f1f 	.word	0x08000f1f
 8000d8c:	08000ed1 	.word	0x08000ed1
 8000d90:	08000ee9 	.word	0x08000ee9
 8000d94:	08000f1f 	.word	0x08000f1f
 8000d98:	08000f1f 	.word	0x08000f1f
 8000d9c:	08000f1f 	.word	0x08000f1f
 8000da0:	08000f1f 	.word	0x08000f1f
 8000da4:	08000f1f 	.word	0x08000f1f
 8000da8:	08000f1f 	.word	0x08000f1f
 8000dac:	08000f1f 	.word	0x08000f1f
 8000db0:	08000f1f 	.word	0x08000f1f
 8000db4:	08000f1f 	.word	0x08000f1f
 8000db8:	08000f1f 	.word	0x08000f1f
 8000dbc:	08000f1f 	.word	0x08000f1f
 8000dc0:	08000f1f 	.word	0x08000f1f
 8000dc4:	08000f1f 	.word	0x08000f1f
 8000dc8:	08000ee3 	.word	0x08000ee3
 8000dcc:	08000f1f 	.word	0x08000f1f
 8000dd0:	08000eef 	.word	0x08000eef
 8000dd4:	08000f1f 	.word	0x08000f1f
 8000dd8:	08000ef5 	.word	0x08000ef5
 8000ddc:	08000f1f 	.word	0x08000f1f
 8000de0:	08000f1f 	.word	0x08000f1f
 8000de4:	08000ed7 	.word	0x08000ed7
 8000de8:	08000f1f 	.word	0x08000f1f
 8000dec:	08000f1f 	.word	0x08000f1f
 8000df0:	08000f1f 	.word	0x08000f1f
 8000df4:	08000f1f 	.word	0x08000f1f
 8000df8:	08000f1f 	.word	0x08000f1f
 8000dfc:	08000f1f 	.word	0x08000f1f
 8000e00:	08000f1f 	.word	0x08000f1f
 8000e04:	08000f1f 	.word	0x08000f1f
 8000e08:	08000f1f 	.word	0x08000f1f
 8000e0c:	08000f1f 	.word	0x08000f1f
 8000e10:	08000f1f 	.word	0x08000f1f
 8000e14:	08000f1f 	.word	0x08000f1f
 8000e18:	08000f1f 	.word	0x08000f1f
 8000e1c:	08000edd 	.word	0x08000edd
 8000e20:	08000f1f 	.word	0x08000f1f
 8000e24:	08000f1f 	.word	0x08000f1f
 8000e28:	08000f13 	.word	0x08000f13
 8000e2c:	08000f1f 	.word	0x08000f1f
 8000e30:	08000f1f 	.word	0x08000f1f
 8000e34:	08000f1f 	.word	0x08000f1f
 8000e38:	08000f1f 	.word	0x08000f1f
 8000e3c:	08000f1f 	.word	0x08000f1f
 8000e40:	08000f1f 	.word	0x08000f1f
 8000e44:	08000f19 	.word	0x08000f19
 8000e48:	08000f1f 	.word	0x08000f1f
 8000e4c:	08000f1f 	.word	0x08000f1f
 8000e50:	08000f1f 	.word	0x08000f1f
 8000e54:	08000f1f 	.word	0x08000f1f
 8000e58:	08000f1f 	.word	0x08000f1f
 8000e5c:	08000f1f 	.word	0x08000f1f
 8000e60:	08000f1f 	.word	0x08000f1f
 8000e64:	08000f1f 	.word	0x08000f1f
 8000e68:	08000f1f 	.word	0x08000f1f
 8000e6c:	08000f1f 	.word	0x08000f1f
 8000e70:	08000f1f 	.word	0x08000f1f
 8000e74:	08000f1f 	.word	0x08000f1f
 8000e78:	08000f1f 	.word	0x08000f1f
 8000e7c:	08000f1f 	.word	0x08000f1f
 8000e80:	08000f1f 	.word	0x08000f1f
 8000e84:	08000f1f 	.word	0x08000f1f
 8000e88:	08000f1f 	.word	0x08000f1f
 8000e8c:	08000efb 	.word	0x08000efb
 8000e90:	08000f1f 	.word	0x08000f1f
 8000e94:	08000f1f 	.word	0x08000f1f
 8000e98:	08000f1f 	.word	0x08000f1f
 8000e9c:	08000f1f 	.word	0x08000f1f
 8000ea0:	08000f1f 	.word	0x08000f1f
 8000ea4:	08000f1f 	.word	0x08000f1f
 8000ea8:	08000f1f 	.word	0x08000f1f
 8000eac:	08000f1f 	.word	0x08000f1f
 8000eb0:	08000f1f 	.word	0x08000f1f
 8000eb4:	08000f1f 	.word	0x08000f1f
 8000eb8:	08000f1f 	.word	0x08000f1f
 8000ebc:	08000f1f 	.word	0x08000f1f
 8000ec0:	08000f1f 	.word	0x08000f1f
 8000ec4:	08000f07 	.word	0x08000f07
 8000ec8:	08000f1f 	.word	0x08000f1f
 8000ecc:	08000f0d 	.word	0x08000f0d
    case 0x422: str = "STM32F303xB/C"; break;
 8000ed0:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <devIdToStr+0x1f4>)
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	e025      	b.n	8000f22 <devIdToStr+0x1e6>
    case 0x438: str = "STM32F303x6/8"; break;
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <devIdToStr+0x1f8>)
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	e022      	b.n	8000f22 <devIdToStr+0x1e6>
    case 0x446: str = "STM32F303xD/E"; break;
 8000edc:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <devIdToStr+0x1fc>)
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	e01f      	b.n	8000f22 <devIdToStr+0x1e6>
    case 0x431: str = "STM32F411xC/E"; break;
 8000ee2:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <devIdToStr+0x200>)
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	e01c      	b.n	8000f22 <devIdToStr+0x1e6>
    case 0x423: str = "STM32F401xB/C"; break;
 8000ee8:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <devIdToStr+0x204>)
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	e019      	b.n	8000f22 <devIdToStr+0x1e6>
    case 0x433: str = "STM32F401xD/E"; break;
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <devIdToStr+0x208>)
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	e016      	b.n	8000f22 <devIdToStr+0x1e6>
    case 0x435: str = "STM32L43xxx"; break;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <devIdToStr+0x20c>)
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	e013      	b.n	8000f22 <devIdToStr+0x1e6>
    case 0x462: str = "STM32L45xxx"; break;
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <devIdToStr+0x210>)
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	e010      	b.n	8000f22 <devIdToStr+0x1e6>
    case 0x415: str = "STM32L4x6xx"; break;
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <devIdToStr+0x214>)
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	e00d      	b.n	8000f22 <devIdToStr+0x1e6>
    case 0x470: str = "STM32L4Rxxx"; break;
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <devIdToStr+0x218>)
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	e00a      	b.n	8000f22 <devIdToStr+0x1e6>
    case 0x472: str = "STM32L5[5,6]2xx"; break;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <devIdToStr+0x21c>)
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	e007      	b.n	8000f22 <devIdToStr+0x1e6>
    case 0x449: str = "STM32F74xxx"; break;
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <devIdToStr+0x220>)
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	e004      	b.n	8000f22 <devIdToStr+0x1e6>
    case 0x450: str = "STM32H743/53/50xx and STM32H745/55/47/57xx"; break; /* see RM0433 & RM0399 */
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <devIdToStr+0x224>)
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	e001      	b.n	8000f22 <devIdToStr+0x1e6>
    default:    str = "UNKNOWN";
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <devIdToStr+0x228>)
 8000f20:	60fb      	str	r3, [r7, #12]
    }
    return str;
 8000f22:	68fb      	ldr	r3, [r7, #12]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	0800dfc4 	.word	0x0800dfc4
 8000f34:	0800dfd4 	.word	0x0800dfd4
 8000f38:	0800dfe4 	.word	0x0800dfe4
 8000f3c:	0800dff4 	.word	0x0800dff4
 8000f40:	0800e004 	.word	0x0800e004
 8000f44:	0800e014 	.word	0x0800e014
 8000f48:	0800e024 	.word	0x0800e024
 8000f4c:	0800e030 	.word	0x0800e030
 8000f50:	0800e03c 	.word	0x0800e03c
 8000f54:	0800e048 	.word	0x0800e048
 8000f58:	0800e054 	.word	0x0800e054
 8000f5c:	0800e064 	.word	0x0800e064
 8000f60:	0800e070 	.word	0x0800e070
 8000f64:	0800e09c 	.word	0x0800e09c

08000f68 <bitToStr>:

#if !defined(STM32F3)
__STATIC_INLINE const char* bitToStr(uint32_t val)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
    if (val)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <bitToStr+0x12>
        return "True";
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <bitToStr+0x20>)
 8000f78:	e000      	b.n	8000f7c <bitToStr+0x14>
    else
        return "False";
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <bitToStr+0x24>)
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	0800e0a4 	.word	0x0800e0a4
 8000f8c:	0800e0ac 	.word	0x0800e0ac

08000f90 <logDeviceConf>:
#endif

__STATIC_INLINE void logDeviceConf(void)
{
 8000f90:	b5b0      	push	{r4, r5, r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
    struct dwtTime t;
    uint32_t st;

#if !defined(STM32F3) && !defined(STM32L5)
    uint32_t acr = FLASH->ACR ;
 8000f96:	4b42      	ldr	r3, [pc, #264]	; (80010a0 <logDeviceConf+0x110>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	61fb      	str	r3, [r7, #28]
#endif
    uint32_t val;

    printf("STM32 Runtime configuration...\r\n");
 8000f9c:	4841      	ldr	r0, [pc, #260]	; (80010a4 <logDeviceConf+0x114>)
 8000f9e:	f00c fab3 	bl	800d508 <puts>

    printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
            (int)HAL_GetDEVID(),
 8000fa2:	f002 fff5 	bl	8003f90 <HAL_GetDEVID>
 8000fa6:	4603      	mov	r3, r0
    printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8000fa8:	461c      	mov	r4, r3
            devIdToStr(HAL_GetDEVID()),
 8000faa:	f002 fff1 	bl	8003f90 <HAL_GetDEVID>
 8000fae:	4603      	mov	r3, r0
    printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fec2 	bl	8000d3c <devIdToStr>
 8000fb8:	4605      	mov	r5, r0
            (int)HAL_GetREVID()
 8000fba:	f002 ffdd 	bl	8003f78 <HAL_GetREVID>
 8000fbe:	4603      	mov	r3, r0
    printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8000fc0:	462a      	mov	r2, r5
 8000fc2:	4621      	mov	r1, r4
 8000fc4:	4838      	ldr	r0, [pc, #224]	; (80010a8 <logDeviceConf+0x118>)
 8000fc6:	f00c fa17 	bl	800d3f8 <iprintf>
    );

    printf(" Core Arch.   : M%d - %s %s\r\n",
 8000fca:	4b38      	ldr	r3, [pc, #224]	; (80010ac <logDeviceConf+0x11c>)
 8000fcc:	4a38      	ldr	r2, [pc, #224]	; (80010b0 <logDeviceConf+0x120>)
 8000fce:	2107      	movs	r1, #7
 8000fd0:	4838      	ldr	r0, [pc, #224]	; (80010b4 <logDeviceConf+0x124>)
 8000fd2:	f00c fa11 	bl	800d3f8 <iprintf>
                    "!FPU NOT PRESENT",
                    ""
#endif
    );

    printf(" HAL version  : 0x%08x\r\n", (int)HAL_GetHalVersion());
 8000fd6:	f002 ffc5 	bl	8003f64 <HAL_GetHalVersion>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4836      	ldr	r0, [pc, #216]	; (80010b8 <logDeviceConf+0x128>)
 8000fe0:	f00c fa0a 	bl	800d3f8 <iprintf>

    val = systemCoreClock()/1000000;
 8000fe4:	f7ff fd70 	bl	8000ac8 <systemCoreClock>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	4b34      	ldr	r3, [pc, #208]	; (80010bc <logDeviceConf+0x12c>)
 8000fec:	fba3 2302 	umull	r2, r3, r3, r2
 8000ff0:	0c9b      	lsrs	r3, r3, #18
 8000ff2:	61bb      	str	r3, [r7, #24]

#if !defined(STM32H7)
    printf(" system clock : %u MHz\r\n", (int)val);
#else
    printf(" SYSCLK clock : %u MHz\r\n", (int)val);
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4831      	ldr	r0, [pc, #196]	; (80010c0 <logDeviceConf+0x130>)
 8000ffa:	f00c f9fd 	bl	800d3f8 <iprintf>
    printf(" HCLK clock   : %u MHz\r\n", (int)HAL_RCC_GetHCLKFreq()/1000000);    
 8000ffe:	f005 f829 	bl	8006054 <HAL_RCC_GetHCLKFreq>
 8001002:	4603      	mov	r3, r0
 8001004:	4a2d      	ldr	r2, [pc, #180]	; (80010bc <logDeviceConf+0x12c>)
 8001006:	fb82 1203 	smull	r1, r2, r2, r3
 800100a:	1492      	asrs	r2, r2, #18
 800100c:	17db      	asrs	r3, r3, #31
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	4619      	mov	r1, r3
 8001012:	482c      	ldr	r0, [pc, #176]	; (80010c4 <logDeviceConf+0x134>)
 8001014:	f00c f9f0 	bl	800d3f8 <iprintf>
#endif

#if defined(STM32F7) || defined(STM32H7)
    val = SCB->CCR;
 8001018:	4b2b      	ldr	r3, [pc, #172]	; (80010c8 <logDeviceConf+0x138>)
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	61bb      	str	r3, [r7, #24]
            (int)acr,
            bitToStr((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos),
            bitToStr((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos),
            (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
#else
    printf(" FLASH conf.  : ACR=0x%08x - latency=%d\r\n",
 800101e:	69f9      	ldr	r1, [r7, #28]
            (int)acr,
            (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
 8001020:	69fb      	ldr	r3, [r7, #28]
    printf(" FLASH conf.  : ACR=0x%08x - latency=%d\r\n",
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	461a      	mov	r2, r3
 8001028:	4828      	ldr	r0, [pc, #160]	; (80010cc <logDeviceConf+0x13c>)
 800102a:	f00c f9e5 	bl	800d3f8 <iprintf>
#endif
#if !defined(CORE_M4)
    printf(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff97 	bl	8000f68 <bitToStr>
 800103a:	4604      	mov	r4, r0
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ff90 	bl	8000f68 <bitToStr>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	4621      	mov	r1, r4
 800104e:	4820      	ldr	r0, [pc, #128]	; (80010d0 <logDeviceConf+0x140>)
 8001050:	f00c f9d2 	bl	800d3f8 <iprintf>
#if defined(STM32L5)
    printf(" ICACHE       : %s\r\n", bitToStr(READ_BIT(ICACHE->CR, ICACHE_CR_EN)));
#endif
#endif

    dwtIpInit();
 8001054:	f7ff fc6e 	bl	8000934 <dwtIpInit>
    dwtReset();
 8001058:	f7ff fc88 	bl	800096c <dwtReset>
    HAL_Delay(100);
 800105c:	2064      	movs	r0, #100	; 0x64
 800105e:	f002 ff5f 	bl	8003f20 <HAL_Delay>
    st = dwtGetCycles();
 8001062:	f7ff fc8f 	bl	8000984 <dwtGetCycles>
 8001066:	6178      	str	r0, [r7, #20]
    dwtCyclesToTime(st/100, &t);
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	4a1a      	ldr	r2, [pc, #104]	; (80010d4 <logDeviceConf+0x144>)
 800106c:	fba2 2303 	umull	r2, r3, r2, r3
 8001070:	095b      	lsrs	r3, r3, #5
 8001072:	f04f 0400 	mov.w	r4, #0
 8001076:	1d3a      	adds	r2, r7, #4
 8001078:	4618      	mov	r0, r3
 800107a:	4621      	mov	r1, r4
 800107c:	f7ff fd2b 	bl	8000ad6 <dwtCyclesToTime>

    printf(" Calibration  : HAL_Delay(1)=%d.%03d ms\r\n",
            t.s * 100 + t.ms, t.us);
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	2264      	movs	r2, #100	; 0x64
 8001084:	fb02 f203 	mul.w	r2, r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
    printf(" Calibration  : HAL_Delay(1)=%d.%03d ms\r\n",
 800108a:	4413      	add	r3, r2
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4619      	mov	r1, r3
 8001090:	4811      	ldr	r0, [pc, #68]	; (80010d8 <logDeviceConf+0x148>)
 8001092:	f00c f9b1 	bl	800d3f8 <iprintf>
}
 8001096:	bf00      	nop
 8001098:	3720      	adds	r7, #32
 800109a:	46bd      	mov	sp, r7
 800109c:	bdb0      	pop	{r4, r5, r7, pc}
 800109e:	bf00      	nop
 80010a0:	52002000 	.word	0x52002000
 80010a4:	0800e0b4 	.word	0x0800e0b4
 80010a8:	0800e0d4 	.word	0x0800e0d4
 80010ac:	0800e108 	.word	0x0800e108
 80010b0:	0800e114 	.word	0x0800e114
 80010b4:	0800e120 	.word	0x0800e120
 80010b8:	0800e140 	.word	0x0800e140
 80010bc:	431bde83 	.word	0x431bde83
 80010c0:	0800e15c 	.word	0x0800e15c
 80010c4:	0800e178 	.word	0x0800e178
 80010c8:	e000ed00 	.word	0xe000ed00
 80010cc:	0800e194 	.word	0x0800e194
 80010d0:	0800e1c0 	.word	0x0800e1c0
 80010d4:	51eb851f 	.word	0x51eb851f
 80010d8:	0800e1e0 	.word	0x0800e1e0

080010dc <disableInts>:

__STATIC_INLINE uint32_t disableInts(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010e2:	f3ef 8310 	mrs	r3, PRIMASK
 80010e6:	603b      	str	r3, [r7, #0]
  return(result);
 80010e8:	683b      	ldr	r3, [r7, #0]
    uint32_t state;

    state = __get_PRIMASK();
 80010ea:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80010ec:	b672      	cpsid	i
    __disable_irq();

    return state;
 80010ee:	687b      	ldr	r3, [r7, #4]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <ioGetUint8>:

#define MAGIC_MALLOC_NUMBER 0xefdcba98


static int ioGetUint8(uint8_t *buff, int count, uint32_t timeout)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status;

    if ((!buff) || (count <= 0))
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d002      	beq.n	8001114 <ioGetUint8+0x18>
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	2b00      	cmp	r3, #0
 8001112:	dc02      	bgt.n	800111a <ioGetUint8+0x1e>
        return -1;
 8001114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001118:	e014      	b.n	8001144 <ioGetUint8+0x48>

    status = HAL_UART_Receive(&UartHandle, (uint8_t *)buff, count,
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	b29a      	uxth	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	68f9      	ldr	r1, [r7, #12]
 8001122:	480a      	ldr	r0, [pc, #40]	; (800114c <ioGetUint8+0x50>)
 8001124:	f006 fbc8 	bl	80078b8 <HAL_UART_Receive>
 8001128:	4603      	mov	r3, r0
 800112a:	75fb      	strb	r3, [r7, #23]
            timeout);

    if (status == HAL_TIMEOUT)
 800112c:	7dfb      	ldrb	r3, [r7, #23]
 800112e:	2b03      	cmp	r3, #3
 8001130:	d102      	bne.n	8001138 <ioGetUint8+0x3c>
        return -1;
 8001132:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001136:	e005      	b.n	8001144 <ioGetUint8+0x48>

    return (status == HAL_OK ? count : 0);
 8001138:	7dfb      	ldrb	r3, [r7, #23]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <ioGetUint8+0x46>
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	e000      	b.n	8001144 <ioGetUint8+0x48>
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	24000658 	.word	0x24000658

08001150 <_write>:
#if defined(__GNUC__)

int _write(int fd, const void *buff, int count);

int _write(int fd, const void *buff, int count)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status;

    if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	da0d      	bge.n	800117e <_write+0x2e>
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d00a      	beq.n	800117e <_write+0x2e>
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2b02      	cmp	r3, #2
 800116c:	d007      	beq.n	800117e <_write+0x2e>
        errno = EBADF;
 800116e:	f00b fec1 	bl	800cef4 <__errno>
 8001172:	4602      	mov	r2, r0
 8001174:	2309      	movs	r3, #9
 8001176:	6013      	str	r3, [r2, #0]
        return -1;
 8001178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800117c:	e00f      	b.n	800119e <_write+0x4e>
    }

    status = HAL_UART_Transmit(&UartHandle, (uint8_t *)buff, count,
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	b29a      	uxth	r2, r3
 8001182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001186:	68b9      	ldr	r1, [r7, #8]
 8001188:	4807      	ldr	r0, [pc, #28]	; (80011a8 <_write+0x58>)
 800118a:	f006 faff 	bl	800778c <HAL_UART_Transmit>
 800118e:	4603      	mov	r3, r0
 8001190:	75fb      	strb	r3, [r7, #23]
            HAL_MAX_DELAY);

    return (status == HAL_OK ? count : 0);
 8001192:	7dfb      	ldrb	r3, [r7, #23]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <_write+0x4c>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	e000      	b.n	800119e <_write+0x4e>
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	24000658 	.word	0x24000658

080011ac <aiLogErr>:
#endif



__STATIC_INLINE void aiLogErr(const ai_error err, const char *fct)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
    if (fct)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d009      	beq.n	80011d0 <aiLogErr+0x24>
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
                err.type, err.code);
 80011bc:	793b      	ldrb	r3, [r7, #4]
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
 80011be:	461a      	mov	r2, r3
                err.type, err.code);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f3c3 2317 	ubfx	r3, r3, #8, #24
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
 80011c6:	6839      	ldr	r1, [r7, #0]
 80011c8:	4808      	ldr	r0, [pc, #32]	; (80011ec <aiLogErr+0x40>)
 80011ca:	f00c f915 	bl	800d3f8 <iprintf>
    else
        printf("E: AI error - type=%d code=%d\r\n", err.type, err.code);
}
 80011ce:	e008      	b.n	80011e2 <aiLogErr+0x36>
        printf("E: AI error - type=%d code=%d\r\n", err.type, err.code);
 80011d0:	793b      	ldrb	r3, [r7, #4]
 80011d2:	4619      	mov	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80011da:	461a      	mov	r2, r3
 80011dc:	4804      	ldr	r0, [pc, #16]	; (80011f0 <aiLogErr+0x44>)
 80011de:	f00c f90b 	bl	800d3f8 <iprintf>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	0800e20c 	.word	0x0800e20c
 80011f0:	0800e234 	.word	0x0800e234

080011f4 <aiPrintLayoutBuffer>:

__STATIC_INLINE void aiPrintLayoutBuffer(const char *msg, int idx,
        const ai_buffer* buffer)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af02      	add	r7, sp, #8
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
    uint32_t type_id = AI_BUFFER_FMT_GET_TYPE(buffer->format);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	145b      	asrs	r3, r3, #17
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	61fb      	str	r3, [r7, #28]
    printf("%s[%d] ",msg, idx);
 800120c:	68ba      	ldr	r2, [r7, #8]
 800120e:	68f9      	ldr	r1, [r7, #12]
 8001210:	4897      	ldr	r0, [pc, #604]	; (8001470 <aiPrintLayoutBuffer+0x27c>)
 8001212:	f00c f8f1 	bl	800d3f8 <iprintf>
    if (type_id == AI_BUFFER_FMT_TYPE_Q) {
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	2b02      	cmp	r3, #2
 800121a:	f040 818c 	bne.w	8001536 <aiPrintLayoutBuffer+0x342>
        printf(" %s%d,",
                AI_BUFFER_FMT_GET_SIGN(buffer->format)?"s":"u",
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        printf(" %s%d,",
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <aiPrintLayoutBuffer+0x3a>
 800122a:	4992      	ldr	r1, [pc, #584]	; (8001474 <aiPrintLayoutBuffer+0x280>)
 800122c:	e000      	b.n	8001230 <aiPrintLayoutBuffer+0x3c>
 800122e:	4992      	ldr	r1, [pc, #584]	; (8001478 <aiPrintLayoutBuffer+0x284>)
                        (int)AI_BUFFER_FMT_GET_BITS(buffer->format));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	11db      	asrs	r3, r3, #7
        printf(" %s%d,",
 8001236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800123a:	461a      	mov	r2, r3
 800123c:	488f      	ldr	r0, [pc, #572]	; (800147c <aiPrintLayoutBuffer+0x288>)
 800123e:	f00c f8db 	bl	800d3f8 <iprintf>
        if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	2b00      	cmp	r3, #0
 8001248:	f000 8157 	beq.w	80014fa <aiPrintLayoutBuffer+0x306>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 814f 	beq.w	80014fa <aiPrintLayoutBuffer+0x306>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 8149 	beq.w	80014fa <aiPrintLayoutBuffer+0x306>
            ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, 0);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d058      	beq.n	8001322 <aiPrintLayoutBuffer+0x12e>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	2b00      	cmp	r3, #0
 800127c:	d051      	beq.n	8001322 <aiPrintLayoutBuffer+0x12e>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d04c      	beq.n	8001322 <aiPrintLayoutBuffer+0x12e>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d045      	beq.n	800131c <aiPrintLayoutBuffer+0x128>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	d03e      	beq.n	800131c <aiPrintLayoutBuffer+0x128>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d039      	beq.n	800131c <aiPrintLayoutBuffer+0x128>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00a      	beq.n	80012c6 <aiPrintLayoutBuffer+0xd2>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <aiPrintLayoutBuffer+0xd2>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	e000      	b.n	80012c8 <aiPrintLayoutBuffer+0xd4>
 80012c6:	2300      	movs	r3, #0
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d026      	beq.n	800131c <aiPrintLayoutBuffer+0x128>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00a      	beq.n	80012ec <aiPrintLayoutBuffer+0xf8>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <aiPrintLayoutBuffer+0xf8>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	e000      	b.n	80012ee <aiPrintLayoutBuffer+0xfa>
 80012ec:	2300      	movs	r3, #0
 80012ee:	885b      	ldrh	r3, [r3, #2]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d013      	beq.n	800131c <aiPrintLayoutBuffer+0x128>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d00a      	beq.n	8001312 <aiPrintLayoutBuffer+0x11e>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <aiPrintLayoutBuffer+0x11e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	e000      	b.n	8001314 <aiPrintLayoutBuffer+0x120>
 8001312:	2300      	movs	r3, #0
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	e004      	b.n	8001326 <aiPrintLayoutBuffer+0x132>
 800131c:	f04f 0300 	mov.w	r3, #0
 8001320:	e001      	b.n	8001326 <aiPrintLayoutBuffer+0x132>
 8001322:	f04f 0300 	mov.w	r3, #0
 8001326:	61bb      	str	r3, [r7, #24]
            int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, 0);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 80d6 	beq.w	80014de <aiPrintLayoutBuffer+0x2ea>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 80ce 	beq.w	80014de <aiPrintLayoutBuffer+0x2ea>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 80c8 	beq.w	80014de <aiPrintLayoutBuffer+0x2ea>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d06c      	beq.n	8001430 <aiPrintLayoutBuffer+0x23c>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d065      	beq.n	8001430 <aiPrintLayoutBuffer+0x23c>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d060      	beq.n	8001430 <aiPrintLayoutBuffer+0x23c>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00a      	beq.n	800138c <aiPrintLayoutBuffer+0x198>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <aiPrintLayoutBuffer+0x198>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	e000      	b.n	800138e <aiPrintLayoutBuffer+0x19a>
 800138c:	2300      	movs	r3, #0
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d04b      	beq.n	8001430 <aiPrintLayoutBuffer+0x23c>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d045      	beq.n	800142c <aiPrintLayoutBuffer+0x238>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d03e      	beq.n	800142c <aiPrintLayoutBuffer+0x238>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d039      	beq.n	800142c <aiPrintLayoutBuffer+0x238>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d00a      	beq.n	80013d6 <aiPrintLayoutBuffer+0x1e2>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <aiPrintLayoutBuffer+0x1e2>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	e000      	b.n	80013d8 <aiPrintLayoutBuffer+0x1e4>
 80013d6:	2300      	movs	r3, #0
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d026      	beq.n	800142c <aiPrintLayoutBuffer+0x238>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00a      	beq.n	80013fc <aiPrintLayoutBuffer+0x208>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <aiPrintLayoutBuffer+0x208>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	e000      	b.n	80013fe <aiPrintLayoutBuffer+0x20a>
 80013fc:	2300      	movs	r3, #0
 80013fe:	885b      	ldrh	r3, [r3, #2]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d013      	beq.n	800142c <aiPrintLayoutBuffer+0x238>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d00a      	beq.n	8001422 <aiPrintLayoutBuffer+0x22e>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <aiPrintLayoutBuffer+0x22e>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	e000      	b.n	8001424 <aiPrintLayoutBuffer+0x230>
 8001422:	2300      	movs	r3, #0
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	e057      	b.n	80014dc <aiPrintLayoutBuffer+0x2e8>
 800142c:	2300      	movs	r3, #0
 800142e:	e055      	b.n	80014dc <aiPrintLayoutBuffer+0x2e8>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d04f      	beq.n	80014d8 <aiPrintLayoutBuffer+0x2e4>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	d048      	beq.n	80014d8 <aiPrintLayoutBuffer+0x2e4>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d043      	beq.n	80014d8 <aiPrintLayoutBuffer+0x2e4>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	695b      	ldr	r3, [r3, #20]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d013      	beq.n	8001480 <aiPrintLayoutBuffer+0x28c>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00c      	beq.n	8001480 <aiPrintLayoutBuffer+0x28c>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	e009      	b.n	8001482 <aiPrintLayoutBuffer+0x28e>
 800146e:	bf00      	nop
 8001470:	0800e254 	.word	0x0800e254
 8001474:	0800e25c 	.word	0x0800e25c
 8001478:	0800e260 	.word	0x0800e260
 800147c:	0800e264 	.word	0x0800e264
 8001480:	2300      	movs	r3, #0
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d027      	beq.n	80014d8 <aiPrintLayoutBuffer+0x2e4>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00a      	beq.n	80014a6 <aiPrintLayoutBuffer+0x2b2>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	695b      	ldr	r3, [r3, #20]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <aiPrintLayoutBuffer+0x2b2>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	e000      	b.n	80014a8 <aiPrintLayoutBuffer+0x2b4>
 80014a6:	2300      	movs	r3, #0
 80014a8:	885b      	ldrh	r3, [r3, #2]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d014      	beq.n	80014d8 <aiPrintLayoutBuffer+0x2e4>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d00a      	beq.n	80014cc <aiPrintLayoutBuffer+0x2d8>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <aiPrintLayoutBuffer+0x2d8>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	e000      	b.n	80014ce <aiPrintLayoutBuffer+0x2da>
 80014cc:	2300      	movs	r3, #0
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f993 3000 	ldrsb.w	r3, [r3]
 80014d6:	e001      	b.n	80014dc <aiPrintLayoutBuffer+0x2e8>
 80014d8:	2300      	movs	r3, #0
 80014da:	e001      	b.n	80014e0 <aiPrintLayoutBuffer+0x2ec>
 80014dc:	e000      	b.n	80014e0 <aiPrintLayoutBuffer+0x2ec>
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
            printf(" scale=%f, zero=%d,", scale, zero_point);
 80014e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80014e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	ec53 2b17 	vmov	r2, r3, d7
 80014f2:	4833      	ldr	r0, [pc, #204]	; (80015c0 <aiPrintLayoutBuffer+0x3cc>)
 80014f4:	f00b ff80 	bl	800d3f8 <iprintf>
        if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 80014f8:	e02d      	b.n	8001556 <aiPrintLayoutBuffer+0x362>
        } else {
            printf("Q%d.%d,",
                    (int)AI_BUFFER_FMT_GET_BITS(buffer->format)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	11db      	asrs	r3, r3, #7
 8001500:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                    - ((int)AI_BUFFER_FMT_GET_FBITS(buffer->format) +
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800150e:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
                            (int)AI_BUFFER_FMT_GET_SIGN(buffer->format)),
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	15db      	asrs	r3, r3, #23
 8001518:	f003 0301 	and.w	r3, r3, #1
                    - ((int)AI_BUFFER_FMT_GET_FBITS(buffer->format) +
 800151c:	440b      	add	r3, r1
            printf("Q%d.%d,",
 800151e:	1ad1      	subs	r1, r2, r3
                            AI_BUFFER_FMT_GET_FBITS(buffer->format));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
            printf("Q%d.%d,",
 800152a:	3b40      	subs	r3, #64	; 0x40
 800152c:	461a      	mov	r2, r3
 800152e:	4825      	ldr	r0, [pc, #148]	; (80015c4 <aiPrintLayoutBuffer+0x3d0>)
 8001530:	f00b ff62 	bl	800d3f8 <iprintf>
 8001534:	e00f      	b.n	8001556 <aiPrintLayoutBuffer+0x362>
        }
    }
    else if (type_id == AI_BUFFER_FMT_TYPE_FLOAT)
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d109      	bne.n	8001550 <aiPrintLayoutBuffer+0x35c>
        printf(" float%d,",
                (int)AI_BUFFER_FMT_GET_BITS(buffer->format));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	11db      	asrs	r3, r3, #7
        printf(" float%d,",
 8001542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001546:	4619      	mov	r1, r3
 8001548:	481f      	ldr	r0, [pc, #124]	; (80015c8 <aiPrintLayoutBuffer+0x3d4>)
 800154a:	f00b ff55 	bl	800d3f8 <iprintf>
 800154e:	e002      	b.n	8001556 <aiPrintLayoutBuffer+0x362>
    else
        printf("NONE");
 8001550:	481e      	ldr	r0, [pc, #120]	; (80015cc <aiPrintLayoutBuffer+0x3d8>)
 8001552:	f00b ff51 	bl	800d3f8 <iprintf>
    printf(" %ld bytes, shape=(%d,%d,%ld)",
            AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), buffer->format),
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	891b      	ldrh	r3, [r3, #8]
 800155a:	461a      	mov	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	88db      	ldrh	r3, [r3, #6]
 8001560:	fb03 f302 	mul.w	r3, r3, r2
 8001564:	461a      	mov	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	fb03 f302 	mul.w	r3, r3, r2
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	6812      	ldr	r2, [r2, #0]
 8001572:	11d2      	asrs	r2, r2, #7
 8001574:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001578:	fb02 f303 	mul.w	r3, r2, r3
 800157c:	3304      	adds	r3, #4
    printf(" %ld bytes, shape=(%d,%d,%ld)",
 800157e:	08d9      	lsrs	r1, r3, #3
            buffer->height, buffer->width, buffer->channels);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	88db      	ldrh	r3, [r3, #6]
    printf(" %ld bytes, shape=(%d,%d,%ld)",
 8001584:	461a      	mov	r2, r3
            buffer->height, buffer->width, buffer->channels);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	891b      	ldrh	r3, [r3, #8]
    printf(" %ld bytes, shape=(%d,%d,%ld)",
 800158a:	4618      	mov	r0, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	4603      	mov	r3, r0
 8001594:	480e      	ldr	r0, [pc, #56]	; (80015d0 <aiPrintLayoutBuffer+0x3dc>)
 8001596:	f00b ff2f 	bl	800d3f8 <iprintf>
    if (buffer->data)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d006      	beq.n	80015b0 <aiPrintLayoutBuffer+0x3bc>
        printf(" (@0x%08x)\r\n", (int)buffer->data);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	4619      	mov	r1, r3
 80015a8:	480a      	ldr	r0, [pc, #40]	; (80015d4 <aiPrintLayoutBuffer+0x3e0>)
 80015aa:	f00b ff25 	bl	800d3f8 <iprintf>
    else
        printf(" (USER domain)\r\n");
}
 80015ae:	e002      	b.n	80015b6 <aiPrintLayoutBuffer+0x3c2>
        printf(" (USER domain)\r\n");
 80015b0:	4809      	ldr	r0, [pc, #36]	; (80015d8 <aiPrintLayoutBuffer+0x3e4>)
 80015b2:	f00b ffa9 	bl	800d508 <puts>
}
 80015b6:	bf00      	nop
 80015b8:	3720      	adds	r7, #32
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	0800e26c 	.word	0x0800e26c
 80015c4:	0800e280 	.word	0x0800e280
 80015c8:	0800e288 	.word	0x0800e288
 80015cc:	0800e294 	.word	0x0800e294
 80015d0:	0800e29c 	.word	0x0800e29c
 80015d4:	0800e2bc 	.word	0x0800e2bc
 80015d8:	0800e2cc 	.word	0x0800e2cc

080015dc <aiPrintNetworkInfo>:

__STATIC_INLINE void aiPrintNetworkInfo(const ai_network_report* report)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
    int i;
    printf("Network informations...\r\n");
 80015e4:	485a      	ldr	r0, [pc, #360]	; (8001750 <aiPrintNetworkInfo+0x174>)
 80015e6:	f00b ff8f 	bl	800d508 <puts>
    printf(" model name         : %s\r\n", report->model_name);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4619      	mov	r1, r3
 80015f0:	4858      	ldr	r0, [pc, #352]	; (8001754 <aiPrintNetworkInfo+0x178>)
 80015f2:	f00b ff01 	bl	800d3f8 <iprintf>
    printf(" model signature    : %s\r\n", report->model_signature);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	4619      	mov	r1, r3
 80015fc:	4856      	ldr	r0, [pc, #344]	; (8001758 <aiPrintNetworkInfo+0x17c>)
 80015fe:	f00b fefb 	bl	800d3f8 <iprintf>
    printf(" model datetime     : %s\r\n", report->model_datetime);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	4619      	mov	r1, r3
 8001608:	4854      	ldr	r0, [pc, #336]	; (800175c <aiPrintNetworkInfo+0x180>)
 800160a:	f00b fef5 	bl	800d3f8 <iprintf>
    printf(" compile datetime   : %s\r\n", report->compile_datetime);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	4619      	mov	r1, r3
 8001614:	4852      	ldr	r0, [pc, #328]	; (8001760 <aiPrintNetworkInfo+0x184>)
 8001616:	f00b feef 	bl	800d3f8 <iprintf>
    printf(" runtime version    : %d.%d.%d\r\n",
            report->runtime_version.major,
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	7d1b      	ldrb	r3, [r3, #20]
    printf(" runtime version    : %d.%d.%d\r\n",
 800161e:	4619      	mov	r1, r3
            report->runtime_version.minor,
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	7d5b      	ldrb	r3, [r3, #21]
    printf(" runtime version    : %d.%d.%d\r\n",
 8001624:	461a      	mov	r2, r3
            report->runtime_version.micro);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	7d9b      	ldrb	r3, [r3, #22]
    printf(" runtime version    : %d.%d.%d\r\n",
 800162a:	484e      	ldr	r0, [pc, #312]	; (8001764 <aiPrintNetworkInfo+0x188>)
 800162c:	f00b fee4 	bl	800d3f8 <iprintf>
    if (report->tool_revision[0])
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00c      	beq.n	8001654 <aiPrintNetworkInfo+0x78>
    	printf(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <aiPrintNetworkInfo+0x6e>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	e000      	b.n	800164c <aiPrintNetworkInfo+0x70>
 800164a:	4b47      	ldr	r3, [pc, #284]	; (8001768 <aiPrintNetworkInfo+0x18c>)
 800164c:	4619      	mov	r1, r3
 800164e:	4847      	ldr	r0, [pc, #284]	; (800176c <aiPrintNetworkInfo+0x190>)
 8001650:	f00b fed2 	bl	800d3f8 <iprintf>
    printf(" tools version      : %d.%d.%d\r\n",
            report->tool_version.major,
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7f1b      	ldrb	r3, [r3, #28]
    printf(" tools version      : %d.%d.%d\r\n",
 8001658:	4619      	mov	r1, r3
            report->tool_version.minor,
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7f5b      	ldrb	r3, [r3, #29]
    printf(" tools version      : %d.%d.%d\r\n",
 800165e:	461a      	mov	r2, r3
            report->tool_version.micro);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	7f9b      	ldrb	r3, [r3, #30]
    printf(" tools version      : %d.%d.%d\r\n",
 8001664:	4842      	ldr	r0, [pc, #264]	; (8001770 <aiPrintNetworkInfo+0x194>)
 8001666:	f00b fec7 	bl	800d3f8 <iprintf>
    printf(" complexity         : %ld MACC\r\n", report->n_macc);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166e:	4619      	mov	r1, r3
 8001670:	4840      	ldr	r0, [pc, #256]	; (8001774 <aiPrintNetworkInfo+0x198>)
 8001672:	f00b fec1 	bl	800d3f8 <iprintf>
    printf(" c-nodes            : %ld\r\n", report->n_nodes);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800167a:	4619      	mov	r1, r3
 800167c:	483e      	ldr	r0, [pc, #248]	; (8001778 <aiPrintNetworkInfo+0x19c>)
 800167e:	f00b febb 	bl	800d3f8 <iprintf>
    printf(" activations        : %ld bytes (@0x%08x)\r\n",
            AI_BUFFER_SIZE(&report->activations), (int)report->activations.data);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001688:	461a      	mov	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001690:	fb03 f302 	mul.w	r3, r3, r2
 8001694:	461a      	mov	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    printf(" activations        : %ld bytes (@0x%08x)\r\n",
 800169a:	fb03 f102 	mul.w	r1, r3, r2
            AI_BUFFER_SIZE(&report->activations), (int)report->activations.data);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    printf(" activations        : %ld bytes (@0x%08x)\r\n",
 80016a2:	461a      	mov	r2, r3
 80016a4:	4835      	ldr	r0, [pc, #212]	; (800177c <aiPrintNetworkInfo+0x1a0>)
 80016a6:	f00b fea7 	bl	800d3f8 <iprintf>
    printf(" weights            : %ld bytes (@0x%08x)\r\n",
            AI_BUFFER_SIZE(&report->params), (int)report->params.data);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80016b0:	461a      	mov	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80016b8:	fb03 f302 	mul.w	r3, r3, r2
 80016bc:	461a      	mov	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    printf(" weights            : %ld bytes (@0x%08x)\r\n",
 80016c2:	fb03 f102 	mul.w	r1, r3, r2
            AI_BUFFER_SIZE(&report->params), (int)report->params.data);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    printf(" weights            : %ld bytes (@0x%08x)\r\n",
 80016ca:	461a      	mov	r2, r3
 80016cc:	482c      	ldr	r0, [pc, #176]	; (8001780 <aiPrintNetworkInfo+0x1a4>)
 80016ce:	f00b fe93 	bl	800d3f8 <iprintf>
    printf(" inputs/outputs     : %u/%u\r\n", report->n_inputs,
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80016d6:	4619      	mov	r1, r3
            report->n_outputs);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    printf(" inputs/outputs     : %u/%u\r\n", report->n_inputs,
 80016dc:	461a      	mov	r2, r3
 80016de:	4829      	ldr	r0, [pc, #164]	; (8001784 <aiPrintNetworkInfo+0x1a8>)
 80016e0:	f00b fe8a 	bl	800d3f8 <iprintf>
    for (i=0; i<report->n_inputs; i++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	e00f      	b.n	800170a <aiPrintNetworkInfo+0x12e>
        aiPrintLayoutBuffer("  I", i, &report->inputs[i]);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	4613      	mov	r3, r2
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	4413      	add	r3, r2
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	440b      	add	r3, r1
 80016fa:	461a      	mov	r2, r3
 80016fc:	68f9      	ldr	r1, [r7, #12]
 80016fe:	4822      	ldr	r0, [pc, #136]	; (8001788 <aiPrintNetworkInfo+0x1ac>)
 8001700:	f7ff fd78 	bl	80011f4 <aiPrintLayoutBuffer>
    for (i=0; i<report->n_inputs; i++)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	3301      	adds	r3, #1
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800170e:	461a      	mov	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4293      	cmp	r3, r2
 8001714:	dbe9      	blt.n	80016ea <aiPrintNetworkInfo+0x10e>
    for (i=0; i<report->n_outputs; i++)
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	e00f      	b.n	800173c <aiPrintNetworkInfo+0x160>
        aiPrintLayoutBuffer("  O", i, &report->outputs[i]);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	4613      	mov	r3, r2
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	4413      	add	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	440b      	add	r3, r1
 800172c:	461a      	mov	r2, r3
 800172e:	68f9      	ldr	r1, [r7, #12]
 8001730:	4816      	ldr	r0, [pc, #88]	; (800178c <aiPrintNetworkInfo+0x1b0>)
 8001732:	f7ff fd5f 	bl	80011f4 <aiPrintLayoutBuffer>
    for (i=0; i<report->n_outputs; i++)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	3301      	adds	r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001740:	461a      	mov	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4293      	cmp	r3, r2
 8001746:	dbe9      	blt.n	800171c <aiPrintNetworkInfo+0x140>
}
 8001748:	bf00      	nop
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	0800e2dc 	.word	0x0800e2dc
 8001754:	0800e2f8 	.word	0x0800e2f8
 8001758:	0800e314 	.word	0x0800e314
 800175c:	0800e330 	.word	0x0800e330
 8001760:	0800e34c 	.word	0x0800e34c
 8001764:	0800e368 	.word	0x0800e368
 8001768:	0800e38c 	.word	0x0800e38c
 800176c:	0800e390 	.word	0x0800e390
 8001770:	0800e3ac 	.word	0x0800e3ac
 8001774:	0800e3d0 	.word	0x0800e3d0
 8001778:	0800e3f4 	.word	0x0800e3f4
 800177c:	0800e410 	.word	0x0800e410
 8001780:	0800e43c 	.word	0x0800e43c
 8001784:	0800e468 	.word	0x0800e468
 8001788:	0800e488 	.word	0x0800e488
 800178c:	0800e48c 	.word	0x0800e48c

08001790 <aiBootstrap>:

static int aiBootstrap(const char *nn_name, const int idx)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b092      	sub	sp, #72	; 0x48
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
    ai_error err;
    ai_u32 ext_addr, sz;

    /* Creating the network */
    printf("Creating instance for \"%s\"..\r\n", nn_name);
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	4868      	ldr	r0, [pc, #416]	; (8001940 <aiBootstrap+0x1b0>)
 800179e:	f00b fe2b 	bl	800d3f8 <iprintf>
    err = ai_mnetwork_create(nn_name, &net_exec_ctx[idx].handle, NULL);
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	4613      	mov	r3, r2
 80017a6:	011b      	lsls	r3, r3, #4
 80017a8:	1a9b      	subs	r3, r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	4a65      	ldr	r2, [pc, #404]	; (8001944 <aiBootstrap+0x1b4>)
 80017ae:	4413      	add	r3, r2
 80017b0:	2200      	movs	r2, #0
 80017b2:	4619      	mov	r1, r3
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f001 fa8b 	bl	8002cd0 <ai_mnetwork_create>
 80017ba:	4603      	mov	r3, r0
 80017bc:	647b      	str	r3, [r7, #68]	; 0x44
    if (err.type) {
 80017be:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d006      	beq.n	80017d4 <aiBootstrap+0x44>
        aiLogErr(err, "ai_mnetwork_create");
 80017c6:	4960      	ldr	r1, [pc, #384]	; (8001948 <aiBootstrap+0x1b8>)
 80017c8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80017ca:	f7ff fcef 	bl	80011ac <aiLogErr>
        return -1;
 80017ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017d2:	e0b0      	b.n	8001936 <aiBootstrap+0x1a6>
    }

    /* Initialize the instance */
    printf("Initializing..\r\n");
 80017d4:	485d      	ldr	r0, [pc, #372]	; (800194c <aiBootstrap+0x1bc>)
 80017d6:	f00b fe97 	bl	800d508 <puts>
#if !defined(AI_MNETWORK_DATA_ACTIVATIONS_INT_SIZE)
    const ai_network_params params = {
            AI_BUFFER_NULL(NULL),
            AI_BUFFER_NULL(activations) };
#else
    ai_network_params params = {
 80017da:	f107 030c 	add.w	r3, r7, #12
 80017de:	2230      	movs	r2, #48	; 0x30
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f00b fd57 	bl	800d296 <memset>
 80017e8:	4b59      	ldr	r3, [pc, #356]	; (8001950 <aiBootstrap+0x1c0>)
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	4b58      	ldr	r3, [pc, #352]	; (8001950 <aiBootstrap+0x1c0>)
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
            AI_BUFFER_NULL(NULL),
            AI_BUFFER_NULL(NULL) };

    if (ai_mnetwork_get_ext_data_activations(net_exec_ctx[idx].handle, &ext_addr, &sz) == 0) {
 80017f0:	4954      	ldr	r1, [pc, #336]	; (8001944 <aiBootstrap+0x1b4>)
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	4613      	mov	r3, r2
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	1a9b      	subs	r3, r3, r2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	440b      	add	r3, r1
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001804:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001808:	4618      	mov	r0, r3
 800180a:	f001 fbc3 	bl	8002f94 <ai_mnetwork_get_ext_data_activations>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d10a      	bne.n	800182a <aiBootstrap+0x9a>
        if (ext_addr == 0xFFFFFFFF) {
 8001814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001816:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800181a:	d104      	bne.n	8001826 <aiBootstrap+0x96>
            params.activations.data = (ai_handle)activations;
 800181c:	4b4d      	ldr	r3, [pc, #308]	; (8001954 <aiBootstrap+0x1c4>)
 800181e:	637b      	str	r3, [r7, #52]	; 0x34
            ext_addr = (ai_u32)activations;
 8001820:	4b4c      	ldr	r3, [pc, #304]	; (8001954 <aiBootstrap+0x1c4>)
 8001822:	643b      	str	r3, [r7, #64]	; 0x40
 8001824:	e001      	b.n	800182a <aiBootstrap+0x9a>
        }
        else {
            params.activations.data = (ai_handle)ext_addr;
 8001826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001828:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }
#endif

    if (!ai_mnetwork_init(net_exec_ctx[idx].handle, &params)) {
 800182a:	4946      	ldr	r1, [pc, #280]	; (8001944 <aiBootstrap+0x1b4>)
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	4613      	mov	r3, r2
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	1a9b      	subs	r3, r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	440b      	add	r3, r1
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f107 020c 	add.w	r2, r7, #12
 800183e:	4611      	mov	r1, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f001 fb0e 	bl	8002e62 <ai_mnetwork_init>
 8001846:	4603      	mov	r3, r0
 8001848:	f083 0301 	eor.w	r3, r3, #1
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d027      	beq.n	80018a2 <aiBootstrap+0x112>
        err = ai_mnetwork_get_error(net_exec_ctx[idx].handle);
 8001852:	493c      	ldr	r1, [pc, #240]	; (8001944 <aiBootstrap+0x1b4>)
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	4613      	mov	r3, r2
 8001858:	011b      	lsls	r3, r3, #4
 800185a:	1a9b      	subs	r3, r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	440b      	add	r3, r1
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f001 fadd 	bl	8002e22 <ai_mnetwork_get_error>
 8001868:	4603      	mov	r3, r0
 800186a:	647b      	str	r3, [r7, #68]	; 0x44
        aiLogErr(err, "ai_mnetwork_init");
 800186c:	493a      	ldr	r1, [pc, #232]	; (8001958 <aiBootstrap+0x1c8>)
 800186e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001870:	f7ff fc9c 	bl	80011ac <aiLogErr>
        ai_mnetwork_destroy(net_exec_ctx[idx].handle);
 8001874:	4933      	ldr	r1, [pc, #204]	; (8001944 <aiBootstrap+0x1b4>)
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	4613      	mov	r3, r2
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	1a9b      	subs	r3, r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	440b      	add	r3, r1
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f001 fa8f 	bl	8002da8 <ai_mnetwork_destroy>
        net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 800188a:	492e      	ldr	r1, [pc, #184]	; (8001944 <aiBootstrap+0x1b4>)
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	4613      	mov	r3, r2
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	1a9b      	subs	r3, r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	440b      	add	r3, r1
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
        return -4;
 800189c:	f06f 0303 	mvn.w	r3, #3
 80018a0:	e049      	b.n	8001936 <aiBootstrap+0x1a6>
    }

    /* Query the created network to get relevant info from it */
    if (ai_mnetwork_get_info(net_exec_ctx[idx].handle, &net_exec_ctx[idx].report)) {
 80018a2:	4928      	ldr	r1, [pc, #160]	; (8001944 <aiBootstrap+0x1b4>)
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	4613      	mov	r3, r2
 80018a8:	011b      	lsls	r3, r3, #4
 80018aa:	1a9b      	subs	r3, r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	440b      	add	r3, r1
 80018b0:	6818      	ldr	r0, [r3, #0]
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	4613      	mov	r3, r2
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	1a9b      	subs	r3, r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	4a21      	ldr	r2, [pc, #132]	; (8001944 <aiBootstrap+0x1b4>)
 80018be:	4413      	add	r3, r2
 80018c0:	3304      	adds	r3, #4
 80018c2:	4619      	mov	r1, r3
 80018c4:	f001 fa92 	bl	8002dec <ai_mnetwork_get_info>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00c      	beq.n	80018e8 <aiBootstrap+0x158>
        aiPrintNetworkInfo(&net_exec_ctx[idx].report);
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	4613      	mov	r3, r2
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	1a9b      	subs	r3, r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	4a1a      	ldr	r2, [pc, #104]	; (8001944 <aiBootstrap+0x1b4>)
 80018da:	4413      	add	r3, r2
 80018dc:	3304      	adds	r3, #4
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fe7c 	bl	80015dc <aiPrintNetworkInfo>
        ai_mnetwork_destroy(net_exec_ctx[idx].handle);
        net_exec_ctx[idx].handle = AI_HANDLE_NULL;
        return -2;
    }

    return 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	e026      	b.n	8001936 <aiBootstrap+0x1a6>
        err = ai_mnetwork_get_error(net_exec_ctx[idx].handle);
 80018e8:	4916      	ldr	r1, [pc, #88]	; (8001944 <aiBootstrap+0x1b4>)
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	4613      	mov	r3, r2
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	1a9b      	subs	r3, r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	440b      	add	r3, r1
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f001 fa92 	bl	8002e22 <ai_mnetwork_get_error>
 80018fe:	4603      	mov	r3, r0
 8001900:	647b      	str	r3, [r7, #68]	; 0x44
        aiLogErr(err, "ai_mnetwork_get_info");
 8001902:	4916      	ldr	r1, [pc, #88]	; (800195c <aiBootstrap+0x1cc>)
 8001904:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001906:	f7ff fc51 	bl	80011ac <aiLogErr>
        ai_mnetwork_destroy(net_exec_ctx[idx].handle);
 800190a:	490e      	ldr	r1, [pc, #56]	; (8001944 <aiBootstrap+0x1b4>)
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	4613      	mov	r3, r2
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	1a9b      	subs	r3, r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	440b      	add	r3, r1
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f001 fa44 	bl	8002da8 <ai_mnetwork_destroy>
        net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8001920:	4908      	ldr	r1, [pc, #32]	; (8001944 <aiBootstrap+0x1b4>)
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	4613      	mov	r3, r2
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	1a9b      	subs	r3, r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	440b      	add	r3, r1
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
        return -2;
 8001932:	f06f 0301 	mvn.w	r3, #1
}
 8001936:	4618      	mov	r0, r3
 8001938:	3748      	adds	r7, #72	; 0x48
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	0800e490 	.word	0x0800e490
 8001944:	240004e4 	.word	0x240004e4
 8001948:	0800e4b0 	.word	0x0800e4b0
 800194c:	0800e4c4 	.word	0x0800e4c4
 8001950:	40000040 	.word	0x40000040
 8001954:	2400055c 	.word	0x2400055c
 8001958:	0800e4d4 	.word	0x0800e4d4
 800195c:	0800e4e8 	.word	0x0800e4e8

08001960 <aiInit>:

static int aiInit(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
    const char *nn_name;
    int idx;

    printf("\r\nAI Network (AI platform API %d.%d.%d)...\r\n",
 8001966:	2300      	movs	r3, #0
 8001968:	2201      	movs	r2, #1
 800196a:	2101      	movs	r1, #1
 800196c:	4812      	ldr	r0, [pc, #72]	; (80019b8 <aiInit+0x58>)
 800196e:	f00b fd43 	bl	800d3f8 <iprintf>
            AI_PLATFORM_API_MAJOR,
            AI_PLATFORM_API_MINOR,
            AI_PLATFORM_API_MICRO);

    /* Discover and init the embedded network */
    idx = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	607b      	str	r3, [r7, #4]
    do {
        nn_name = ai_mnetwork_find(NULL, idx);
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	2000      	movs	r0, #0
 800197a:	f001 f979 	bl	8002c70 <ai_mnetwork_find>
 800197e:	6038      	str	r0, [r7, #0]
        if (nn_name) {
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00d      	beq.n	80019a2 <aiInit+0x42>
            printf("\r\nFound the network \"%s\"\r\n", nn_name);
 8001986:	6839      	ldr	r1, [r7, #0]
 8001988:	480c      	ldr	r0, [pc, #48]	; (80019bc <aiInit+0x5c>)
 800198a:	f00b fd35 	bl	800d3f8 <iprintf>
            if (aiBootstrap(nn_name, idx))
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	6838      	ldr	r0, [r7, #0]
 8001992:	f7ff fefd 	bl	8001790 <aiBootstrap>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d002      	beq.n	80019a2 <aiInit+0x42>
                return -1;
 800199c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019a0:	e006      	b.n	80019b0 <aiInit+0x50>
        }
        idx++;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3301      	adds	r3, #1
 80019a6:	607b      	str	r3, [r7, #4]
    } while (nn_name);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1e3      	bne.n	8001976 <aiInit+0x16>

    return 0;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	0800e500 	.word	0x0800e500
 80019bc:	0800e530 	.word	0x0800e530

080019c0 <aiDeInit>:

static void aiDeInit(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
    ai_error err;
    int idx;

    printf("Releasing the network(s)...\r\n");
 80019c6:	4821      	ldr	r0, [pc, #132]	; (8001a4c <aiDeInit+0x8c>)
 80019c8:	f00b fd9e 	bl	800d508 <puts>

    for (idx=0; idx<AI_MNETWORK_NUMBER; idx++) {
 80019cc:	2300      	movs	r3, #0
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	e034      	b.n	8001a3c <aiDeInit+0x7c>
        if (net_exec_ctx[idx].handle) {
 80019d2:	491f      	ldr	r1, [pc, #124]	; (8001a50 <aiDeInit+0x90>)
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	4613      	mov	r3, r2
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	1a9b      	subs	r3, r3, r2
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	440b      	add	r3, r1
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d027      	beq.n	8001a36 <aiDeInit+0x76>
            if (ai_mnetwork_destroy(net_exec_ctx[idx].handle) != AI_HANDLE_NULL) {
 80019e6:	491a      	ldr	r1, [pc, #104]	; (8001a50 <aiDeInit+0x90>)
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	1a9b      	subs	r3, r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	440b      	add	r3, r1
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f001 f9d6 	bl	8002da8 <ai_mnetwork_destroy>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d010      	beq.n	8001a24 <aiDeInit+0x64>
                err = ai_mnetwork_get_error(net_exec_ctx[idx].handle);
 8001a02:	4913      	ldr	r1, [pc, #76]	; (8001a50 <aiDeInit+0x90>)
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	440b      	add	r3, r1
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f001 fa05 	bl	8002e22 <ai_mnetwork_get_error>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	603b      	str	r3, [r7, #0]
                aiLogErr(err, "ai_mnetwork_destroy");
 8001a1c:	490d      	ldr	r1, [pc, #52]	; (8001a54 <aiDeInit+0x94>)
 8001a1e:	6838      	ldr	r0, [r7, #0]
 8001a20:	f7ff fbc4 	bl	80011ac <aiLogErr>
            }
            net_exec_ctx[idx].handle = NULL;
 8001a24:	490a      	ldr	r1, [pc, #40]	; (8001a50 <aiDeInit+0x90>)
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	1a9b      	subs	r3, r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	440b      	add	r3, r1
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
    for (idx=0; idx<AI_MNETWORK_NUMBER; idx++) {
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	ddc7      	ble.n	80019d2 <aiDeInit+0x12>
        }
    }
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	0800e54c 	.word	0x0800e54c
 8001a50:	240004e4 	.word	0x240004e4
 8001a54:	0800e56c 	.word	0x0800e56c

08001a58 <user_observer_cb>:
static struct u_observer_ctx u_observer_ctx;

/* User callback */
static ai_u32 user_observer_cb(const ai_handle cookie,
    const ai_u32 flags,
    const ai_observer_node *node) {
 8001a58:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001a5c:	b08a      	sub	sp, #40	; 0x28
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	60f8      	str	r0, [r7, #12]
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]

  struct u_observer_ctx *u_obs;

  volatile uint64_t ts = dwtGetCycles(); /* time stamp entry */
 8001a66:	f7fe ff8d 	bl	8000984 <dwtGetCycles>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	f04f 0400 	mov.w	r4, #0
 8001a70:	e9c7 3404 	strd	r3, r4, [r7, #16]

  u_obs = (struct u_observer_ctx *)cookie;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
  u_obs->n_cb += 1;
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001a7e:	1c4b      	adds	r3, r1, #1
 8001a80:	f142 0400 	adc.w	r4, r2, #0
 8001a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a86:	e9c2 3400 	strd	r3, r4, [r2]

  if (flags & AI_OBSERVER_POST_EVT) {
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d03d      	beq.n	8001b10 <user_observer_cb+0xb8>
    const uint64_t end_t = ts - u_obs->start_t;
 8001a94:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	e9d3 bc02 	ldrd	fp, ip, [r3, #8]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4614      	mov	r4, r2
 8001aa2:	ebb3 030b 	subs.w	r3, r3, fp
 8001aa6:	eb64 040c 	sbc.w	r4, r4, ip
 8001aaa:	e9c7 3406 	strd	r3, r4, [r7, #24]
    u_obs->k_dur_t += end_t;
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	e9d3 1206 	ldrd	r1, r2, [r3, #24]
 8001ab4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001ab8:	eb13 0b01 	adds.w	fp, r3, r1
 8001abc:	eb44 0c02 	adc.w	ip, r4, r2
 8001ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac2:	e9c2 bc06 	strd	fp, ip, [r2, #24]
    u_obs->nodes[node->c_idx].dur += end_t;
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	6a1a      	ldr	r2, [r3, #32]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	4413      	add	r3, r2
 8001ad2:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	6a18      	ldr	r0, [r3, #32]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	4418      	add	r0, r3
 8001ae2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001ae6:	eb13 0b01 	adds.w	fp, r3, r1
 8001aea:	eb44 0c02 	adc.w	ip, r4, r2
 8001aee:	e9c0 bc00 	strd	fp, ip, [r0]
    u_obs->nodes[node->c_idx].n_runs += 1;
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	6a1a      	ldr	r2, [r3, #32]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	011b      	lsls	r3, r3, #4
 8001afc:	4413      	add	r3, r2
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	6a19      	ldr	r1, [r3, #32]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	440b      	add	r3, r1
 8001b0c:	3201      	adds	r2, #1
 8001b0e:	609a      	str	r2, [r3, #8]
  }

  u_obs->start_t = dwtGetCycles(); /* time stamp exit */
 8001b10:	f7fe ff38 	bl	8000984 <dwtGetCycles>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f04f 0400 	mov.w	r4, #0
 8001b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b1c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  u_obs->u_dur_t += u_obs->start_t  - ts; /* cumulate cycles used by the CB */
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	e9d3 bc02 	ldrd	fp, ip, [r3, #8]
 8001b26:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001b2a:	4659      	mov	r1, fp
 8001b2c:	4662      	mov	r2, ip
 8001b2e:	1ac9      	subs	r1, r1, r3
 8001b30:	eb62 0204 	sbc.w	r2, r2, r4
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	e9d3 bc04 	ldrd	fp, ip, [r3, #16]
 8001b3a:	eb1b 0301 	adds.w	r3, fp, r1
 8001b3e:	eb4c 0402 	adc.w	r4, ip, r2
 8001b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b44:	e9c2 3404 	strd	r3, r4, [r2, #16]
  return 0;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3728      	adds	r7, #40	; 0x28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08001b54 <aiObserverInit>:

void aiObserverInit(struct network_exec_ctx *net_ctx)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b092      	sub	sp, #72	; 0x48
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  ai_handle  net_hdl;
  ai_network_params net_params;
  ai_bool res;
  int sz;

  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) || !net_ctx->report.n_nodes)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d051      	beq.n	8001c06 <aiObserverInit+0xb2>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d04d      	beq.n	8001c06 <aiObserverInit+0xb2>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d049      	beq.n	8001c06 <aiObserverInit+0xb2>
    return;

  if (hidden_mode)
 8001b72:	4b28      	ldr	r3, [pc, #160]	; (8001c14 <aiObserverInit+0xc0>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d147      	bne.n	8001c0a <aiObserverInit+0xb6>
    return;

  /* retrieve real handle */
  ai_mnetwork_get_private_handle(net_ctx->handle, &net_hdl, &net_params);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f107 020c 	add.w	r2, r7, #12
 8001b82:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001b86:	4618      	mov	r0, r3
 8001b88:	f001 f9d8 	bl	8002f3c <ai_mnetwork_get_private_handle>

  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 8001b8c:	2228      	movs	r2, #40	; 0x28
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4821      	ldr	r0, [pc, #132]	; (8001c18 <aiObserverInit+0xc4>)
 8001b92:	f00b fb80 	bl	800d296 <memset>

  /* allocate resources to store the state of the nodes */
  sz = net_ctx->report.n_nodes * sizeof(struct u_node_stat);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9a:	011b      	lsls	r3, r3, #4
 8001b9c:	647b      	str	r3, [r7, #68]	; 0x44
  u_observer_ctx.nodes = (struct u_node_stat*)malloc(sz);
 8001b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f00b fb5d 	bl	800d260 <malloc>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <aiObserverInit+0xc4>)
 8001bac:	621a      	str	r2, [r3, #32]
  if (!u_observer_ctx.nodes) {
 8001bae:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <aiObserverInit+0xc4>)
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d104      	bne.n	8001bc0 <aiObserverInit+0x6c>
    printf("W: enable to allocate the u_node_stats (sz=%d) ..\r\n", sz);
 8001bb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001bb8:	4818      	ldr	r0, [pc, #96]	; (8001c1c <aiObserverInit+0xc8>)
 8001bba:	f00b fc1d 	bl	800d3f8 <iprintf>
    return;
 8001bbe:	e025      	b.n	8001c0c <aiObserverInit+0xb8>
  }

  memset(u_observer_ctx.nodes, 0, sz);
 8001bc0:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <aiObserverInit+0xc4>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f00b fb64 	bl	800d296 <memset>

  /* register the callback */
  res = ai_platform_observer_register(net_hdl, user_observer_cb,
 8001bce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001bd0:	2306      	movs	r3, #6
 8001bd2:	4a11      	ldr	r2, [pc, #68]	; (8001c18 <aiObserverInit+0xc4>)
 8001bd4:	4912      	ldr	r1, [pc, #72]	; (8001c20 <aiObserverInit+0xcc>)
 8001bd6:	f00a f947 	bl	800be68 <ai_platform_observer_register>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
      (ai_handle)&u_observer_ctx, AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT);
  if (!res) {
 8001be0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001be4:	f083 0301 	eor.w	r3, r3, #1
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00e      	beq.n	8001c0c <aiObserverInit+0xb8>
    printf("W: enable to register the user CB\r\n");
 8001bee:	480d      	ldr	r0, [pc, #52]	; (8001c24 <aiObserverInit+0xd0>)
 8001bf0:	f00b fc8a 	bl	800d508 <puts>
    free(u_observer_ctx.nodes);
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <aiObserverInit+0xc4>)
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f00b fb39 	bl	800d270 <free>
    u_observer_ctx.nodes = NULL;
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <aiObserverInit+0xc4>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	621a      	str	r2, [r3, #32]
    return;
 8001c04:	e002      	b.n	8001c0c <aiObserverInit+0xb8>
    return;
 8001c06:	bf00      	nop
 8001c08:	e000      	b.n	8001c0c <aiObserverInit+0xb8>
    return;
 8001c0a:	bf00      	nop
  }
}
 8001c0c:	3748      	adds	r7, #72	; 0x48
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	24000570 	.word	0x24000570
 8001c18:	24000578 	.word	0x24000578
 8001c1c:	0800e580 	.word	0x0800e580
 8001c20:	08001a59 	.word	0x08001a59
 8001c24:	0800e5b4 	.word	0x0800e5b4

08001c28 <aiObserverDone>:

extern const char* ai_layer_type_name(const int type);

void aiObserverDone(struct network_exec_ctx *net_ctx)
{
 8001c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c2c:	ed2d 8b02 	vpush	{d8}
 8001c30:	b0a2      	sub	sp, #136	; 0x88
 8001c32:	af06      	add	r7, sp, #24
 8001c34:	6078      	str	r0, [r7, #4]
  ai_network_params net_params;
  struct dwtTime t;
  uint64_t cumul;
  ai_observer_node node_info;

  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) ||
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 8120 	beq.w	8001e7e <aiObserverDone+0x256>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 811b 	beq.w	8001e7e <aiObserverDone+0x256>
      !net_ctx->report.n_nodes || !u_observer_ctx.nodes)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) ||
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 8116 	beq.w	8001e7e <aiObserverDone+0x256>
      !net_ctx->report.n_nodes || !u_observer_ctx.nodes)
 8001c52:	4b8e      	ldr	r3, [pc, #568]	; (8001e8c <aiObserverDone+0x264>)
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 8111 	beq.w	8001e7e <aiObserverDone+0x256>
    return;

  /* retrieve real handle */
  ai_mnetwork_get_private_handle(net_ctx->handle, &net_hdl, &net_params);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001c64:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f001 f967 	bl	8002f3c <ai_mnetwork_get_private_handle>

  ai_platform_observer_unregister(net_hdl, user_observer_cb,
 8001c6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c70:	4a86      	ldr	r2, [pc, #536]	; (8001e8c <aiObserverDone+0x264>)
 8001c72:	4987      	ldr	r1, [pc, #540]	; (8001e90 <aiObserverDone+0x268>)
 8001c74:	4618      	mov	r0, r3
 8001c76:	f00a f9c7 	bl	800c008 <ai_platform_observer_unregister>
      (ai_handle)&u_observer_ctx);

  printf("\r\n Inference time by c-node\r\n");
 8001c7a:	4886      	ldr	r0, [pc, #536]	; (8001e94 <aiObserverDone+0x26c>)
 8001c7c:	f00b fc44 	bl	800d508 <puts>
  dwtCyclesToTime(u_observer_ctx.k_dur_t / u_observer_ctx.nodes[0].n_runs, &t);
 8001c80:	4b82      	ldr	r3, [pc, #520]	; (8001e8c <aiObserverDone+0x264>)
 8001c82:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001c86:	4b81      	ldr	r3, [pc, #516]	; (8001e8c <aiObserverDone+0x264>)
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f04f 0400 	mov.w	r4, #0
 8001c90:	461a      	mov	r2, r3
 8001c92:	4623      	mov	r3, r4
 8001c94:	f7fe fc8a 	bl	80005ac <__aeabi_uldivmod>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	460c      	mov	r4, r1
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	4621      	mov	r1, r4
 8001ca0:	f107 031c 	add.w	r3, r7, #28
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	f7fe ff16 	bl	8000ad6 <dwtCyclesToTime>
  printf("  kernel  : %d,%03dms (time passed in the c-kernel fcts)\n", t.s * 1000 + t.ms, t.us);
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cb0:	fb02 f203 	mul.w	r2, r2, r3
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	4413      	add	r3, r2
 8001cb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4876      	ldr	r0, [pc, #472]	; (8001e98 <aiObserverDone+0x270>)
 8001cbe:	f00b fb9b 	bl	800d3f8 <iprintf>
  dwtCyclesToTime(u_observer_ctx.u_dur_t / u_observer_ctx.nodes[0].n_runs, &t);
 8001cc2:	4b72      	ldr	r3, [pc, #456]	; (8001e8c <aiObserverDone+0x264>)
 8001cc4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001cc8:	4b70      	ldr	r3, [pc, #448]	; (8001e8c <aiObserverDone+0x264>)
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f04f 0400 	mov.w	r4, #0
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4623      	mov	r3, r4
 8001cd6:	f7fe fc69 	bl	80005ac <__aeabi_uldivmod>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	460c      	mov	r4, r1
 8001cde:	4618      	mov	r0, r3
 8001ce0:	4621      	mov	r1, r4
 8001ce2:	f107 031c 	add.w	r3, r7, #28
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	f7fe fef5 	bl	8000ad6 <dwtCyclesToTime>
  printf("  user    : %d,%03dms (time passed in the user cb)\n", t.s * 1000 + t.ms, t.us);
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cf2:	fb02 f203 	mul.w	r2, r2, r3
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	4413      	add	r3, r2
 8001cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4867      	ldr	r0, [pc, #412]	; (8001e9c <aiObserverDone+0x274>)
 8001d00:	f00b fb7a 	bl	800d3f8 <iprintf>
#if defined(ENABLE_DEBUG) && ENABLE_DEBUG == 1
  printf("  cb #    : %d\n", (int)u_observer_ctx.n_cb);
#endif

  printf("\r\n %-6s%-20s%-7s %s\r\n", "c_id", "type", "id", "time (ms)");
 8001d04:	4b66      	ldr	r3, [pc, #408]	; (8001ea0 <aiObserverDone+0x278>)
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	4b66      	ldr	r3, [pc, #408]	; (8001ea4 <aiObserverDone+0x27c>)
 8001d0a:	4a67      	ldr	r2, [pc, #412]	; (8001ea8 <aiObserverDone+0x280>)
 8001d0c:	4967      	ldr	r1, [pc, #412]	; (8001eac <aiObserverDone+0x284>)
 8001d0e:	4868      	ldr	r0, [pc, #416]	; (8001eb0 <aiObserverDone+0x288>)
 8001d10:	f00b fb72 	bl	800d3f8 <iprintf>
  printf(" -------------------------------------------------\r\n");
 8001d14:	4867      	ldr	r0, [pc, #412]	; (8001eb4 <aiObserverDone+0x28c>)
 8001d16:	f00b fbf7 	bl	800d508 <puts>

  cumul = 0;
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	f04f 0400 	mov.w	r4, #0
 8001d22:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
  node_info.c_idx = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	81bb      	strh	r3, [r7, #12]
  while (ai_platform_observer_node_info(net_hdl, &node_info)) {
 8001d2a:	e06d      	b.n	8001e08 <aiObserverDone+0x1e0>
    struct u_node_stat *sn = &u_observer_ctx.nodes[node_info.c_idx];
 8001d2c:	4b57      	ldr	r3, [pc, #348]	; (8001e8c <aiObserverDone+0x264>)
 8001d2e:	6a1a      	ldr	r2, [r3, #32]
 8001d30:	89bb      	ldrh	r3, [r7, #12]
 8001d32:	011b      	lsls	r3, r3, #4
 8001d34:	4413      	add	r3, r2
 8001d36:	663b      	str	r3, [r7, #96]	; 0x60
    const char *fmt;
    cumul +=  sn->dur;
 8001d38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d3a:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001d3e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8001d42:	186b      	adds	r3, r5, r1
 8001d44:	eb46 0402 	adc.w	r4, r6, r2
 8001d48:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
    dwtCyclesToTime(sn->dur / (uint64_t)sn->n_runs, &t);
 8001d4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f04f 0400 	mov.w	r4, #0
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4623      	mov	r3, r4
 8001d5e:	f7fe fc25 	bl	80005ac <__aeabi_uldivmod>
 8001d62:	4603      	mov	r3, r0
 8001d64:	460c      	mov	r4, r1
 8001d66:	4618      	mov	r0, r3
 8001d68:	4621      	mov	r1, r4
 8001d6a:	f107 031c 	add.w	r3, r7, #28
 8001d6e:	461a      	mov	r2, r3
 8001d70:	f7fe feb1 	bl	8000ad6 <dwtCyclesToTime>
    if ((node_info.type & (ai_u16)0x8000) >> 15)
 8001d74:	89fb      	ldrh	r3, [r7, #14]
 8001d76:	b21b      	sxth	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	da02      	bge.n	8001d82 <aiObserverDone+0x15a>
      fmt = " %-6dTD-%-17s%-5d %4d,%03d %6.02f %c\n";
 8001d7c:	4b4e      	ldr	r3, [pc, #312]	; (8001eb8 <aiObserverDone+0x290>)
 8001d7e:	667b      	str	r3, [r7, #100]	; 0x64
 8001d80:	e001      	b.n	8001d86 <aiObserverDone+0x15e>
    else
      fmt = " %-6d%-20s%-5d %4d,%03d %6.02f %c\n";
 8001d82:	4b4e      	ldr	r3, [pc, #312]	; (8001ebc <aiObserverDone+0x294>)
 8001d84:	667b      	str	r3, [r7, #100]	; 0x64

    printf(fmt, node_info.c_idx,
 8001d86:	89bb      	ldrh	r3, [r7, #12]
 8001d88:	4698      	mov	r8, r3
        ai_layer_type_name(node_info.type  & (ai_u16)0x7FFF),
 8001d8a:	89fb      	ldrh	r3, [r7, #14]
    printf(fmt, node_info.c_idx,
 8001d8c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001d90:	4618      	mov	r0, r3
 8001d92:	f00a ff3d 	bl	800cc10 <ai_layer_type_name>
 8001d96:	4681      	mov	r9, r0
        (int)node_info.id,
 8001d98:	8a3b      	ldrh	r3, [r7, #16]
    printf(fmt, node_info.c_idx,
 8001d9a:	469a      	mov	sl, r3
        t.s * 1000 + t.ms, t.us,
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001da2:	fb02 f203 	mul.w	r2, r2, r3
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    printf(fmt, node_info.c_idx,
 8001da8:	18d5      	adds	r5, r2, r3
 8001daa:	6abe      	ldr	r6, [r7, #40]	; 0x28
        ((float)u_observer_ctx.nodes[node_info.c_idx].dur * 100.0f) / (float)u_observer_ctx.k_dur_t,
 8001dac:	4b37      	ldr	r3, [pc, #220]	; (8001e8c <aiObserverDone+0x264>)
 8001dae:	6a1a      	ldr	r2, [r3, #32]
 8001db0:	89bb      	ldrh	r3, [r7, #12]
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	4413      	add	r3, r2
 8001db6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	f7fe fbaf 	bl	8000520 <__aeabi_ul2f>
 8001dc2:	ee07 0a10 	vmov	s14, r0
 8001dc6:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8001ec0 <aiObserverDone+0x298>
 8001dca:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001dce:	4b2f      	ldr	r3, [pc, #188]	; (8001e8c <aiObserverDone+0x264>)
 8001dd0:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	4621      	mov	r1, r4
 8001dd8:	f7fe fba2 	bl	8000520 <__aeabi_ul2f>
 8001ddc:	ee07 0a10 	vmov	s14, r0
 8001de0:	eec8 7a07 	vdiv.f32	s15, s16, s14
    printf(fmt, node_info.c_idx,
 8001de4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001de8:	2325      	movs	r3, #37	; 0x25
 8001dea:	9304      	str	r3, [sp, #16]
 8001dec:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001df0:	9601      	str	r6, [sp, #4]
 8001df2:	9500      	str	r5, [sp, #0]
 8001df4:	4653      	mov	r3, sl
 8001df6:	464a      	mov	r2, r9
 8001df8:	4641      	mov	r1, r8
 8001dfa:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001dfc:	f00b fafc 	bl	800d3f8 <iprintf>
        '%');
    node_info.c_idx++;
 8001e00:	89bb      	ldrh	r3, [r7, #12]
 8001e02:	3301      	adds	r3, #1
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	81bb      	strh	r3, [r7, #12]
  while (ai_platform_observer_node_info(net_hdl, &node_info)) {
 8001e08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e0a:	f107 020c 	add.w	r2, r7, #12
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f009 ff81 	bl	800bd18 <ai_platform_observer_node_info>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d187      	bne.n	8001d2c <aiObserverDone+0x104>
  }

  printf(" -------------------------------------------------\r\n");
 8001e1c:	4825      	ldr	r0, [pc, #148]	; (8001eb4 <aiObserverDone+0x28c>)
 8001e1e:	f00b fb73 	bl	800d508 <puts>
  cumul /= u_observer_ctx.nodes[0].n_runs;
 8001e22:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <aiObserverDone+0x264>)
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f04f 0400 	mov.w	r4, #0
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4623      	mov	r3, r4
 8001e30:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001e34:	f7fe fbba 	bl	80005ac <__aeabi_uldivmod>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	460c      	mov	r4, r1
 8001e3c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
  dwtCyclesToTime(cumul, &t);
 8001e40:	f107 031c 	add.w	r3, r7, #28
 8001e44:	461a      	mov	r2, r3
 8001e46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001e4a:	f7fe fe44 	bl	8000ad6 <dwtCyclesToTime>
  printf(" %31s %4d,%03d ms\r\n", "", t.s * 1000 + t.ms, t.us);
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e54:	fb02 f203 	mul.w	r2, r2, r3
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	441a      	add	r2, r3
 8001e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5e:	4919      	ldr	r1, [pc, #100]	; (8001ec4 <aiObserverDone+0x29c>)
 8001e60:	4819      	ldr	r0, [pc, #100]	; (8001ec8 <aiObserverDone+0x2a0>)
 8001e62:	f00b fac9 	bl	800d3f8 <iprintf>

  free(u_observer_ctx.nodes);
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <aiObserverDone+0x264>)
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f00b fa00 	bl	800d270 <free>
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 8001e70:	2228      	movs	r2, #40	; 0x28
 8001e72:	2100      	movs	r1, #0
 8001e74:	4805      	ldr	r0, [pc, #20]	; (8001e8c <aiObserverDone+0x264>)
 8001e76:	f00b fa0e 	bl	800d296 <memset>

  return;
 8001e7a:	bf00      	nop
 8001e7c:	e000      	b.n	8001e80 <aiObserverDone+0x258>
    return;
 8001e7e:	bf00      	nop
}
 8001e80:	3770      	adds	r7, #112	; 0x70
 8001e82:	46bd      	mov	sp, r7
 8001e84:	ecbd 8b02 	vpop	{d8}
 8001e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e8c:	24000578 	.word	0x24000578
 8001e90:	08001a59 	.word	0x08001a59
 8001e94:	0800e5d8 	.word	0x0800e5d8
 8001e98:	0800e5f8 	.word	0x0800e5f8
 8001e9c:	0800e634 	.word	0x0800e634
 8001ea0:	0800e694 	.word	0x0800e694
 8001ea4:	0800e668 	.word	0x0800e668
 8001ea8:	0800e66c 	.word	0x0800e66c
 8001eac:	0800e674 	.word	0x0800e674
 8001eb0:	0800e67c 	.word	0x0800e67c
 8001eb4:	0800e6a0 	.word	0x0800e6a0
 8001eb8:	0800e6d4 	.word	0x0800e6d4
 8001ebc:	0800e6fc 	.word	0x0800e6fc
 8001ec0:	42c80000 	.word	0x42c80000
 8001ec4:	0800e38c 	.word	0x0800e38c
 8001ec8:	0800e720 	.word	0x0800e720

08001ecc <aiTestPerformance>:
static bool profiling_mode = false;
static int  profiling_factor = 5;


static int aiTestPerformance(int idx)
{
 8001ecc:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8001ed0:	b0bc      	sub	sp, #240	; 0xf0
 8001ed2:	af04      	add	r7, sp, #16
 8001ed4:	6078      	str	r0, [r7, #4]
    uint32_t mstack_size; /* minimal master stack size */
    uint32_t cstack;      /* current stack @ */
    uint32_t bstack;      /* base stack @ */
#endif

    if (net_exec_ctx[idx].handle == AI_HANDLE_NULL) {
 8001ed6:	49a7      	ldr	r1, [pc, #668]	; (8002174 <aiTestPerformance+0x2a8>)
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	011b      	lsls	r3, r3, #4
 8001ede:	1a9b      	subs	r3, r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	440b      	add	r3, r1
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d106      	bne.n	8001ef8 <aiTestPerformance+0x2c>
        printf("E: network handle is NULL\r\n");
 8001eea:	48a3      	ldr	r0, [pc, #652]	; (8002178 <aiTestPerformance+0x2ac>)
 8001eec:	f00b fb0c 	bl	800d508 <puts>
        return -1;
 8001ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ef4:	f000 bcb6 	b.w	8002864 <aiTestPerformance+0x998>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8001ef8:	f3ef 8314 	mrs	r3, CONTROL
 8001efc:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8001efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    }

#if _APP_STACK_MONITOR_ == 1
    /* Reading ARM Core registers */
    ctrl = __get_CONTROL();
 8001f00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 8001f04:	f3ef 8308 	mrs	r3, MSP
 8001f08:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 8001f0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    cstack = __get_MSP();
 8001f0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

#if defined(__GNUC__)
    estack = (uint32_t)_estack;
 8001f10:	4b9a      	ldr	r3, [pc, #616]	; (800217c <aiTestPerformance+0x2b0>)
 8001f12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    bstack = estack - MIN_STACK_SIZE;
 8001f16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f1a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001f1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    mstack_size = MIN_STACK_SIZE;
 8001f22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    mstack_size = (uint32_t)&CSTACK$$Limit - (uint32_t)&CSTACK$$Base;
#endif

#endif

    if (profiling_mode)
 8001f2a:	4b95      	ldr	r3, [pc, #596]	; (8002180 <aiTestPerformance+0x2b4>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d005      	beq.n	8001f3e <aiTestPerformance+0x72>
        niter = _APP_ITER_ * profiling_factor;
 8001f32:	4b94      	ldr	r3, [pc, #592]	; (8002184 <aiTestPerformance+0x2b8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	011b      	lsls	r3, r3, #4
 8001f38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001f3c:	e002      	b.n	8001f44 <aiTestPerformance+0x78>
    else
        niter = _APP_ITER_;
 8001f3e:	2310      	movs	r3, #16
 8001f40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    printf("\r\nRunning PerfTest on \"%s\" with random inputs (%d iterations)...\r\n",
 8001f44:	498b      	ldr	r1, [pc, #556]	; (8002174 <aiTestPerformance+0x2a8>)
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	1a9b      	subs	r3, r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	440b      	add	r3, r1
 8001f52:	3304      	adds	r3, #4
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	488a      	ldr	r0, [pc, #552]	; (8002188 <aiTestPerformance+0x2bc>)
 8001f5e:	f00b fa4b 	bl	800d3f8 <iprintf>
            net_exec_ctx[idx].report.model_name, niter);

#if _APP_STACK_MONITOR_ == 1
    /* Check that MSP is the active stack */
    if (ctrl & CONTROL_SPSEL_Msk) {
 8001f62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d006      	beq.n	8001f7c <aiTestPerformance+0xb0>
        printf("E: MSP is not the active stack (stack monitoring is disabled)\r\n");
 8001f6e:	4887      	ldr	r0, [pc, #540]	; (800218c <aiTestPerformance+0x2c0>)
 8001f70:	f00b faca 	bl	800d508 <puts>
        stack_mon = false;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 8001f7a:	e002      	b.n	8001f82 <aiTestPerformance+0xb6>
    } else
        stack_mon = true;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

    /* Calculating used stack before test */
    ustack_size = estack - cstack;
 8001f82:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001f86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    if ((stack_mon) && (ustack_size > mstack_size)) {
 8001f90:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00f      	beq.n	8001fb8 <aiTestPerformance+0xec>
 8001f98:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001f9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d909      	bls.n	8001fb8 <aiTestPerformance+0xec>
        printf("E: !stack overflow detected %ld > %ld\r\n", ustack_size,
 8001fa4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001fa8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001fac:	4878      	ldr	r0, [pc, #480]	; (8002190 <aiTestPerformance+0x2c4>)
 8001fae:	f00b fa23 	bl	800d3f8 <iprintf>
                mstack_size);
        stack_mon = false;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
    irqs = disableInts();
#endif

#if _APP_STACK_MONITOR_ == 1
    /* Fill the remaining part of the stack */
    if (stack_mon) {
 8001fb8:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d017      	beq.n	8001ff0 <aiTestPerformance+0x124>
        uint32_t *pw =  (uint32_t*)((bstack + 3) & (~3));
 8001fc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fc4:	3303      	adds	r3, #3
 8001fc6:	f023 0303 	bic.w	r3, r3, #3
 8001fca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

#if ENABLE_DEBUG == 1
        printf("D: fill stack 0x%08lx -> 0x%08lx (%ld)\n", pw, cstack,
                cstack - (uint32_t)pw);
#endif
        while ((uint32_t)pw < cstack) {
 8001fce:	e009      	b.n	8001fe4 <aiTestPerformance+0x118>
            *pw = 0xDEDEDEDE;
 8001fd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fd4:	f04f 32de 	mov.w	r2, #3739147998	; 0xdededede
 8001fd8:	601a      	str	r2, [r3, #0]
            pw++;
 8001fda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fde:	3304      	adds	r3, #4
 8001fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        while ((uint32_t)pw < cstack) {
 8001fe4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fe8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d8ef      	bhi.n	8001fd0 <aiTestPerformance+0x104>
        }
    }
#endif

    /* reset/init cpu clock counters */
    tcumul = 0ULL;
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	f04f 0400 	mov.w	r4, #0
 8001ff8:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
    tmin = UINT64_MAX;
 8001ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002000:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002004:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
    tmax = 0UL;
 8002008:	f04f 0300 	mov.w	r3, #0
 800200c:	f04f 0400 	mov.w	r4, #0
 8002010:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0

    memset(&ia_malloc,0,sizeof(struct ia_malloc));
 8002014:	221c      	movs	r2, #28
 8002016:	2100      	movs	r1, #0
 8002018:	485e      	ldr	r0, [pc, #376]	; (8002194 <aiTestPerformance+0x2c8>)
 800201a:	f00b f93c 	bl	800d296 <memset>

    if ((net_exec_ctx[idx].report.n_inputs > AI_MNETWORK_IN_NUM) ||
 800201e:	4955      	ldr	r1, [pc, #340]	; (8002174 <aiTestPerformance+0x2a8>)
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	1a9b      	subs	r3, r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	440b      	add	r3, r1
 800202c:	3334      	adds	r3, #52	; 0x34
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d80a      	bhi.n	800204a <aiTestPerformance+0x17e>
            (net_exec_ctx[idx].report.n_outputs > AI_MNETWORK_OUT_NUM))
 8002034:	494f      	ldr	r1, [pc, #316]	; (8002174 <aiTestPerformance+0x2a8>)
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	1a9b      	subs	r3, r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	440b      	add	r3, r1
 8002042:	3336      	adds	r3, #54	; 0x36
 8002044:	881b      	ldrh	r3, [r3, #0]
    if ((net_exec_ctx[idx].report.n_inputs > AI_MNETWORK_IN_NUM) ||
 8002046:	2b01      	cmp	r3, #1
 8002048:	d909      	bls.n	800205e <aiTestPerformance+0x192>
    {
        printf("E: AI_MNETWORK_IN/OUT_NUM definition are incoherent\r\n");
 800204a:	4853      	ldr	r0, [pc, #332]	; (8002198 <aiTestPerformance+0x2cc>)
 800204c:	f00b fa5c 	bl	800d508 <puts>
        HAL_Delay(100);
 8002050:	2064      	movs	r0, #100	; 0x64
 8002052:	f001 ff65 	bl	8003f20 <HAL_Delay>
        return -1;
 8002056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800205a:	f000 bc03 	b.w	8002864 <aiTestPerformance+0x998>
    }

    /* Fill the input tensor descriptors */
    for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 800205e:	2300      	movs	r3, #0
 8002060:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002064:	e072      	b.n	800214c <aiTestPerformance+0x280>
        ai_input[i] = net_exec_ctx[idx].report.inputs[i];
 8002066:	4943      	ldr	r1, [pc, #268]	; (8002174 <aiTestPerformance+0x2a8>)
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	1a9b      	subs	r3, r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	440b      	add	r3, r1
 8002074:	3338      	adds	r3, #56	; 0x38
 8002076:	6819      	ldr	r1, [r3, #0]
 8002078:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800207c:	4613      	mov	r3, r2
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	4413      	add	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4419      	add	r1, r3
 8002086:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800208a:	4613      	mov	r3, r2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4413      	add	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002096:	4413      	add	r3, r2
 8002098:	3bbc      	subs	r3, #188	; 0xbc
 800209a:	461c      	mov	r4, r3
 800209c:	460d      	mov	r5, r1
 800209e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80020a6:	e884 0003 	stmia.w	r4, {r0, r1}
        ai_input[i].n_batches  = 1;
 80020aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80020ae:	4613      	mov	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	4413      	add	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80020ba:	4413      	add	r3, r2
 80020bc:	3bb8      	subs	r3, #184	; 0xb8
 80020be:	2201      	movs	r2, #1
 80020c0:	801a      	strh	r2, [r3, #0]
        if (net_exec_ctx[idx].report.inputs[i].data)
 80020c2:	492c      	ldr	r1, [pc, #176]	; (8002174 <aiTestPerformance+0x2a8>)
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	1a9b      	subs	r3, r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	440b      	add	r3, r1
 80020d0:	3338      	adds	r3, #56	; 0x38
 80020d2:	6819      	ldr	r1, [r3, #0]
 80020d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80020d8:	4613      	mov	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4413      	add	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	440b      	add	r3, r1
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01c      	beq.n	8002122 <aiTestPerformance+0x256>
            ai_input[i].data = AI_HANDLE_PTR(net_exec_ctx[idx].report.inputs[i].data);
 80020e8:	4922      	ldr	r1, [pc, #136]	; (8002174 <aiTestPerformance+0x2a8>)
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	1a9b      	subs	r3, r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	440b      	add	r3, r1
 80020f6:	3338      	adds	r3, #56	; 0x38
 80020f8:	6819      	ldr	r1, [r3, #0]
 80020fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80020fe:	4613      	mov	r3, r2
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4413      	add	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	440b      	add	r3, r1
 8002108:	6919      	ldr	r1, [r3, #16]
 800210a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800210e:	4613      	mov	r3, r2
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	4413      	add	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800211a:	4413      	add	r3, r2
 800211c:	3bac      	subs	r3, #172	; 0xac
 800211e:	6019      	str	r1, [r3, #0]
 8002120:	e00f      	b.n	8002142 <aiTestPerformance+0x276>
        else
            ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 8002122:	4a1e      	ldr	r2, [pc, #120]	; (800219c <aiTestPerformance+0x2d0>)
 8002124:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002128:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800212c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002130:	4613      	mov	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4413      	add	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800213c:	4413      	add	r3, r2
 800213e:	3bac      	subs	r3, #172	; 0xac
 8002140:	6019      	str	r1, [r3, #0]
    for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 8002142:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002146:	3301      	adds	r3, #1
 8002148:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800214c:	4909      	ldr	r1, [pc, #36]	; (8002174 <aiTestPerformance+0x2a8>)
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	440b      	add	r3, r1
 800215a:	3334      	adds	r3, #52	; 0x34
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002164:	4293      	cmp	r3, r2
 8002166:	f6ff af7e 	blt.w	8002066 <aiTestPerformance+0x19a>
    }

    /* Fill the output tensor descriptors */
    for (int i = 0; i < net_exec_ctx[idx].report.n_outputs; i++) {
 800216a:	2300      	movs	r3, #0
 800216c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002170:	e059      	b.n	8002226 <aiTestPerformance+0x35a>
 8002172:	bf00      	nop
 8002174:	240004e4 	.word	0x240004e4
 8002178:	0800e734 	.word	0x0800e734
 800217c:	24080000 	.word	0x24080000
 8002180:	240005a0 	.word	0x240005a0
 8002184:	24000008 	.word	0x24000008
 8002188:	0800e750 	.word	0x0800e750
 800218c:	0800e794 	.word	0x0800e794
 8002190:	0800e7d4 	.word	0x0800e7d4
 8002194:	240004c8 	.word	0x240004c8
 8002198:	0800e7fc 	.word	0x0800e7fc
 800219c:	24000000 	.word	0x24000000
        ai_output[i] = net_exec_ctx[idx].report.outputs[i];
 80021a0:	499c      	ldr	r1, [pc, #624]	; (8002414 <aiTestPerformance+0x548>)
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	011b      	lsls	r3, r3, #4
 80021a8:	1a9b      	subs	r3, r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	440b      	add	r3, r1
 80021ae:	333c      	adds	r3, #60	; 0x3c
 80021b0:	6819      	ldr	r1, [r3, #0]
 80021b2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80021b6:	4613      	mov	r3, r2
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	4413      	add	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4419      	add	r1, r3
 80021c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80021d0:	4413      	add	r3, r2
 80021d2:	3bd4      	subs	r3, #212	; 0xd4
 80021d4:	461c      	mov	r4, r3
 80021d6:	460d      	mov	r5, r1
 80021d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80021e0:	e884 0003 	stmia.w	r4, {r0, r1}
        ai_output[i].n_batches = 1;
 80021e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80021e8:	4613      	mov	r3, r2
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4413      	add	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80021f4:	4413      	add	r3, r2
 80021f6:	3bd0      	subs	r3, #208	; 0xd0
 80021f8:	2201      	movs	r2, #1
 80021fa:	801a      	strh	r2, [r3, #0]
        ai_output[i].data = AI_HANDLE_PTR(data_outs[i]);
 80021fc:	4a86      	ldr	r2, [pc, #536]	; (8002418 <aiTestPerformance+0x54c>)
 80021fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002202:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002206:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800220a:	4613      	mov	r3, r2
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	4413      	add	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002216:	4413      	add	r3, r2
 8002218:	3bc4      	subs	r3, #196	; 0xc4
 800221a:	6019      	str	r1, [r3, #0]
    for (int i = 0; i < net_exec_ctx[idx].report.n_outputs; i++) {
 800221c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002220:	3301      	adds	r3, #1
 8002222:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002226:	497b      	ldr	r1, [pc, #492]	; (8002414 <aiTestPerformance+0x548>)
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	1a9b      	subs	r3, r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	440b      	add	r3, r1
 8002234:	3336      	adds	r3, #54	; 0x36
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800223e:	4293      	cmp	r3, r2
 8002240:	dbae      	blt.n	80021a0 <aiTestPerformance+0x2d4>
    }

    if (profiling_mode) {
 8002242:	4b76      	ldr	r3, [pc, #472]	; (800241c <aiTestPerformance+0x550>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00b      	beq.n	8002262 <aiTestPerformance+0x396>
        printf("Profiling mode (%d)...\r\n", profiling_factor);
 800224a:	4b75      	ldr	r3, [pc, #468]	; (8002420 <aiTestPerformance+0x554>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4619      	mov	r1, r3
 8002250:	4874      	ldr	r0, [pc, #464]	; (8002424 <aiTestPerformance+0x558>)
 8002252:	f00b f8d1 	bl	800d3f8 <iprintf>
        fflush(stdout);
 8002256:	4b74      	ldr	r3, [pc, #464]	; (8002428 <aiTestPerformance+0x55c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4618      	mov	r0, r3
 800225e:	f00a feff 	bl	800d060 <fflush>
    }

#if defined(USE_OBSERVER) && USE_OBSERVER == 1
    /* Enable observer */
    aiObserverInit(&net_exec_ctx[idx]);
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	011b      	lsls	r3, r3, #4
 8002268:	1a9b      	subs	r3, r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4a69      	ldr	r2, [pc, #420]	; (8002414 <aiTestPerformance+0x548>)
 800226e:	4413      	add	r3, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fc6f 	bl	8001b54 <aiObserverInit>
#endif

    /* Main inference loop */
    for (iter = 0; iter < niter; iter++) {
 8002276:	2300      	movs	r3, #0
 8002278:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800227c:	e12c      	b.n	80024d8 <aiTestPerformance+0x60c>

        /* Fill input tensors with random data */
        for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 800227e:	2300      	movs	r3, #0
 8002280:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002284:	e083      	b.n	800238e <aiTestPerformance+0x4c2>
            const ai_buffer_format fmt = AI_BUFFER_FORMAT(&ai_input[i]);
 8002286:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800228a:	4613      	mov	r3, r2
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4413      	add	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002296:	4413      	add	r3, r2
 8002298:	3bbc      	subs	r3, #188	; 0xbc
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80022a0:	66fb      	str	r3, [r7, #108]	; 0x6c
            ai_i8 *in_data = (ai_i8 *)ai_input[i].data;
 80022a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80022a6:	4613      	mov	r3, r2
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	4413      	add	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80022b2:	4413      	add	r3, r2
 80022b4:	3bac      	subs	r3, #172	; 0xac
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	66bb      	str	r3, [r7, #104]	; 0x68
            for (ai_size j = 0; j < AI_BUFFER_SIZE(&ai_input[i]); ++j) {
 80022ba:	2300      	movs	r3, #0
 80022bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80022c0:	e035      	b.n	800232e <aiTestPerformance+0x462>
                /* uniform distribution between -1.0 and 1.0 */
                const float v = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 80022c2:	f00b f94d 	bl	800d560 <rand>
 80022c6:	ee07 0a90 	vmov	s15, r0
 80022ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ce:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80022d2:	eddf 6a56 	vldr	s13, [pc, #344]	; 800242c <aiTestPerformance+0x560>
 80022d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022e2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
                if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 80022e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e8:	145b      	asrs	r3, r3, #17
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d107      	bne.n	8002302 <aiTestPerformance+0x436>
                    *(ai_float *)(in_data + j * 4) = v;
 80022f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80022fa:	4413      	add	r3, r2
 80022fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	e010      	b.n	8002324 <aiTestPerformance+0x458>
                }
                else {
                    in_data[j] = (ai_i8)(v * 127);
 8002302:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002306:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002430 <aiTestPerformance+0x564>
 800230a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800230e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002310:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002314:	4413      	add	r3, r2
 8002316:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800231a:	edc7 7a00 	vstr	s15, [r7]
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	b252      	sxtb	r2, r2
 8002322:	701a      	strb	r2, [r3, #0]
            for (ai_size j = 0; j < AI_BUFFER_SIZE(&ai_input[i]); ++j) {
 8002324:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002328:	3301      	adds	r3, #1
 800232a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800232e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002332:	4613      	mov	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	4413      	add	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800233e:	4413      	add	r3, r2
 8002340:	3bb4      	subs	r3, #180	; 0xb4
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	4619      	mov	r1, r3
 8002346:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800234a:	4613      	mov	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4413      	add	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002356:	4413      	add	r3, r2
 8002358:	3bb6      	subs	r3, #182	; 0xb6
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	fb03 f301 	mul.w	r3, r3, r1
 8002360:	4619      	mov	r1, r3
 8002362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002366:	4613      	mov	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4413      	add	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002372:	4413      	add	r3, r2
 8002374:	3bb0      	subs	r3, #176	; 0xb0
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	fb03 f301 	mul.w	r3, r3, r1
 800237c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002380:	429a      	cmp	r2, r3
 8002382:	d39e      	bcc.n	80022c2 <aiTestPerformance+0x3f6>
        for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 8002384:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002388:	3301      	adds	r3, #1
 800238a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800238e:	4921      	ldr	r1, [pc, #132]	; (8002414 <aiTestPerformance+0x548>)
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	1a9b      	subs	r3, r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	440b      	add	r3, r1
 800239c:	3334      	adds	r3, #52	; 0x34
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	461a      	mov	r2, r3
 80023a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023a6:	4293      	cmp	r3, r2
 80023a8:	f6ff af6d 	blt.w	8002286 <aiTestPerformance+0x3ba>
            }
        }

#if _APP_HEAP_MONITOR_ == 1
        /* force a call of wrap functions */
        free(malloc(10));
 80023ac:	200a      	movs	r0, #10
 80023ae:	f00a ff57 	bl	800d260 <malloc>
 80023b2:	4603      	mov	r3, r0
 80023b4:	4618      	mov	r0, r3
 80023b6:	f00a ff5b 	bl	800d270 <free>
        ia_malloc.cfg |= 1UL;
 80023ba:	4b1e      	ldr	r3, [pc, #120]	; (8002434 <aiTestPerformance+0x568>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	4a1c      	ldr	r2, [pc, #112]	; (8002434 <aiTestPerformance+0x568>)
 80023c4:	6013      	str	r3, [r2, #0]
#endif

        cyclesCounterStart();
 80023c6:	f7fe fb07 	bl	80009d8 <cyclesCounterStart>
        batch = ai_mnetwork_run(net_exec_ctx[idx].handle, ai_input, ai_output);
 80023ca:	4912      	ldr	r1, [pc, #72]	; (8002414 <aiTestPerformance+0x548>)
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	440b      	add	r3, r1
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f107 020c 	add.w	r2, r7, #12
 80023de:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 fd8e 	bl	8002f04 <ai_mnetwork_run>
 80023e8:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (batch != 1) {
 80023ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d025      	beq.n	800243c <aiTestPerformance+0x570>
            aiLogErr(ai_mnetwork_get_error(net_exec_ctx[idx].handle),
 80023f0:	4908      	ldr	r1, [pc, #32]	; (8002414 <aiTestPerformance+0x548>)
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	440b      	add	r3, r1
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f000 fd0e 	bl	8002e22 <ai_mnetwork_get_error>
 8002406:	4603      	mov	r3, r0
 8002408:	490b      	ldr	r1, [pc, #44]	; (8002438 <aiTestPerformance+0x56c>)
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe fece 	bl	80011ac <aiLogErr>
                    "ai_mnetwork_run");
            break;
 8002410:	e069      	b.n	80024e6 <aiTestPerformance+0x61a>
 8002412:	bf00      	nop
 8002414:	240004e4 	.word	0x240004e4
 8002418:	24000004 	.word	0x24000004
 800241c:	240005a0 	.word	0x240005a0
 8002420:	24000008 	.word	0x24000008
 8002424:	0800e834 	.word	0x0800e834
 8002428:	24000378 	.word	0x24000378
 800242c:	4f000000 	.word	0x4f000000
 8002430:	42fe0000 	.word	0x42fe0000
 8002434:	240004c8 	.word	0x240004c8
 8002438:	0800e850 	.word	0x0800e850
        }
        tend = cyclesCounterEnd();
 800243c:	f7fe fade 	bl	80009fc <cyclesCounterEnd>
 8002440:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70

#if _APP_HEAP_MONITOR_ == 1
        ia_malloc.cfg &= ~1UL;
 8002444:	4b5f      	ldr	r3, [pc, #380]	; (80025c4 <aiTestPerformance+0x6f8>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	4a5d      	ldr	r2, [pc, #372]	; (80025c4 <aiTestPerformance+0x6f8>)
 800244e:	6013      	str	r3, [r2, #0]
#endif

        if (tend < tmin)
 8002450:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8002454:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002458:	42a2      	cmp	r2, r4
 800245a:	bf08      	it	eq
 800245c:	4299      	cmpeq	r1, r3
 800245e:	d203      	bcs.n	8002468 <aiTestPerformance+0x59c>
            tmin = tend;
 8002460:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8002464:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8

        if (tend > tmax)
 8002468:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800246c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002470:	42a2      	cmp	r2, r4
 8002472:	bf08      	it	eq
 8002474:	4299      	cmpeq	r1, r3
 8002476:	d203      	bcs.n	8002480 <aiTestPerformance+0x5b4>
            tmax = tend;
 8002478:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800247c:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0

        tcumul += tend;
 8002480:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002484:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8002488:	185d      	adds	r5, r3, r1
 800248a:	eb44 0602 	adc.w	r6, r4, r2
 800248e:	e9c7 5634 	strd	r5, r6, [r7, #208]	; 0xd0

        dwtCyclesToTime(tend, &t);
 8002492:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002496:	461a      	mov	r2, r3
 8002498:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800249c:	f7fe fb1b 	bl	8000ad6 <dwtCyclesToTime>

#if ENABLE_DEBUG == 1
        printf(" #%02d %8d.%03dms (%lu cycles)\r\n", iter,
                t.ms, t.us, tend);
#else
        if (!profiling_mode) {
 80024a0:	4b49      	ldr	r3, [pc, #292]	; (80025c8 <aiTestPerformance+0x6fc>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	f083 0301 	eor.w	r3, r3, #1
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00f      	beq.n	80024ce <aiTestPerformance+0x602>
            if (t.s > 10)
 80024ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024b0:	2b0a      	cmp	r3, #10
 80024b2:	dd03      	ble.n	80024bc <aiTestPerformance+0x5f0>
                niter = iter;
 80024b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            printf(".");
 80024bc:	202e      	movs	r0, #46	; 0x2e
 80024be:	f00a ffb3 	bl	800d428 <putchar>
            fflush(stdout);
 80024c2:	4b42      	ldr	r3, [pc, #264]	; (80025cc <aiTestPerformance+0x700>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f00a fdc9 	bl	800d060 <fflush>
    for (iter = 0; iter < niter; iter++) {
 80024ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024d2:	3301      	adds	r3, #1
 80024d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80024d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80024dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024e0:	429a      	cmp	r2, r3
 80024e2:	f6ff aecc 	blt.w	800227e <aiTestPerformance+0x3b2>
        }
#endif
    }

#if ENABLE_DEBUG != 1
    printf("\r\n");
 80024e6:	483a      	ldr	r0, [pc, #232]	; (80025d0 <aiTestPerformance+0x704>)
 80024e8:	f00b f80e 	bl	800d508 <puts>
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 80024ec:	f3ef 8308 	mrs	r3, MSP
 80024f0:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
 80024f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
#endif

#if _APP_STACK_MONITOR_ == 1
    if (__get_MSP() != cstack) {
 80024f4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d009      	beq.n	8002510 <aiTestPerformance+0x644>
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 80024fc:	f3ef 8308 	mrs	r3, MSP
 8002500:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8002502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
        printf("E: !current stack address is not coherent 0x%08lx instead 0x%08lx\r\n",
 8002504:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002508:	4619      	mov	r1, r3
 800250a:	4832      	ldr	r0, [pc, #200]	; (80025d4 <aiTestPerformance+0x708>)
 800250c:	f00a ff74 	bl	800d3f8 <iprintf>
                __get_MSP(), cstack);
    }

    /* Calculating the used stack */
    susage = 0UL;
 8002510:	2300      	movs	r3, #0
 8002512:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (stack_mon) {
 8002516:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800251a:	2b00      	cmp	r3, #0
 800251c:	d063      	beq.n	80025e6 <aiTestPerformance+0x71a>
        uint32_t rstack = mstack_size - ustack_size;
 800251e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002522:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	663b      	str	r3, [r7, #96]	; 0x60
        uint32_t *pr =  (uint32_t*)((bstack + 3) & (~3));
 800252a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800252e:	3303      	adds	r3, #3
 8002530:	f023 0303 	bic.w	r3, r3, #3
 8002534:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        bool overflow = false;
 8002538:	2300      	movs	r3, #0
 800253a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

        /* check potential stack overflow with 8 last words*/
        for (int i = 0; i < 8; i++) {
 800253e:	2300      	movs	r3, #0
 8002540:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002544:	e012      	b.n	800256c <aiTestPerformance+0x6a0>
            if (*pr != 0xDEDEDEDE)
 8002546:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f1b3 3fde 	cmp.w	r3, #3739147998	; 0xdededede
 8002550:	d002      	beq.n	8002558 <aiTestPerformance+0x68c>
                overflow = true;
 8002552:	2301      	movs	r3, #1
 8002554:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
            pr++;
 8002558:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800255c:	3304      	adds	r3, #4
 800255e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        for (int i = 0; i < 8; i++) {
 8002562:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002566:	3301      	adds	r3, #1
 8002568:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800256c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002570:	2b07      	cmp	r3, #7
 8002572:	dde8      	ble.n	8002546 <aiTestPerformance+0x67a>
        }

        if (!overflow) {
 8002574:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002578:	f083 0301 	eor.w	r3, r3, #1
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d02a      	beq.n	80025d8 <aiTestPerformance+0x70c>
            susage = 8*4;
 8002582:	2320      	movs	r3, #32
 8002584:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            while ((*pr == 0xDEDEDEDE) && ((uint32_t)pr < cstack)) {
 8002588:	e009      	b.n	800259e <aiTestPerformance+0x6d2>
                pr++;
 800258a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800258e:	3304      	adds	r3, #4
 8002590:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                susage += 4;
 8002594:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002598:	3304      	adds	r3, #4
 800259a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            while ((*pr == 0xDEDEDEDE) && ((uint32_t)pr < cstack)) {
 800259e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f1b3 3fde 	cmp.w	r3, #3739147998	; 0xdededede
 80025a8:	d105      	bne.n	80025b6 <aiTestPerformance+0x6ea>
 80025aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025ae:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d8e9      	bhi.n	800258a <aiTestPerformance+0x6be>
            }
            susage = rstack - susage;
 80025b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80025c2:	e010      	b.n	80025e6 <aiTestPerformance+0x71a>
 80025c4:	240004c8 	.word	0x240004c8
 80025c8:	240005a0 	.word	0x240005a0
 80025cc:	24000378 	.word	0x24000378
 80025d0:	0800e860 	.word	0x0800e860
 80025d4:	0800e864 	.word	0x0800e864
        } else {
            printf("E: !stack overflow detected > %ld\r\n", rstack);
 80025d8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80025da:	48a5      	ldr	r0, [pc, #660]	; (8002870 <aiTestPerformance+0x9a4>)
 80025dc:	f00a ff0c 	bl	800d3f8 <iprintf>
            printf("note: MIN_STACK_SIZE value/definition should be verified (app_x-cube-ai.h & linker file)");
 80025e0:	48a4      	ldr	r0, [pc, #656]	; (8002874 <aiTestPerformance+0x9a8>)
 80025e2:	f00a ff09 	bl	800d3f8 <iprintf>

#if _APP_FIX_CLK_OVERFLOW == 0
    restoreInts(irqs);
#endif

    printf("\r\n");
 80025e6:	48a4      	ldr	r0, [pc, #656]	; (8002878 <aiTestPerformance+0x9ac>)
 80025e8:	f00a ff8e 	bl	800d508 <puts>

#if defined(USE_OBSERVER) && USE_OBSERVER == 1
    tmin = tmin - u_observer_ctx.u_dur_t / (uint64_t)iter;
 80025ec:	4ba3      	ldr	r3, [pc, #652]	; (800287c <aiTestPerformance+0x9b0>)
 80025ee:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80025f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025f6:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80025fa:	461a      	mov	r2, r3
 80025fc:	4623      	mov	r3, r4
 80025fe:	f7fd ffd5 	bl	80005ac <__aeabi_uldivmod>
 8002602:	4603      	mov	r3, r0
 8002604:	460c      	mov	r4, r1
 8002606:	4619      	mov	r1, r3
 8002608:	4622      	mov	r2, r4
 800260a:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800260e:	1a5b      	subs	r3, r3, r1
 8002610:	eb64 0402 	sbc.w	r4, r4, r2
 8002614:	461d      	mov	r5, r3
 8002616:	4626      	mov	r6, r4
 8002618:	e9c7 5632 	strd	r5, r6, [r7, #200]	; 0xc8
    tmax = tmax - u_observer_ctx.u_dur_t / (uint64_t)iter;
 800261c:	4b97      	ldr	r3, [pc, #604]	; (800287c <aiTestPerformance+0x9b0>)
 800261e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002626:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800262a:	461a      	mov	r2, r3
 800262c:	4623      	mov	r3, r4
 800262e:	f7fd ffbd 	bl	80005ac <__aeabi_uldivmod>
 8002632:	4603      	mov	r3, r0
 8002634:	460c      	mov	r4, r1
 8002636:	4619      	mov	r1, r3
 8002638:	4622      	mov	r2, r4
 800263a:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800263e:	1a5b      	subs	r3, r3, r1
 8002640:	eb64 0402 	sbc.w	r4, r4, r2
 8002644:	461d      	mov	r5, r3
 8002646:	4626      	mov	r6, r4
 8002648:	e9c7 5630 	strd	r5, r6, [r7, #192]	; 0xc0
    tcumul -= u_observer_ctx.u_dur_t;
 800264c:	4b8b      	ldr	r3, [pc, #556]	; (800287c <aiTestPerformance+0x9b0>)
 800264e:	e9d3 5604 	ldrd	r5, r6, [r3, #16]
 8002652:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002656:	460b      	mov	r3, r1
 8002658:	4614      	mov	r4, r2
 800265a:	1b5b      	subs	r3, r3, r5
 800265c:	eb64 0406 	sbc.w	r4, r4, r6
 8002660:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
#endif

    tcumul /= (uint64_t)iter;
 8002664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002668:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800266c:	461a      	mov	r2, r3
 800266e:	4623      	mov	r3, r4
 8002670:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002674:	f7fd ff9a 	bl	80005ac <__aeabi_uldivmod>
 8002678:	4603      	mov	r3, r0
 800267a:	460c      	mov	r4, r1
 800267c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0

    dwtCyclesToTime(tcumul, &t);
 8002680:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002684:	461a      	mov	r2, r3
 8002686:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800268a:	f7fe fa24 	bl	8000ad6 <dwtCyclesToTime>

    printf("Results for \"%s\", %d inferences @%ldMHz/%ldMHz (complexity: %lu MACC)\r\n",
 800268e:	497c      	ldr	r1, [pc, #496]	; (8002880 <aiTestPerformance+0x9b4>)
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	1a9b      	subs	r3, r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	440b      	add	r3, r1
 800269c:	3304      	adds	r3, #4
 800269e:	681c      	ldr	r4, [r3, #0]
            net_exec_ctx[idx].report.model_name, iter,
            HAL_RCC_GetSysClockFreq() / 1000000,
 80026a0:	f003 fb66 	bl	8005d70 <HAL_RCC_GetSysClockFreq>
 80026a4:	4602      	mov	r2, r0
    printf("Results for \"%s\", %d inferences @%ldMHz/%ldMHz (complexity: %lu MACC)\r\n",
 80026a6:	4b77      	ldr	r3, [pc, #476]	; (8002884 <aiTestPerformance+0x9b8>)
 80026a8:	fba3 2302 	umull	r2, r3, r3, r2
 80026ac:	0c9d      	lsrs	r5, r3, #18
            HAL_RCC_GetHCLKFreq() / 1000000,
 80026ae:	f003 fcd1 	bl	8006054 <HAL_RCC_GetHCLKFreq>
 80026b2:	4602      	mov	r2, r0
    printf("Results for \"%s\", %d inferences @%ldMHz/%ldMHz (complexity: %lu MACC)\r\n",
 80026b4:	4b73      	ldr	r3, [pc, #460]	; (8002884 <aiTestPerformance+0x9b8>)
 80026b6:	fba3 2302 	umull	r2, r3, r3, r2
 80026ba:	0c99      	lsrs	r1, r3, #18
 80026bc:	4870      	ldr	r0, [pc, #448]	; (8002880 <aiTestPerformance+0x9b4>)
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	1a9b      	subs	r3, r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4403      	add	r3, r0
 80026ca:	3330      	adds	r3, #48	; 0x30
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	9301      	str	r3, [sp, #4]
 80026d0:	9100      	str	r1, [sp, #0]
 80026d2:	462b      	mov	r3, r5
 80026d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80026d8:	4621      	mov	r1, r4
 80026da:	486b      	ldr	r0, [pc, #428]	; (8002888 <aiTestPerformance+0x9bc>)
 80026dc:	f00a fe8c 	bl	800d3f8 <iprintf>
            net_exec_ctx[idx].report.n_macc);

    printf(" duration     : %d.%03d ms (average)\r\n", t.s * 1000 + t.ms, t.us);
 80026e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026e6:	fb02 f203 	mul.w	r2, r2, r3
 80026ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ec:	4413      	add	r3, r2
 80026ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026f0:	4619      	mov	r1, r3
 80026f2:	4866      	ldr	r0, [pc, #408]	; (800288c <aiTestPerformance+0x9c0>)
 80026f4:	f00a fe80 	bl	800d3f8 <iprintf>
    printf(" CPU cycles   : %lu -%lu/+%lu (average,-/+)\r\n",
 80026f8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80026fc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002700:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002704:	1ad0      	subs	r0, r2, r3
 8002706:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800270a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	4602      	mov	r2, r0
 8002712:	485f      	ldr	r0, [pc, #380]	; (8002890 <aiTestPerformance+0x9c4>)
 8002714:	f00a fe70 	bl	800d3f8 <iprintf>
            (uint32_t)(tcumul), (uint32_t)(tcumul - tmin),
            (uint32_t)(tmax - tcumul));
    printf(" CPU Workload : %d%c (duty cycle = 1s)\r\n", (int)((tcumul * 100) / t.fcpu), '%');
 8002718:	e9d7 5634 	ldrd	r5, r6, [r7, #208]	; 0xd0
 800271c:	46ab      	mov	fp, r5
 800271e:	46b4      	mov	ip, r6
 8002720:	eb1b 030b 	adds.w	r3, fp, fp
 8002724:	eb4c 040c 	adc.w	r4, ip, ip
 8002728:	469b      	mov	fp, r3
 800272a:	46a4      	mov	ip, r4
 800272c:	eb1b 0b05 	adds.w	fp, fp, r5
 8002730:	eb4c 0c06 	adc.w	ip, ip, r6
 8002734:	f04f 0100 	mov.w	r1, #0
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	ea4f 124c 	mov.w	r2, ip, lsl #5
 8002740:	ea42 62db 	orr.w	r2, r2, fp, lsr #27
 8002744:	ea4f 114b 	mov.w	r1, fp, lsl #5
 8002748:	eb1b 0b01 	adds.w	fp, fp, r1
 800274c:	eb4c 0c02 	adc.w	ip, ip, r2
 8002750:	eb1b 0005 	adds.w	r0, fp, r5
 8002754:	eb4c 0106 	adc.w	r1, ip, r6
 8002758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800275a:	f04f 0400 	mov.w	r4, #0
 800275e:	461a      	mov	r2, r3
 8002760:	4623      	mov	r3, r4
 8002762:	f7fd ff23 	bl	80005ac <__aeabi_uldivmod>
 8002766:	4603      	mov	r3, r0
 8002768:	460c      	mov	r4, r1
 800276a:	2225      	movs	r2, #37	; 0x25
 800276c:	4619      	mov	r1, r3
 800276e:	4849      	ldr	r0, [pc, #292]	; (8002894 <aiTestPerformance+0x9c8>)
 8002770:	f00a fe42 	bl	800d3f8 <iprintf>
    cmacc = (uint32_t)((tcumul * 100)/ net_exec_ctx[idx].report.n_macc);
 8002774:	e9d7 5634 	ldrd	r5, r6, [r7, #208]	; 0xd0
 8002778:	46ab      	mov	fp, r5
 800277a:	46b4      	mov	ip, r6
 800277c:	eb1b 030b 	adds.w	r3, fp, fp
 8002780:	eb4c 040c 	adc.w	r4, ip, ip
 8002784:	469b      	mov	fp, r3
 8002786:	46a4      	mov	ip, r4
 8002788:	eb1b 0b05 	adds.w	fp, fp, r5
 800278c:	eb4c 0c06 	adc.w	ip, ip, r6
 8002790:	f04f 0100 	mov.w	r1, #0
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	ea4f 124c 	mov.w	r2, ip, lsl #5
 800279c:	ea42 62db 	orr.w	r2, r2, fp, lsr #27
 80027a0:	ea4f 114b 	mov.w	r1, fp, lsl #5
 80027a4:	eb1b 0b01 	adds.w	fp, fp, r1
 80027a8:	eb4c 0c02 	adc.w	ip, ip, r2
 80027ac:	eb1b 0005 	adds.w	r0, fp, r5
 80027b0:	eb4c 0106 	adc.w	r1, ip, r6
 80027b4:	4c32      	ldr	r4, [pc, #200]	; (8002880 <aiTestPerformance+0x9b4>)
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	4613      	mov	r3, r2
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	1a9b      	subs	r3, r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4423      	add	r3, r4
 80027c2:	3330      	adds	r3, #48	; 0x30
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f04f 0400 	mov.w	r4, #0
 80027ca:	461a      	mov	r2, r3
 80027cc:	4623      	mov	r3, r4
 80027ce:	f7fd feed 	bl	80005ac <__aeabi_uldivmod>
 80027d2:	4603      	mov	r3, r0
 80027d4:	460c      	mov	r4, r1
 80027d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    printf(" cycles/MACC  : %lu.%02lu (average for all layers)\r\n",
 80027d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027da:	4a2f      	ldr	r2, [pc, #188]	; (8002898 <aiTestPerformance+0x9cc>)
 80027dc:	fba2 2303 	umull	r2, r3, r2, r3
 80027e0:	0958      	lsrs	r0, r3, #5
 80027e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80027e4:	4b2c      	ldr	r3, [pc, #176]	; (8002898 <aiTestPerformance+0x9cc>)
 80027e6:	fba3 1302 	umull	r1, r3, r3, r2
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	2164      	movs	r1, #100	; 0x64
 80027ee:	fb01 f303 	mul.w	r3, r1, r3
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	461a      	mov	r2, r3
 80027f6:	4601      	mov	r1, r0
 80027f8:	4828      	ldr	r0, [pc, #160]	; (800289c <aiTestPerformance+0x9d0>)
 80027fa:	f00a fdfd 	bl	800d3f8 <iprintf>
            cmacc / 100, cmacc - ((cmacc / 100) * 100));
#if _APP_STACK_MONITOR_ == 1
    if (stack_mon)
 80027fe:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8002802:	2b00      	cmp	r3, #0
 8002804:	d005      	beq.n	8002812 <aiTestPerformance+0x946>
        printf(" used stack   : %ld bytes\r\n", susage);
 8002806:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800280a:	4825      	ldr	r0, [pc, #148]	; (80028a0 <aiTestPerformance+0x9d4>)
 800280c:	f00a fdf4 	bl	800d3f8 <iprintf>
 8002810:	e002      	b.n	8002818 <aiTestPerformance+0x94c>
    else
        printf(" used stack   : NOT CALCULATED\r\n");
 8002812:	4824      	ldr	r0, [pc, #144]	; (80028a4 <aiTestPerformance+0x9d8>)
 8002814:	f00a fe78 	bl	800d508 <puts>
#else
    printf(" used stack   : DISABLED\r\n");
#endif
#if _APP_HEAP_MONITOR_ == 1
    printf(" used heap    : %ld:%ld %ld:%ld (req:allocated,req:released) max=%ld used=%ld cfg=%ld\r\n",
 8002818:	4b23      	ldr	r3, [pc, #140]	; (80028a8 <aiTestPerformance+0x9dc>)
 800281a:	68dc      	ldr	r4, [r3, #12]
 800281c:	4b22      	ldr	r3, [pc, #136]	; (80028a8 <aiTestPerformance+0x9dc>)
 800281e:	685d      	ldr	r5, [r3, #4]
 8002820:	4b21      	ldr	r3, [pc, #132]	; (80028a8 <aiTestPerformance+0x9dc>)
 8002822:	691e      	ldr	r6, [r3, #16]
 8002824:	4b20      	ldr	r3, [pc, #128]	; (80028a8 <aiTestPerformance+0x9dc>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4a1f      	ldr	r2, [pc, #124]	; (80028a8 <aiTestPerformance+0x9dc>)
 800282a:	6952      	ldr	r2, [r2, #20]
 800282c:	491e      	ldr	r1, [pc, #120]	; (80028a8 <aiTestPerformance+0x9dc>)
 800282e:	6989      	ldr	r1, [r1, #24]
            ia_malloc.alloc_req, ia_malloc.alloc,
            ia_malloc.free_req, ia_malloc.free, ia_malloc.max, ia_malloc.used,
            (ia_malloc.cfg & (3 << 1)) >> 1);
 8002830:	481d      	ldr	r0, [pc, #116]	; (80028a8 <aiTestPerformance+0x9dc>)
 8002832:	6800      	ldr	r0, [r0, #0]
 8002834:	0840      	lsrs	r0, r0, #1
    printf(" used heap    : %ld:%ld %ld:%ld (req:allocated,req:released) max=%ld used=%ld cfg=%ld\r\n",
 8002836:	f000 0003 	and.w	r0, r0, #3
 800283a:	9003      	str	r0, [sp, #12]
 800283c:	9102      	str	r1, [sp, #8]
 800283e:	9201      	str	r2, [sp, #4]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	4633      	mov	r3, r6
 8002844:	462a      	mov	r2, r5
 8002846:	4621      	mov	r1, r4
 8002848:	4818      	ldr	r0, [pc, #96]	; (80028ac <aiTestPerformance+0x9e0>)
 800284a:	f00a fdd5 	bl	800d3f8 <iprintf>
#else
    printf(" used heap    : DISABLED or NOT YET SUPPORTED\r\n");
#endif

#if defined(USE_OBSERVER) && USE_OBSERVER == 1
    aiObserverDone(&net_exec_ctx[idx]);
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	1a9b      	subs	r3, r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4a09      	ldr	r2, [pc, #36]	; (8002880 <aiTestPerformance+0x9b4>)
 800285a:	4413      	add	r3, r2
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff f9e3 	bl	8001c28 <aiObserverDone>
#endif

    return 0;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	37e0      	adds	r7, #224	; 0xe0
 8002868:	46bd      	mov	sp, r7
 800286a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800286e:	bf00      	nop
 8002870:	0800e8a8 	.word	0x0800e8a8
 8002874:	0800e8cc 	.word	0x0800e8cc
 8002878:	0800e860 	.word	0x0800e860
 800287c:	24000578 	.word	0x24000578
 8002880:	240004e4 	.word	0x240004e4
 8002884:	431bde83 	.word	0x431bde83
 8002888:	0800e928 	.word	0x0800e928
 800288c:	0800e970 	.word	0x0800e970
 8002890:	0800e998 	.word	0x0800e998
 8002894:	0800e9c8 	.word	0x0800e9c8
 8002898:	51eb851f 	.word	0x51eb851f
 800289c:	0800e9f4 	.word	0x0800e9f4
 80028a0:	0800ea2c 	.word	0x0800ea2c
 80028a4:	0800ea48 	.word	0x0800ea48
 80028a8:	240004c8 	.word	0x240004c8
 80028ac:	0800ea68 	.word	0x0800ea68

080028b0 <aiTestConsole>:
#define CONS_EVT_HIDE       (6)

#define CONS_EVT_UNDEFINED  (100)

static int aiTestConsole(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
    uint8_t c = 0;
 80028b6:	2300      	movs	r3, #0
 80028b8:	71fb      	strb	r3, [r7, #7]

    if (ioGetUint8(&c, 1, 5000) == -1) /* Timeout */
 80028ba:	1dfb      	adds	r3, r7, #7
 80028bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c0:	2101      	movs	r1, #1
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fe fc1a 	bl	80010fc <ioGetUint8>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028ce:	d101      	bne.n	80028d4 <aiTestConsole+0x24>
        return CONS_EVT_TIMEOUT;
 80028d0:	2300      	movs	r3, #0
 80028d2:	e033      	b.n	800293c <aiTestConsole+0x8c>

    if ((c == 'q') || (c == 'Q'))
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	2b71      	cmp	r3, #113	; 0x71
 80028d8:	d002      	beq.n	80028e0 <aiTestConsole+0x30>
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	2b51      	cmp	r3, #81	; 0x51
 80028de:	d101      	bne.n	80028e4 <aiTestConsole+0x34>
        return CONS_EVT_QUIT;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e02b      	b.n	800293c <aiTestConsole+0x8c>

    if ((c == 'd') || (c == 'D'))
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	2b64      	cmp	r3, #100	; 0x64
 80028e8:	d002      	beq.n	80028f0 <aiTestConsole+0x40>
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	2b44      	cmp	r3, #68	; 0x44
 80028ee:	d101      	bne.n	80028f4 <aiTestConsole+0x44>
        return CONS_EVT_HIDE;
 80028f0:	2306      	movs	r3, #6
 80028f2:	e023      	b.n	800293c <aiTestConsole+0x8c>

    if ((c == 'r') || (c == 'R'))
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	2b72      	cmp	r3, #114	; 0x72
 80028f8:	d002      	beq.n	8002900 <aiTestConsole+0x50>
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	2b52      	cmp	r3, #82	; 0x52
 80028fe:	d101      	bne.n	8002904 <aiTestConsole+0x54>
        return CONS_EVT_RESTART;
 8002900:	2302      	movs	r3, #2
 8002902:	e01b      	b.n	800293c <aiTestConsole+0x8c>

    if ((c == 'h') || (c == 'H') || (c == '?'))
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	2b68      	cmp	r3, #104	; 0x68
 8002908:	d005      	beq.n	8002916 <aiTestConsole+0x66>
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	2b48      	cmp	r3, #72	; 0x48
 800290e:	d002      	beq.n	8002916 <aiTestConsole+0x66>
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	2b3f      	cmp	r3, #63	; 0x3f
 8002914:	d101      	bne.n	800291a <aiTestConsole+0x6a>
        return CONS_EVT_HELP;
 8002916:	2303      	movs	r3, #3
 8002918:	e010      	b.n	800293c <aiTestConsole+0x8c>

    if ((c == 'p') || (c == 'P'))
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	2b70      	cmp	r3, #112	; 0x70
 800291e:	d002      	beq.n	8002926 <aiTestConsole+0x76>
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	2b50      	cmp	r3, #80	; 0x50
 8002924:	d101      	bne.n	800292a <aiTestConsole+0x7a>
        return CONS_EVT_PAUSE;
 8002926:	2304      	movs	r3, #4
 8002928:	e008      	b.n	800293c <aiTestConsole+0x8c>

    if ((c == 'x') || (c == 'X'))
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	2b78      	cmp	r3, #120	; 0x78
 800292e:	d002      	beq.n	8002936 <aiTestConsole+0x86>
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	2b58      	cmp	r3, #88	; 0x58
 8002934:	d101      	bne.n	800293a <aiTestConsole+0x8a>
        return CONS_EVT_PROF;
 8002936:	2305      	movs	r3, #5
 8002938:	e000      	b.n	800293c <aiTestConsole+0x8c>

    return CONS_EVT_UNDEFINED;
 800293a:	2364      	movs	r3, #100	; 0x64
}
 800293c:	4618      	mov	r0, r3
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <aiSystemPerformanceInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiSystemPerformanceInit(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
    printf("\r\n#\r\n");
 8002948:	4810      	ldr	r0, [pc, #64]	; (800298c <aiSystemPerformanceInit+0x48>)
 800294a:	f00a fddd 	bl	800d508 <puts>
    printf("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_,
 800294e:	2300      	movs	r3, #0
 8002950:	2205      	movs	r2, #5
 8002952:	490f      	ldr	r1, [pc, #60]	; (8002990 <aiSystemPerformanceInit+0x4c>)
 8002954:	480f      	ldr	r0, [pc, #60]	; (8002994 <aiSystemPerformanceInit+0x50>)
 8002956:	f00a fd4f 	bl	800d3f8 <iprintf>
            _APP_VERSION_MINOR_ );
    printf("#\r\n");
 800295a:	480f      	ldr	r0, [pc, #60]	; (8002998 <aiSystemPerformanceInit+0x54>)
 800295c:	f00a fdd4 	bl	800d508 <puts>

#if defined(__GNUC__)
    printf("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8002960:	2301      	movs	r3, #1
 8002962:	2203      	movs	r2, #3
 8002964:	2107      	movs	r1, #7
 8002966:	480d      	ldr	r0, [pc, #52]	; (800299c <aiSystemPerformanceInit+0x58>)
 8002968:	f00a fd46 	bl	800d3f8 <iprintf>
    );
#elif defined (__CC_ARM)
    printf("Compiled with MDK-ARM Keil %d\r\n", __ARMCC_VERSION);
#endif

    crcIpInit();
 800296c:	f7fd ffc8 	bl	8000900 <crcIpInit>
    logDeviceConf();
 8002970:	f7fe fb0e 	bl	8000f90 <logDeviceConf>
    cyclesCounterInit();
 8002974:	f7fe f812 	bl	800099c <cyclesCounterInit>

    aiInit();
 8002978:	f7fe fff2 	bl	8001960 <aiInit>

    srand(3); /* deterministic outcome */
 800297c:	2003      	movs	r0, #3
 800297e:	f00a fdcb 	bl	800d518 <srand>

    dwtReset();
 8002982:	f7fd fff3 	bl	800096c <dwtReset>
    return 0;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	bd80      	pop	{r7, pc}
 800298c:	0800eac0 	.word	0x0800eac0
 8002990:	0800eac8 	.word	0x0800eac8
 8002994:	0800eaec 	.word	0x0800eaec
 8002998:	0800eafc 	.word	0x0800eafc
 800299c:	0800eb00 	.word	0x0800eb00

080029a0 <aiSystemPerformanceProcess>:

int aiSystemPerformanceProcess(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
    int r;
    int idx = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	603b      	str	r3, [r7, #0]

    do {
        r = aiTestPerformance(idx);
 80029aa:	6838      	ldr	r0, [r7, #0]
 80029ac:	f7ff fa8e 	bl	8001ecc <aiTestPerformance>
 80029b0:	6078      	str	r0, [r7, #4]
        idx = (idx+1) % AI_MNETWORK_NUMBER;
 80029b2:	2300      	movs	r3, #0
 80029b4:	603b      	str	r3, [r7, #0]

        if (!r) {
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f040 8092 	bne.w	8002ae2 <aiSystemPerformanceProcess+0x142>
            r = aiTestConsole();
 80029be:	f7ff ff77 	bl	80028b0 <aiTestConsole>
 80029c2:	6078      	str	r0, [r7, #4]

            if (r == CONS_EVT_UNDEFINED) {
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b64      	cmp	r3, #100	; 0x64
 80029c8:	d102      	bne.n	80029d0 <aiSystemPerformanceProcess+0x30>
                r = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	607b      	str	r3, [r7, #4]
 80029ce:	e030      	b.n	8002a32 <aiSystemPerformanceProcess+0x92>
            } else if (r == CONS_EVT_HELP) {
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b03      	cmp	r3, #3
 80029d4:	d12d      	bne.n	8002a32 <aiSystemPerformanceProcess+0x92>
                printf("\r\n");
 80029d6:	4847      	ldr	r0, [pc, #284]	; (8002af4 <aiSystemPerformanceProcess+0x154>)
 80029d8:	f00a fd96 	bl	800d508 <puts>
                printf("Possible key for the interactive console:\r\n");
 80029dc:	4846      	ldr	r0, [pc, #280]	; (8002af8 <aiSystemPerformanceProcess+0x158>)
 80029de:	f00a fd93 	bl	800d508 <puts>
                printf("  [q,Q]      quit the application\r\n");
 80029e2:	4846      	ldr	r0, [pc, #280]	; (8002afc <aiSystemPerformanceProcess+0x15c>)
 80029e4:	f00a fd90 	bl	800d508 <puts>
                printf("  [r,R]      re-start (NN de-init and re-init)\r\n");
 80029e8:	4845      	ldr	r0, [pc, #276]	; (8002b00 <aiSystemPerformanceProcess+0x160>)
 80029ea:	f00a fd8d 	bl	800d508 <puts>
                printf("  [p,P]      pause\r\n");
 80029ee:	4845      	ldr	r0, [pc, #276]	; (8002b04 <aiSystemPerformanceProcess+0x164>)
 80029f0:	f00a fd8a 	bl	800d508 <puts>
                printf("  [d,D]      hide detailed information ('r' to restore)\r\n");
 80029f4:	4844      	ldr	r0, [pc, #272]	; (8002b08 <aiSystemPerformanceProcess+0x168>)
 80029f6:	f00a fd87 	bl	800d508 <puts>
                printf("  [h,H,?]    this information\r\n");
 80029fa:	4844      	ldr	r0, [pc, #272]	; (8002b0c <aiSystemPerformanceProcess+0x16c>)
 80029fc:	f00a fd84 	bl	800d508 <puts>
                printf("   xx        continue immediately\r\n");
 8002a00:	4843      	ldr	r0, [pc, #268]	; (8002b10 <aiSystemPerformanceProcess+0x170>)
 8002a02:	f00a fd81 	bl	800d508 <puts>
                printf("\r\n");
 8002a06:	483b      	ldr	r0, [pc, #236]	; (8002af4 <aiSystemPerformanceProcess+0x154>)
 8002a08:	f00a fd7e 	bl	800d508 <puts>
                printf("Press any key to continue..\r\n");
 8002a0c:	4841      	ldr	r0, [pc, #260]	; (8002b14 <aiSystemPerformanceProcess+0x174>)
 8002a0e:	f00a fd7b 	bl	800d508 <puts>

                while ((r = aiTestConsole()) == CONS_EVT_TIMEOUT) {
 8002a12:	e003      	b.n	8002a1c <aiSystemPerformanceProcess+0x7c>
                    HAL_Delay(1000);
 8002a14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a18:	f001 fa82 	bl	8003f20 <HAL_Delay>
                while ((r = aiTestConsole()) == CONS_EVT_TIMEOUT) {
 8002a1c:	f7ff ff48 	bl	80028b0 <aiTestConsole>
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0f5      	beq.n	8002a14 <aiSystemPerformanceProcess+0x74>
                }
                if (r == CONS_EVT_UNDEFINED)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b64      	cmp	r3, #100	; 0x64
 8002a2c:	d101      	bne.n	8002a32 <aiSystemPerformanceProcess+0x92>
                    r = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	607b      	str	r3, [r7, #4]
            }
            if (r == CONS_EVT_PROF) {
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b05      	cmp	r3, #5
 8002a36:	d109      	bne.n	8002a4c <aiSystemPerformanceProcess+0xac>
                profiling_mode = true;
 8002a38:	4b37      	ldr	r3, [pc, #220]	; (8002b18 <aiSystemPerformanceProcess+0x178>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	701a      	strb	r2, [r3, #0]
                profiling_factor *= 2;
 8002a3e:	4b37      	ldr	r3, [pc, #220]	; (8002b1c <aiSystemPerformanceProcess+0x17c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	4a35      	ldr	r2, [pc, #212]	; (8002b1c <aiSystemPerformanceProcess+0x17c>)
 8002a46:	6013      	str	r3, [r2, #0]
                r = 0;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	607b      	str	r3, [r7, #4]
            }

            if (r == CONS_EVT_HIDE) {
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b06      	cmp	r3, #6
 8002a50:	d104      	bne.n	8002a5c <aiSystemPerformanceProcess+0xbc>
            	hidden_mode = true;
 8002a52:	4b33      	ldr	r3, [pc, #204]	; (8002b20 <aiSystemPerformanceProcess+0x180>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	701a      	strb	r2, [r3, #0]
            	r = 0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	607b      	str	r3, [r7, #4]
            }

            if (r == CONS_EVT_RESTART) {
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d111      	bne.n	8002a86 <aiSystemPerformanceProcess+0xe6>
                profiling_mode = false;
 8002a62:	4b2d      	ldr	r3, [pc, #180]	; (8002b18 <aiSystemPerformanceProcess+0x178>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
            	hidden_mode = false;
 8002a68:	4b2d      	ldr	r3, [pc, #180]	; (8002b20 <aiSystemPerformanceProcess+0x180>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	701a      	strb	r2, [r3, #0]
                profiling_factor = 5;
 8002a6e:	4b2b      	ldr	r3, [pc, #172]	; (8002b1c <aiSystemPerformanceProcess+0x17c>)
 8002a70:	2205      	movs	r2, #5
 8002a72:	601a      	str	r2, [r3, #0]
                printf("\r\n");
 8002a74:	481f      	ldr	r0, [pc, #124]	; (8002af4 <aiSystemPerformanceProcess+0x154>)
 8002a76:	f00a fd47 	bl	800d508 <puts>
                aiDeInit();
 8002a7a:	f7fe ffa1 	bl	80019c0 <aiDeInit>
                aiSystemPerformanceInit();
 8002a7e:	f7ff ff61 	bl	8002944 <aiSystemPerformanceInit>
                r = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	607b      	str	r3, [r7, #4]
            }
            if (r == CONS_EVT_QUIT) {
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d114      	bne.n	8002ab6 <aiSystemPerformanceProcess+0x116>
                profiling_mode = false;
 8002a8c:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <aiSystemPerformanceProcess+0x178>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	701a      	strb	r2, [r3, #0]
                printf("\r\n");
 8002a92:	4818      	ldr	r0, [pc, #96]	; (8002af4 <aiSystemPerformanceProcess+0x154>)
 8002a94:	f00a fd38 	bl	800d508 <puts>
                disableInts();
 8002a98:	f7fe fb20 	bl	80010dc <disableInts>
                aiDeInit();
 8002a9c:	f7fe ff90 	bl	80019c0 <aiDeInit>
                printf("\r\n");
 8002aa0:	4814      	ldr	r0, [pc, #80]	; (8002af4 <aiSystemPerformanceProcess+0x154>)
 8002aa2:	f00a fd31 	bl	800d508 <puts>
                printf("Board should be reseted...\r\n");
 8002aa6:	481f      	ldr	r0, [pc, #124]	; (8002b24 <aiSystemPerformanceProcess+0x184>)
 8002aa8:	f00a fd2e 	bl	800d508 <puts>
                while (1) {
                    HAL_Delay(1000);
 8002aac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ab0:	f001 fa36 	bl	8003f20 <HAL_Delay>
 8002ab4:	e7fa      	b.n	8002aac <aiSystemPerformanceProcess+0x10c>
                }
            }
            if (r == CONS_EVT_PAUSE) {
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d112      	bne.n	8002ae2 <aiSystemPerformanceProcess+0x142>
                printf("\r\n");
 8002abc:	480d      	ldr	r0, [pc, #52]	; (8002af4 <aiSystemPerformanceProcess+0x154>)
 8002abe:	f00a fd23 	bl	800d508 <puts>
                printf("Press any key to continue..\r\n");
 8002ac2:	4814      	ldr	r0, [pc, #80]	; (8002b14 <aiSystemPerformanceProcess+0x174>)
 8002ac4:	f00a fd20 	bl	800d508 <puts>
                while ((r = aiTestConsole()) == CONS_EVT_TIMEOUT) {
 8002ac8:	e003      	b.n	8002ad2 <aiSystemPerformanceProcess+0x132>
                    HAL_Delay(1000);
 8002aca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ace:	f001 fa27 	bl	8003f20 <HAL_Delay>
                while ((r = aiTestConsole()) == CONS_EVT_TIMEOUT) {
 8002ad2:	f7ff feed 	bl	80028b0 <aiTestConsole>
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f5      	beq.n	8002aca <aiSystemPerformanceProcess+0x12a>
                }
                r = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	607b      	str	r3, [r7, #4]
            }
        }
    } while (r==0);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f43f af60 	beq.w	80029aa <aiSystemPerformanceProcess+0xa>

    return r;
 8002aea:	687b      	ldr	r3, [r7, #4]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	0800e860 	.word	0x0800e860
 8002af8:	0800eb20 	.word	0x0800eb20
 8002afc:	0800eb4c 	.word	0x0800eb4c
 8002b00:	0800eb70 	.word	0x0800eb70
 8002b04:	0800eba0 	.word	0x0800eba0
 8002b08:	0800ebb4 	.word	0x0800ebb4
 8002b0c:	0800ebf0 	.word	0x0800ebf0
 8002b10:	0800ec10 	.word	0x0800ec10
 8002b14:	0800ec34 	.word	0x0800ec34
 8002b18:	240005a0 	.word	0x240005a0
 8002b1c:	24000008 	.word	0x24000008
 8002b20:	24000570 	.word	0x24000570
 8002b24:	0800ec54 	.word	0x0800ec54

08002b28 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
    MX_UARTx_Init();
 8002b2c:	f000 fbfc 	bl	8003328 <MX_USART3_UART_Init>
    aiSystemPerformanceInit();
 8002b30:	f7ff ff08 	bl	8002944 <aiSystemPerformanceInit>
    /* USER CODE BEGIN 0 */
    /* USER CODE END 0 */
}
 8002b34:	bf00      	nop
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
    aiSystemPerformanceProcess();
 8002b3c:	f7ff ff30 	bl	80029a0 <aiSystemPerformanceProcess>
    HAL_Delay(1000); /* delay 1s */
 8002b40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b44:	f001 f9ec 	bl	8003f20 <HAL_Delay>
    /* USER CODE BEGIN 1 */
    /* USER CODE END 1 */
}
 8002b48:	bf00      	nop
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <ai_mnetwork_is_valid>:
AI_STATIC struct network_instance gnetworks[AI_MNETWORK_NUMBER] = {0};

AI_DECLARE_STATIC
ai_bool ai_mnetwork_is_valid(const char* name,
        const ai_network_entry_t *entry)
{
 8002b4c:	b590      	push	{r4, r7, lr}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
    if (name && (strlen(entry->name) == strlen(name)) &&
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d01d      	beq.n	8002b98 <ai_mnetwork_is_valid+0x4c>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fd fbbd 	bl	80002e0 <strlen>
 8002b66:	4604      	mov	r4, r0
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7fd fbb9 	bl	80002e0 <strlen>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	429c      	cmp	r4, r3
 8002b72:	d111      	bne.n	8002b98 <ai_mnetwork_is_valid+0x4c>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681c      	ldr	r4, [r3, #0]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fd fbaf 	bl	80002e0 <strlen>
 8002b82:	4603      	mov	r3, r0
 8002b84:	461a      	mov	r2, r3
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4620      	mov	r0, r4
 8002b8a:	f00a fd70 	bl	800d66e <strncmp>
 8002b8e:	4603      	mov	r3, r0
    if (name && (strlen(entry->name) == strlen(name)) &&
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <ai_mnetwork_is_valid+0x4c>
        return true;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <ai_mnetwork_is_valid+0x4e>
    return false;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd90      	pop	{r4, r7, pc}
	...

08002ba4 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	e026      	b.n	8002c00 <ai_mnetwork_handle+0x5c>
        if ((inst) && (&gnetworks[i] == inst))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00b      	beq.n	8002bd0 <ai_mnetwork_handle+0x2c>
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	1a9b      	subs	r3, r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	4a14      	ldr	r2, [pc, #80]	; (8002c14 <ai_mnetwork_handle+0x70>)
 8002bc4:	4413      	add	r3, r2
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d101      	bne.n	8002bd0 <ai_mnetwork_handle+0x2c>
            return inst;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	e01b      	b.n	8002c08 <ai_mnetwork_handle+0x64>
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d111      	bne.n	8002bfa <ai_mnetwork_handle+0x56>
 8002bd6:	490f      	ldr	r1, [pc, #60]	; (8002c14 <ai_mnetwork_handle+0x70>)
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	1a9b      	subs	r3, r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	440b      	add	r3, r1
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d107      	bne.n	8002bfa <ai_mnetwork_handle+0x56>
            return &gnetworks[i];
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	4613      	mov	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	1a9b      	subs	r3, r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4a07      	ldr	r2, [pc, #28]	; (8002c14 <ai_mnetwork_handle+0x70>)
 8002bf6:	4413      	add	r3, r2
 8002bf8:	e006      	b.n	8002c08 <ai_mnetwork_handle+0x64>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	ddd5      	ble.n	8002bb2 <ai_mnetwork_handle+0xe>
    }
    return NULL;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	240005a4 	.word	0x240005a4

08002c18 <ai_mnetwork_release_handle>:

AI_DECLARE_STATIC
void ai_mnetwork_release_handle(struct network_instance *inst)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8002c20:	2300      	movs	r3, #0
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	e019      	b.n	8002c5a <ai_mnetwork_release_handle+0x42>
        if ((inst) && (&gnetworks[i] == inst)) {
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d013      	beq.n	8002c54 <ai_mnetwork_release_handle+0x3c>
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	4a0d      	ldr	r2, [pc, #52]	; (8002c6c <ai_mnetwork_release_handle+0x54>)
 8002c38:	4413      	add	r3, r2
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d109      	bne.n	8002c54 <ai_mnetwork_release_handle+0x3c>
            gnetworks[i].entry = NULL;
 8002c40:	490a      	ldr	r1, [pc, #40]	; (8002c6c <ai_mnetwork_release_handle+0x54>)
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4613      	mov	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	440b      	add	r3, r1
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
            return;
 8002c52:	e005      	b.n	8002c60 <ai_mnetwork_release_handle+0x48>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	3301      	adds	r3, #1
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	dde2      	ble.n	8002c26 <ai_mnetwork_release_handle+0xe>
        }
    }
}
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	240005a4 	.word	0x240005a4

08002c70 <ai_mnetwork_find>:

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	e01c      	b.n	8002cba <ai_mnetwork_find+0x4a>
        entry = &networks[i];
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	4613      	mov	r3, r2
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	4413      	add	r3, r2
 8002c88:	015b      	lsls	r3, r3, #5
 8002c8a:	4a10      	ldr	r2, [pc, #64]	; (8002ccc <ai_mnetwork_find+0x5c>)
 8002c8c:	4413      	add	r3, r2
 8002c8e:	60bb      	str	r3, [r7, #8]
        if (ai_mnetwork_is_valid(name, entry))
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff ff5a 	bl	8002b4c <ai_mnetwork_is_valid>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d002      	beq.n	8002ca4 <ai_mnetwork_find+0x34>
            return entry->name;
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	e00e      	b.n	8002cc2 <ai_mnetwork_find+0x52>
        else {
            if (!idx--)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	1e5a      	subs	r2, r3, #1
 8002ca8:	603a      	str	r2, [r7, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d102      	bne.n	8002cb4 <ai_mnetwork_find+0x44>
                return entry->name;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	e006      	b.n	8002cc2 <ai_mnetwork_find+0x52>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	dddf      	ble.n	8002c80 <ai_mnetwork_find+0x10>
        }
    }
    return NULL;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	0800ed08 	.word	0x0800ed08

08002cd0 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08a      	sub	sp, #40	; 0x28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	f7ff ff5f 	bl	8002ba4 <ai_mnetwork_handle>
 8002ce6:	61f8      	str	r0, [r7, #28]

    if (!inst) {
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d108      	bne.n	8002d00 <ai_mnetwork_create+0x30>
        err.type = AI_ERROR_ALLOCATION_FAILED;
 8002cee:	2331      	movs	r3, #49	; 0x31
 8002cf0:	753b      	strb	r3, [r7, #20]
        err.code = AI_ERROR_CODE_NETWORK;
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2210      	movs	r2, #16
 8002cf6:	f362 231f 	bfi	r3, r2, #8, #24
 8002cfa:	617b      	str	r3, [r7, #20]
        return err;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	e04d      	b.n	8002d9c <ai_mnetwork_create+0xcc>
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8002d00:	2300      	movs	r3, #0
 8002d02:	623b      	str	r3, [r7, #32]
 8002d04:	e014      	b.n	8002d30 <ai_mnetwork_create+0x60>
        entry = &networks[i];
 8002d06:	6a3a      	ldr	r2, [r7, #32]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	4413      	add	r3, r2
 8002d0e:	015b      	lsls	r3, r3, #5
 8002d10:	4a24      	ldr	r2, [pc, #144]	; (8002da4 <ai_mnetwork_create+0xd4>)
 8002d12:	4413      	add	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        if (ai_mnetwork_is_valid(name, entry)) {
 8002d16:	69b9      	ldr	r1, [r7, #24]
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f7ff ff17 	bl	8002b4c <ai_mnetwork_is_valid>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <ai_mnetwork_create+0x5a>
            found = entry;
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d28:	e005      	b.n	8002d36 <ai_mnetwork_create+0x66>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	623b      	str	r3, [r7, #32]
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	dde7      	ble.n	8002d06 <ai_mnetwork_create+0x36>
        }
    }

    if (!found) {
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d108      	bne.n	8002d4e <ai_mnetwork_create+0x7e>
        err.type = AI_ERROR_INVALID_PARAM;
 8002d3c:	2314      	movs	r3, #20
 8002d3e:	753b      	strb	r3, [r7, #20]
        err.code = AI_ERROR_CODE_NETWORK;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	2210      	movs	r2, #16
 8002d44:	f362 231f 	bfi	r3, r2, #8, #24
 8002d48:	617b      	str	r3, [r7, #20]
        return err;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	e026      	b.n	8002d9c <ai_mnetwork_create+0xcc>
    }

    if (network_config == NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d109      	bne.n	8002d68 <ai_mnetwork_create+0x98>
        err = found->ai_create(network, found->config);
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d5c:	4611      	mov	r1, r2
 8002d5e:	68b8      	ldr	r0, [r7, #8]
 8002d60:	4798      	blx	r3
 8002d62:	4603      	mov	r3, r0
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	e006      	b.n	8002d76 <ai_mnetwork_create+0xa6>
    else
        err = found->ai_create(network, network_config);
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	68b8      	ldr	r0, [r7, #8]
 8002d70:	4798      	blx	r3
 8002d72:	4603      	mov	r3, r0
 8002d74:	617b      	str	r3, [r7, #20]
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10c      	bne.n	8002d9a <ai_mnetwork_create+0xca>
 8002d80:	7d3b      	ldrb	r3, [r7, #20]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d109      	bne.n	8002d9a <ai_mnetwork_create+0xca>
        inst->entry = found;
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8a:	601a      	str	r2, [r3, #0]
        inst->handle = *network;
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	605a      	str	r2, [r3, #4]
        *network = (ai_handle*)inst;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	69fa      	ldr	r2, [r7, #28]
 8002d98:	601a      	str	r2, [r3, #0]
    }

    return err;
 8002d9a:	697b      	ldr	r3, [r7, #20]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3728      	adds	r7, #40	; 0x28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	0800ed08 	.word	0x0800ed08

08002da8 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7ff fef7 	bl	8002ba4 <ai_mnetwork_handle>
 8002db6:	60f8      	str	r0, [r7, #12]
    if (inn) {
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d011      	beq.n	8002de2 <ai_mnetwork_destroy+0x3a>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	6852      	ldr	r2, [r2, #4]
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4798      	blx	r3
 8002dcc:	60b8      	str	r0, [r7, #8]
        if (hdl != inn->handle) {
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d004      	beq.n	8002de2 <ai_mnetwork_destroy+0x3a>
            ai_mnetwork_release_handle(inn);
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f7ff ff1d 	bl	8002c18 <ai_mnetwork_release_handle>
            network = AI_HANDLE_NULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	607b      	str	r3, [r7, #4]
        }
    }
    return network;
 8002de2:	687b      	ldr	r3, [r7, #4]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <ai_mnetwork_get_info>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_info(ai_handle network, ai_network_report* report)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff fed4 	bl	8002ba4 <ai_mnetwork_handle>
 8002dfc:	60f8      	str	r0, [r7, #12]
    if (inn)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d009      	beq.n	8002e18 <ai_mnetwork_get_info+0x2c>
        return inn->entry->ai_get_info(inn->handle, report);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	6852      	ldr	r2, [r2, #4]
 8002e0e:	6839      	ldr	r1, [r7, #0]
 8002e10:	4610      	mov	r0, r2
 8002e12:	4798      	blx	r3
 8002e14:	4603      	mov	r3, r0
 8002e16:	e000      	b.n	8002e1a <ai_mnetwork_get_info+0x2e>
    else
        return false;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b084      	sub	sp, #16
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
 8002e2a:	2314      	movs	r3, #20
 8002e2c:	723b      	strb	r3, [r7, #8]
    err.code = AI_ERROR_CODE_NETWORK;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2210      	movs	r2, #16
 8002e32:	f362 231f 	bfi	r3, r2, #8, #24
 8002e36:	60bb      	str	r3, [r7, #8]

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff feb3 	bl	8002ba4 <ai_mnetwork_handle>
 8002e3e:	60f8      	str	r0, [r7, #12]
    if (inn)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d008      	beq.n	8002e58 <ai_mnetwork_get_error+0x36>
        return inn->entry->ai_get_error(inn->handle);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	6852      	ldr	r2, [r2, #4]
 8002e50:	4610      	mov	r0, r2
 8002e52:	4798      	blx	r3
 8002e54:	4603      	mov	r3, r0
 8002e56:	e000      	b.n	8002e5a <ai_mnetwork_get_error+0x38>
    else
        return err;
 8002e58:	68bb      	ldr	r3, [r7, #8]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network, const ai_network_params* params)
{
 8002e62:	b5b0      	push	{r4, r5, r7, lr}
 8002e64:	b090      	sub	sp, #64	; 0x40
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
 8002e6a:	6039      	str	r1, [r7, #0]
    struct network_instance *inn;
    ai_network_params par;

    /* TODO: adding check ai_buffer activations/weights shape coherence */

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7ff fe99 	bl	8002ba4 <ai_mnetwork_handle>
 8002e72:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (inn) {
 8002e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d03f      	beq.n	8002efa <ai_mnetwork_init+0x98>
        par = inn->entry->params;
 8002e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f107 040c 	add.w	r4, r7, #12
 8002e82:	1d1d      	adds	r5, r3, #4
 8002e84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e8c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002e90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (params->activations.n_batches)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	8b9b      	ldrh	r3, [r3, #28]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00b      	beq.n	8002eb4 <ai_mnetwork_init+0x52>
            par.activations = params->activations;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8002ea2:	f103 0518 	add.w	r5, r3, #24
 8002ea6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ea8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002eaa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002eae:	e884 0003 	stmia.w	r4, {r0, r1}
 8002eb2:	e002      	b.n	8002eba <ai_mnetwork_init+0x58>
        else
            par.activations.data = params->activations.data;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb8:	637b      	str	r3, [r7, #52]	; 0x34
        if (params->params.n_batches)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	889b      	ldrh	r3, [r3, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <ai_mnetwork_init+0x76>
            par.params = params->params;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	f107 040c 	add.w	r4, r7, #12
 8002ec8:	461d      	mov	r5, r3
 8002eca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ecc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ece:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002ed2:	e884 0003 	stmia.w	r4, {r0, r1}
 8002ed6:	e005      	b.n	8002ee4 <ai_mnetwork_init+0x82>
        else
            par.params.data = inn->entry->ai_data_weights_get_default();
 8002ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ede:	4798      	blx	r3
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	61fb      	str	r3, [r7, #28]
        return inn->entry->ai_init(inn->handle, &par);
 8002ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002eec:	6852      	ldr	r2, [r2, #4]
 8002eee:	f107 010c 	add.w	r1, r7, #12
 8002ef2:	4610      	mov	r0, r2
 8002ef4:	4798      	blx	r3
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	e000      	b.n	8002efc <ai_mnetwork_init+0x9a>
    }
    else
        return false;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3740      	adds	r7, #64	; 0x40
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bdb0      	pop	{r4, r5, r7, pc}

08002f04 <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f7ff fe47 	bl	8002ba4 <ai_mnetwork_handle>
 8002f16:	6178      	str	r0, [r7, #20]
    if (inn)
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d009      	beq.n	8002f32 <ai_mnetwork_run+0x2e>
        return inn->entry->ai_run(inn->handle, input, output);
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	6850      	ldr	r0, [r2, #4]
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	68b9      	ldr	r1, [r7, #8]
 8002f2c:	4798      	blx	r3
 8002f2e:	4603      	mov	r3, r0
 8002f30:	e000      	b.n	8002f34 <ai_mnetwork_run+0x30>
    else
        return 0;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 8002f3c:	b5b0      	push	{r4, r5, r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f7ff fe2b 	bl	8002ba4 <ai_mnetwork_handle>
 8002f4e:	6178      	str	r0, [r7, #20]
     if (inn && phandle && pparams) {
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d018      	beq.n	8002f88 <ai_mnetwork_get_private_handle+0x4c>
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d015      	beq.n	8002f88 <ai_mnetwork_get_private_handle+0x4c>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d012      	beq.n	8002f88 <ai_mnetwork_get_private_handle+0x4c>
         *phandle = inn->handle;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	601a      	str	r2, [r3, #0]
         *pparams = inn->params;
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	4615      	mov	r5, r2
 8002f70:	f103 0408 	add.w	r4, r3, #8
 8002f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f7c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002f80:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
         return 0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	e001      	b.n	8002f8c <ai_mnetwork_get_private_handle+0x50>
     }
     else
         return -1;
 8002f88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 }
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bdb0      	pop	{r4, r5, r7, pc}

08002f94 <ai_mnetwork_get_ext_data_activations>:

 AI_API_ENTRY
int ai_mnetwork_get_ext_data_activations(ai_handle network,
         ai_u32 *add,
         ai_u32 *size)
 {
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f7ff fdff 	bl	8002ba4 <ai_mnetwork_handle>
 8002fa6:	6178      	str	r0, [r7, #20]
     if (inn && add && size) {
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d011      	beq.n	8002fd2 <ai_mnetwork_get_ext_data_activations+0x3e>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00e      	beq.n	8002fd2 <ai_mnetwork_get_ext_data_activations+0x3e>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00b      	beq.n	8002fd2 <ai_mnetwork_get_ext_data_activations+0x3e>
         *add = inn->entry->extActBufferStartAddr;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	601a      	str	r2, [r3, #0]
         *size = inn->entry->actBufferSize;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	601a      	str	r2, [r3, #0]
         return 0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	e001      	b.n	8002fd6 <ai_mnetwork_get_ext_data_activations+0x42>
     }
     else
         return -1;
 8002fd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 }
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002fe4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002fe8:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <SCB_EnableICache+0x3c>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002ff4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002ff8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002ffc:	4b07      	ldr	r3, [pc, #28]	; (800301c <SCB_EnableICache+0x3c>)
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	4a06      	ldr	r2, [pc, #24]	; (800301c <SCB_EnableICache+0x3c>)
 8003002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003006:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003008:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800300c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8003010:	bf00      	nop
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003026:	4b1d      	ldr	r3, [pc, #116]	; (800309c <SCB_EnableDCache+0x7c>)
 8003028:	2200      	movs	r2, #0
 800302a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800302e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003032:	4b1a      	ldr	r3, [pc, #104]	; (800309c <SCB_EnableDCache+0x7c>)
 8003034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003038:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	0b5b      	lsrs	r3, r3, #13
 800303e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003042:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	08db      	lsrs	r3, r3, #3
 8003048:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800304c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003056:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800305c:	490f      	ldr	r1, [pc, #60]	; (800309c <SCB_EnableDCache+0x7c>)
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	1e5a      	subs	r2, r3, #1
 8003068:	60ba      	str	r2, [r7, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1ef      	bne.n	800304e <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1e5a      	subs	r2, r3, #1
 8003072:	60fa      	str	r2, [r7, #12]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1e5      	bne.n	8003044 <SCB_EnableDCache+0x24>
 8003078:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800307c:	4b07      	ldr	r3, [pc, #28]	; (800309c <SCB_EnableDCache+0x7c>)
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	4a06      	ldr	r2, [pc, #24]	; (800309c <SCB_EnableDCache+0x7c>)
 8003082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003086:	6153      	str	r3, [r2, #20]
 8003088:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800308c:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8003090:	bf00      	nop
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	e000ed00 	.word	0xe000ed00

080030a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80030a4:	f7ff ff9c 	bl	8002fe0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80030a8:	f7ff ffba 	bl	8003020 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030ac:	f000 fea6 	bl	8003dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030b0:	f000 f80e 	bl	80030d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030b4:	f000 f9b6 	bl	8003424 <MX_GPIO_Init>
  MX_CRC_Init();
 80030b8:	f000 f8c2 	bl	8003240 <MX_CRC_Init>
  MX_ETH_Init();
 80030bc:	f000 f8e2 	bl	8003284 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 80030c0:	f000 f97e 	bl	80033c0 <MX_USB_OTG_FS_PCD_Init>
  MX_X_CUBE_AI_Init();
 80030c4:	f7ff fd30 	bl	8002b28 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 80030c8:	f7ff fd36 	bl	8002b38 <MX_X_CUBE_AI_Process>
 80030cc:	e7fc      	b.n	80030c8 <main+0x28>
	...

080030d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b0cc      	sub	sp, #304	; 0x130
 80030d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030d6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80030da:	224c      	movs	r2, #76	; 0x4c
 80030dc:	2100      	movs	r1, #0
 80030de:	4618      	mov	r0, r3
 80030e0:	f00a f8d9 	bl	800d296 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030e4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80030e8:	2220      	movs	r2, #32
 80030ea:	2100      	movs	r1, #0
 80030ec:	4618      	mov	r0, r3
 80030ee:	f00a f8d2 	bl	800d296 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030f2:	f107 0308 	add.w	r3, r7, #8
 80030f6:	4618      	mov	r0, r3
 80030f8:	23bc      	movs	r3, #188	; 0xbc
 80030fa:	461a      	mov	r2, r3
 80030fc:	2100      	movs	r1, #0
 80030fe:	f00a f8ca 	bl	800d296 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003102:	2002      	movs	r0, #2
 8003104:	f002 f85c 	bl	80051c0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003108:	1d3b      	adds	r3, r7, #4
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	4b49      	ldr	r3, [pc, #292]	; (8003234 <SystemClock_Config+0x164>)
 8003110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003112:	4a48      	ldr	r2, [pc, #288]	; (8003234 <SystemClock_Config+0x164>)
 8003114:	f023 0301 	bic.w	r3, r3, #1
 8003118:	62d3      	str	r3, [r2, #44]	; 0x2c
 800311a:	4b46      	ldr	r3, [pc, #280]	; (8003234 <SystemClock_Config+0x164>)
 800311c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311e:	f003 0201 	and.w	r2, r3, #1
 8003122:	1d3b      	adds	r3, r7, #4
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	4b44      	ldr	r3, [pc, #272]	; (8003238 <SystemClock_Config+0x168>)
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	4a43      	ldr	r2, [pc, #268]	; (8003238 <SystemClock_Config+0x168>)
 800312c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003130:	6193      	str	r3, [r2, #24]
 8003132:	4b41      	ldr	r3, [pc, #260]	; (8003238 <SystemClock_Config+0x168>)
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800313a:	1d3b      	adds	r3, r7, #4
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	1d3b      	adds	r3, r7, #4
 8003140:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003142:	bf00      	nop
 8003144:	4b3c      	ldr	r3, [pc, #240]	; (8003238 <SystemClock_Config+0x168>)
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800314c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003150:	d1f8      	bne.n	8003144 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003152:	2301      	movs	r3, #1
 8003154:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003158:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800315c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003160:	2302      	movs	r3, #2
 8003162:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003166:	2302      	movs	r3, #2
 8003168:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800316c:	2301      	movs	r3, #1
 800316e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 8003172:	2318      	movs	r3, #24
 8003174:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003178:	2302      	movs	r3, #2
 800317a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800317e:	2304      	movs	r3, #4
 8003180:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003184:	2302      	movs	r3, #2
 8003186:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800318a:	230c      	movs	r3, #12
 800318c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003190:	2300      	movs	r3, #0
 8003192:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003196:	2300      	movs	r3, #0
 8003198:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800319c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80031a0:	4618      	mov	r0, r3
 80031a2:	f002 f857 	bl	8005254 <HAL_RCC_OscConfig>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80031ac:	f000 f9ee 	bl	800358c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031b0:	233f      	movs	r3, #63	; 0x3f
 80031b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031b6:	2303      	movs	r3, #3
 80031b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80031bc:	2300      	movs	r3, #0
 80031be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80031c8:	2300      	movs	r3, #0
 80031ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80031d4:	2300      	movs	r3, #0
 80031d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80031da:	2300      	movs	r3, #0
 80031dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80031e0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80031e4:	2101      	movs	r1, #1
 80031e6:	4618      	mov	r0, r3
 80031e8:	f002 fc0c 	bl	8005a04 <HAL_RCC_ClockConfig>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <SystemClock_Config+0x126>
  {
    Error_Handler();
 80031f2:	f000 f9cb 	bl	800358c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 80031f6:	f107 0308 	add.w	r3, r7, #8
 80031fa:	4a10      	ldr	r2, [pc, #64]	; (800323c <SystemClock_Config+0x16c>)
 80031fc:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80031fe:	f107 0308 	add.w	r3, r7, #8
 8003202:	2200      	movs	r2, #0
 8003204:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8003206:	f107 0308 	add.w	r3, r7, #8
 800320a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800320e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003212:	f107 0308 	add.w	r3, r7, #8
 8003216:	4618      	mov	r0, r3
 8003218:	f002 ff78 	bl	800610c <HAL_RCCEx_PeriphCLKConfig>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <SystemClock_Config+0x156>
  {
    Error_Handler();
 8003222:	f000 f9b3 	bl	800358c <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8003226:	f002 f805 	bl	8005234 <HAL_PWREx_EnableUSBVoltageDetector>
}
 800322a:	bf00      	nop
 800322c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	58000400 	.word	0x58000400
 8003238:	58024800 	.word	0x58024800
 800323c:	00040002 	.word	0x00040002

08003240 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003244:	4b0d      	ldr	r3, [pc, #52]	; (800327c <MX_CRC_Init+0x3c>)
 8003246:	4a0e      	ldr	r2, [pc, #56]	; (8003280 <MX_CRC_Init+0x40>)
 8003248:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800324a:	4b0c      	ldr	r3, [pc, #48]	; (800327c <MX_CRC_Init+0x3c>)
 800324c:	2200      	movs	r2, #0
 800324e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003250:	4b0a      	ldr	r3, [pc, #40]	; (800327c <MX_CRC_Init+0x3c>)
 8003252:	2200      	movs	r2, #0
 8003254:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8003256:	4b09      	ldr	r3, [pc, #36]	; (800327c <MX_CRC_Init+0x3c>)
 8003258:	2200      	movs	r2, #0
 800325a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800325c:	4b07      	ldr	r3, [pc, #28]	; (800327c <MX_CRC_Init+0x3c>)
 800325e:	2200      	movs	r2, #0
 8003260:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003262:	4b06      	ldr	r3, [pc, #24]	; (800327c <MX_CRC_Init+0x3c>)
 8003264:	2201      	movs	r2, #1
 8003266:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003268:	4804      	ldr	r0, [pc, #16]	; (800327c <MX_CRC_Init+0x3c>)
 800326a:	f000 ff97 	bl	800419c <HAL_CRC_Init>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8003274:	f000 f98a 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003278:	bf00      	nop
 800327a:	bd80      	pop	{r7, pc}
 800327c:	24000aec 	.word	0x24000aec
 8003280:	58024c00 	.word	0x58024c00

08003284 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8003288:	4b22      	ldr	r3, [pc, #136]	; (8003314 <MX_ETH_Init+0x90>)
 800328a:	4a23      	ldr	r2, [pc, #140]	; (8003318 <MX_ETH_Init+0x94>)
 800328c:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 800328e:	4b21      	ldr	r3, [pc, #132]	; (8003314 <MX_ETH_Init+0x90>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8003296:	4b1f      	ldr	r3, [pc, #124]	; (8003314 <MX_ETH_Init+0x90>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	3301      	adds	r3, #1
 800329c:	2280      	movs	r2, #128	; 0x80
 800329e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80032a0:	4b1c      	ldr	r3, [pc, #112]	; (8003314 <MX_ETH_Init+0x90>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	3302      	adds	r3, #2
 80032a6:	22e1      	movs	r2, #225	; 0xe1
 80032a8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80032aa:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <MX_ETH_Init+0x90>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	3303      	adds	r3, #3
 80032b0:	2200      	movs	r2, #0
 80032b2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80032b4:	4b17      	ldr	r3, [pc, #92]	; (8003314 <MX_ETH_Init+0x90>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	3304      	adds	r3, #4
 80032ba:	2200      	movs	r2, #0
 80032bc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80032be:	4b15      	ldr	r3, [pc, #84]	; (8003314 <MX_ETH_Init+0x90>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	3305      	adds	r3, #5
 80032c4:	2200      	movs	r2, #0
 80032c6:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80032c8:	4b12      	ldr	r3, [pc, #72]	; (8003314 <MX_ETH_Init+0x90>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80032ce:	4b11      	ldr	r3, [pc, #68]	; (8003314 <MX_ETH_Init+0x90>)
 80032d0:	4a12      	ldr	r2, [pc, #72]	; (800331c <MX_ETH_Init+0x98>)
 80032d2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80032d4:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <MX_ETH_Init+0x90>)
 80032d6:	4a12      	ldr	r2, [pc, #72]	; (8003320 <MX_ETH_Init+0x9c>)
 80032d8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80032da:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <MX_ETH_Init+0x90>)
 80032dc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80032e0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80032e2:	480c      	ldr	r0, [pc, #48]	; (8003314 <MX_ETH_Init+0x90>)
 80032e4:	f001 f844 	bl	8004370 <HAL_ETH_Init>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 80032ee:	f000 f94d 	bl	800358c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80032f2:	2234      	movs	r2, #52	; 0x34
 80032f4:	2100      	movs	r1, #0
 80032f6:	480b      	ldr	r0, [pc, #44]	; (8003324 <MX_ETH_Init+0xa0>)
 80032f8:	f009 ffcd 	bl	800d296 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80032fc:	4b09      	ldr	r3, [pc, #36]	; (8003324 <MX_ETH_Init+0xa0>)
 80032fe:	2221      	movs	r2, #33	; 0x21
 8003300:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003302:	4b08      	ldr	r3, [pc, #32]	; (8003324 <MX_ETH_Init+0xa0>)
 8003304:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003308:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800330a:	4b06      	ldr	r3, [pc, #24]	; (8003324 <MX_ETH_Init+0xa0>)
 800330c:	2200      	movs	r2, #0
 800330e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8003310:	bf00      	nop
 8003312:	bd80      	pop	{r7, pc}
 8003314:	24000b10 	.word	0x24000b10
 8003318:	40028000 	.word	0x40028000
 800331c:	2400043c 	.word	0x2400043c
 8003320:	240003dc 	.word	0x240003dc
 8003324:	24000b80 	.word	0x24000b80

08003328 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800332c:	4b22      	ldr	r3, [pc, #136]	; (80033b8 <MX_USART3_UART_Init+0x90>)
 800332e:	4a23      	ldr	r2, [pc, #140]	; (80033bc <MX_USART3_UART_Init+0x94>)
 8003330:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003332:	4b21      	ldr	r3, [pc, #132]	; (80033b8 <MX_USART3_UART_Init+0x90>)
 8003334:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003338:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800333a:	4b1f      	ldr	r3, [pc, #124]	; (80033b8 <MX_USART3_UART_Init+0x90>)
 800333c:	2200      	movs	r2, #0
 800333e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003340:	4b1d      	ldr	r3, [pc, #116]	; (80033b8 <MX_USART3_UART_Init+0x90>)
 8003342:	2200      	movs	r2, #0
 8003344:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003346:	4b1c      	ldr	r3, [pc, #112]	; (80033b8 <MX_USART3_UART_Init+0x90>)
 8003348:	2200      	movs	r2, #0
 800334a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800334c:	4b1a      	ldr	r3, [pc, #104]	; (80033b8 <MX_USART3_UART_Init+0x90>)
 800334e:	220c      	movs	r2, #12
 8003350:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003352:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <MX_USART3_UART_Init+0x90>)
 8003354:	2200      	movs	r2, #0
 8003356:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003358:	4b17      	ldr	r3, [pc, #92]	; (80033b8 <MX_USART3_UART_Init+0x90>)
 800335a:	2200      	movs	r2, #0
 800335c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800335e:	4b16      	ldr	r3, [pc, #88]	; (80033b8 <MX_USART3_UART_Init+0x90>)
 8003360:	2200      	movs	r2, #0
 8003362:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003364:	4b14      	ldr	r3, [pc, #80]	; (80033b8 <MX_USART3_UART_Init+0x90>)
 8003366:	2200      	movs	r2, #0
 8003368:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800336a:	4b13      	ldr	r3, [pc, #76]	; (80033b8 <MX_USART3_UART_Init+0x90>)
 800336c:	2200      	movs	r2, #0
 800336e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003370:	4811      	ldr	r0, [pc, #68]	; (80033b8 <MX_USART3_UART_Init+0x90>)
 8003372:	f004 f9bb 	bl	80076ec <HAL_UART_Init>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800337c:	f000 f906 	bl	800358c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003380:	2100      	movs	r1, #0
 8003382:	480d      	ldr	r0, [pc, #52]	; (80033b8 <MX_USART3_UART_Init+0x90>)
 8003384:	f006 fe89 	bl	800a09a <HAL_UARTEx_SetTxFifoThreshold>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800338e:	f000 f8fd 	bl	800358c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003392:	2100      	movs	r1, #0
 8003394:	4808      	ldr	r0, [pc, #32]	; (80033b8 <MX_USART3_UART_Init+0x90>)
 8003396:	f006 febe 	bl	800a116 <HAL_UARTEx_SetRxFifoThreshold>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80033a0:	f000 f8f4 	bl	800358c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80033a4:	4804      	ldr	r0, [pc, #16]	; (80033b8 <MX_USART3_UART_Init+0x90>)
 80033a6:	f006 fe3f 	bl	800a028 <HAL_UARTEx_DisableFifoMode>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80033b0:	f000 f8ec 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80033b4:	bf00      	nop
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	24000658 	.word	0x24000658
 80033bc:	40004800 	.word	0x40004800

080033c0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80033c4:	4b15      	ldr	r3, [pc, #84]	; (800341c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80033c6:	4a16      	ldr	r2, [pc, #88]	; (8003420 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80033c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80033ca:	4b14      	ldr	r3, [pc, #80]	; (800341c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80033cc:	2209      	movs	r2, #9
 80033ce:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80033d0:	4b12      	ldr	r3, [pc, #72]	; (800341c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80033d2:	2202      	movs	r2, #2
 80033d4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80033d6:	4b11      	ldr	r3, [pc, #68]	; (800341c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80033d8:	2200      	movs	r2, #0
 80033da:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80033dc:	4b0f      	ldr	r3, [pc, #60]	; (800341c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80033de:	2202      	movs	r2, #2
 80033e0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80033e2:	4b0e      	ldr	r3, [pc, #56]	; (800341c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80033e8:	4b0c      	ldr	r3, [pc, #48]	; (800341c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80033ee:	4b0b      	ldr	r3, [pc, #44]	; (800341c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80033f4:	4b09      	ldr	r3, [pc, #36]	; (800341c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80033f6:	2201      	movs	r2, #1
 80033f8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80033fa:	4b08      	ldr	r3, [pc, #32]	; (800341c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80033fc:	2201      	movs	r2, #1
 80033fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003400:	4b06      	ldr	r3, [pc, #24]	; (800341c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003402:	2200      	movs	r2, #0
 8003404:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003406:	4805      	ldr	r0, [pc, #20]	; (800341c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003408:	f001 fd91 	bl	8004f2e <HAL_PCD_Init>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8003412:	f000 f8bb 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	240006e4 	.word	0x240006e4
 8003420:	40080000 	.word	0x40080000

08003424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08c      	sub	sp, #48	; 0x30
 8003428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800342a:	f107 031c 	add.w	r3, r7, #28
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	605a      	str	r2, [r3, #4]
 8003434:	609a      	str	r2, [r3, #8]
 8003436:	60da      	str	r2, [r3, #12]
 8003438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800343a:	4b4f      	ldr	r3, [pc, #316]	; (8003578 <MX_GPIO_Init+0x154>)
 800343c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003440:	4a4d      	ldr	r2, [pc, #308]	; (8003578 <MX_GPIO_Init+0x154>)
 8003442:	f043 0304 	orr.w	r3, r3, #4
 8003446:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800344a:	4b4b      	ldr	r3, [pc, #300]	; (8003578 <MX_GPIO_Init+0x154>)
 800344c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	61bb      	str	r3, [r7, #24]
 8003456:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003458:	4b47      	ldr	r3, [pc, #284]	; (8003578 <MX_GPIO_Init+0x154>)
 800345a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800345e:	4a46      	ldr	r2, [pc, #280]	; (8003578 <MX_GPIO_Init+0x154>)
 8003460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003464:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003468:	4b43      	ldr	r3, [pc, #268]	; (8003578 <MX_GPIO_Init+0x154>)
 800346a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800346e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003476:	4b40      	ldr	r3, [pc, #256]	; (8003578 <MX_GPIO_Init+0x154>)
 8003478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800347c:	4a3e      	ldr	r2, [pc, #248]	; (8003578 <MX_GPIO_Init+0x154>)
 800347e:	f043 0301 	orr.w	r3, r3, #1
 8003482:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003486:	4b3c      	ldr	r3, [pc, #240]	; (8003578 <MX_GPIO_Init+0x154>)
 8003488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003494:	4b38      	ldr	r3, [pc, #224]	; (8003578 <MX_GPIO_Init+0x154>)
 8003496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800349a:	4a37      	ldr	r2, [pc, #220]	; (8003578 <MX_GPIO_Init+0x154>)
 800349c:	f043 0302 	orr.w	r3, r3, #2
 80034a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034a4:	4b34      	ldr	r3, [pc, #208]	; (8003578 <MX_GPIO_Init+0x154>)
 80034a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034b2:	4b31      	ldr	r3, [pc, #196]	; (8003578 <MX_GPIO_Init+0x154>)
 80034b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034b8:	4a2f      	ldr	r2, [pc, #188]	; (8003578 <MX_GPIO_Init+0x154>)
 80034ba:	f043 0308 	orr.w	r3, r3, #8
 80034be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034c2:	4b2d      	ldr	r3, [pc, #180]	; (8003578 <MX_GPIO_Init+0x154>)
 80034c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80034d0:	4b29      	ldr	r3, [pc, #164]	; (8003578 <MX_GPIO_Init+0x154>)
 80034d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034d6:	4a28      	ldr	r2, [pc, #160]	; (8003578 <MX_GPIO_Init+0x154>)
 80034d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034e0:	4b25      	ldr	r3, [pc, #148]	; (8003578 <MX_GPIO_Init+0x154>)
 80034e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ea:	607b      	str	r3, [r7, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80034ee:	2200      	movs	r2, #0
 80034f0:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80034f4:	4821      	ldr	r0, [pc, #132]	; (800357c <MX_GPIO_Init+0x158>)
 80034f6:	f001 fd01 	bl	8004efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80034fa:	2200      	movs	r2, #0
 80034fc:	2140      	movs	r1, #64	; 0x40
 80034fe:	4820      	ldr	r0, [pc, #128]	; (8003580 <MX_GPIO_Init+0x15c>)
 8003500:	f001 fcfc 	bl	8004efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800350a:	4b1e      	ldr	r3, [pc, #120]	; (8003584 <MX_GPIO_Init+0x160>)
 800350c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350e:	2300      	movs	r3, #0
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003512:	f107 031c 	add.w	r3, r7, #28
 8003516:	4619      	mov	r1, r3
 8003518:	481b      	ldr	r0, [pc, #108]	; (8003588 <MX_GPIO_Init+0x164>)
 800351a:	f001 fb3f 	bl	8004b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800351e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8003522:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003524:	2301      	movs	r3, #1
 8003526:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003528:	2300      	movs	r3, #0
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352c:	2300      	movs	r3, #0
 800352e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003530:	f107 031c 	add.w	r3, r7, #28
 8003534:	4619      	mov	r1, r3
 8003536:	4811      	ldr	r0, [pc, #68]	; (800357c <MX_GPIO_Init+0x158>)
 8003538:	f001 fb30 	bl	8004b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800353c:	2340      	movs	r3, #64	; 0x40
 800353e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003540:	2301      	movs	r3, #1
 8003542:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003544:	2300      	movs	r3, #0
 8003546:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003548:	2300      	movs	r3, #0
 800354a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800354c:	f107 031c 	add.w	r3, r7, #28
 8003550:	4619      	mov	r1, r3
 8003552:	480b      	ldr	r0, [pc, #44]	; (8003580 <MX_GPIO_Init+0x15c>)
 8003554:	f001 fb22 	bl	8004b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003558:	2380      	movs	r3, #128	; 0x80
 800355a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800355c:	2300      	movs	r3, #0
 800355e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003560:	2300      	movs	r3, #0
 8003562:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003564:	f107 031c 	add.w	r3, r7, #28
 8003568:	4619      	mov	r1, r3
 800356a:	4805      	ldr	r0, [pc, #20]	; (8003580 <MX_GPIO_Init+0x15c>)
 800356c:	f001 fb16 	bl	8004b9c <HAL_GPIO_Init>

}
 8003570:	bf00      	nop
 8003572:	3730      	adds	r7, #48	; 0x30
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	58024400 	.word	0x58024400
 800357c:	58020400 	.word	0x58020400
 8003580:	58021800 	.word	0x58021800
 8003584:	11110000 	.word	0x11110000
 8003588:	58020800 	.word	0x58020800

0800358c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
	...

0800359c <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	3303      	adds	r3, #3
 80035ac:	f023 0303 	bic.w	r3, r3, #3
 80035b0:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 80035b2:	4b0c      	ldr	r3, [pc, #48]	; (80035e4 <network_configure_activations+0x48>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 80035b8:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <network_configure_activations+0x48>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	60da      	str	r2, [r3, #12]
    dense_output_array.data = AI_PTR(activations + 0);
 80035be:	4a0a      	ldr	r2, [pc, #40]	; (80035e8 <network_configure_activations+0x4c>)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(activations + 0);
 80035c4:	4a08      	ldr	r2, [pc, #32]	; (80035e8 <network_configure_activations+0x4c>)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(NULL);
 80035ca:	4b08      	ldr	r3, [pc, #32]	; (80035ec <network_configure_activations+0x50>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	609a      	str	r2, [r3, #8]
    dense_1_output_array.data_start = AI_PTR(NULL);
 80035d0:	4b06      	ldr	r3, [pc, #24]	; (80035ec <network_configure_activations+0x50>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 80035d6:	2301      	movs	r3, #1
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	240000ac 	.word	0x240000ac
 80035e8:	240000bc 	.word	0x240000bc
 80035ec:	240000cc 	.word	0x240000cc

080035f0 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8003600:	4b1e      	ldr	r3, [pc, #120]	; (800367c <network_configure_weights+0x8c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003608:	4a1c      	ldr	r2, [pc, #112]	; (800367c <network_configure_weights+0x8c>)
 800360a:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 60);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	333c      	adds	r3, #60	; 0x3c
 8003610:	4a1a      	ldr	r2, [pc, #104]	; (800367c <network_configure_weights+0x8c>)
 8003612:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 60);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	333c      	adds	r3, #60	; 0x3c
 8003618:	4a18      	ldr	r2, [pc, #96]	; (800367c <network_configure_weights+0x8c>)
 800361a:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800361c:	4b18      	ldr	r3, [pc, #96]	; (8003680 <network_configure_weights+0x90>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003624:	4a16      	ldr	r2, [pc, #88]	; (8003680 <network_configure_weights+0x90>)
 8003626:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 40);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	3328      	adds	r3, #40	; 0x28
 800362c:	4a14      	ldr	r2, [pc, #80]	; (8003680 <network_configure_weights+0x90>)
 800362e:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 40);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	3328      	adds	r3, #40	; 0x28
 8003634:	4a12      	ldr	r2, [pc, #72]	; (8003680 <network_configure_weights+0x90>)
 8003636:	60d3      	str	r3, [r2, #12]
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8003638:	4b12      	ldr	r3, [pc, #72]	; (8003684 <network_configure_weights+0x94>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003640:	4a10      	ldr	r2, [pc, #64]	; (8003684 <network_configure_weights+0x94>)
 8003642:	6013      	str	r3, [r2, #0]
    dense_bias_array.data = AI_PTR(weights + 20);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	3314      	adds	r3, #20
 8003648:	4a0e      	ldr	r2, [pc, #56]	; (8003684 <network_configure_weights+0x94>)
 800364a:	6093      	str	r3, [r2, #8]
    dense_bias_array.data_start = AI_PTR(weights + 20);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	3314      	adds	r3, #20
 8003650:	4a0c      	ldr	r2, [pc, #48]	; (8003684 <network_configure_weights+0x94>)
 8003652:	60d3      	str	r3, [r2, #12]
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8003654:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <network_configure_weights+0x98>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800365c:	4a0a      	ldr	r2, [pc, #40]	; (8003688 <network_configure_weights+0x98>)
 800365e:	6013      	str	r3, [r2, #0]
    dense_weights_array.data = AI_PTR(weights + 0);
 8003660:	4a09      	ldr	r2, [pc, #36]	; (8003688 <network_configure_weights+0x98>)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6093      	str	r3, [r2, #8]
    dense_weights_array.data_start = AI_PTR(weights + 0);
 8003666:	4a08      	ldr	r2, [pc, #32]	; (8003688 <network_configure_weights+0x98>)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	60d3      	str	r3, [r2, #12]
  }

  return true;
 800366c:	2301      	movs	r3, #1
}
 800366e:	4618      	mov	r0, r3
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	2400006c 	.word	0x2400006c
 8003680:	2400007c 	.word	0x2400007c
 8003684:	2400008c 	.word	0x2400008c
 8003688:	2400009c 	.word	0x2400009c

0800368c <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b0a0      	sub	sp, #128	; 0x80
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f007 fa7e 	bl	800ab98 <ai_platform_context_acquire>
 800369c:	67f8      	str	r0, [r7, #124]	; 0x7c

  if ( report && net_ctx )
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d04c      	beq.n	800373e <ai_network_get_info+0xb2>
 80036a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d049      	beq.n	800373e <ai_network_get_info+0xb2>
  {
    ai_network_report r = {
 80036aa:	f107 0308 	add.w	r3, r7, #8
 80036ae:	2274      	movs	r2, #116	; 0x74
 80036b0:	2100      	movs	r1, #0
 80036b2:	4618      	mov	r0, r3
 80036b4:	f009 fdef 	bl	800d296 <memset>
 80036b8:	4b23      	ldr	r3, [pc, #140]	; (8003748 <ai_network_get_info+0xbc>)
 80036ba:	60bb      	str	r3, [r7, #8]
 80036bc:	4b23      	ldr	r3, [pc, #140]	; (800374c <ai_network_get_info+0xc0>)
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	4b23      	ldr	r3, [pc, #140]	; (8003750 <ai_network_get_info+0xc4>)
 80036c2:	613b      	str	r3, [r7, #16]
 80036c4:	4b23      	ldr	r3, [pc, #140]	; (8003754 <ai_network_get_info+0xc8>)
 80036c6:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 80036c8:	f007 f8f2 	bl	800a8b0 <ai_platform_runtime_get_revision>
 80036cc:	4603      	mov	r3, r0
    ai_network_report r = {
 80036ce:	61bb      	str	r3, [r7, #24]
 80036d0:	f007 f93c 	bl	800a94c <ai_platform_runtime_get_version>
 80036d4:	4603      	mov	r3, r0
 80036d6:	61fb      	str	r3, [r7, #28]
 80036d8:	4b1f      	ldr	r3, [pc, #124]	; (8003758 <ai_network_get_info+0xcc>)
 80036da:	623b      	str	r3, [r7, #32]
 80036dc:	2305      	movs	r3, #5
 80036de:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80036e2:	2301      	movs	r3, #1
 80036e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80036e8:	2301      	movs	r3, #1
 80036ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80036ee:	2301      	movs	r3, #1
 80036f0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80036f4:	2303      	movs	r3, #3
 80036f6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80036fa:	f007 f989 	bl	800aa10 <ai_platform_api_get_version>
 80036fe:	4603      	mov	r3, r0
 8003700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003702:	f007 f9e7 	bl	800aad4 <ai_platform_interface_api_get_version>
 8003706:	4603      	mov	r3, r0
 8003708:	633b      	str	r3, [r7, #48]	; 0x30
 800370a:	230a      	movs	r3, #10
 800370c:	637b      	str	r3, [r7, #52]	; 0x34
      .params            = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if ( !ai_platform_api_get_network_report(network, &r) ) return false;
 800370e:	f107 0308 	add.w	r3, r7, #8
 8003712:	4619      	mov	r1, r3
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f007 fb1f 	bl	800ad58 <ai_platform_api_get_network_report>
 800371a:	4603      	mov	r3, r0
 800371c:	f083 0301 	eor.w	r3, r3, #1
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <ai_network_get_info+0x9e>
 8003726:	2300      	movs	r3, #0
 8003728:	e00a      	b.n	8003740 <ai_network_get_info+0xb4>

    *report = r;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f107 0308 	add.w	r3, r7, #8
 8003732:	2274      	movs	r2, #116	; 0x74
 8003734:	4619      	mov	r1, r3
 8003736:	f009 fda3 	bl	800d280 <memcpy>
    return true;
 800373a:	2301      	movs	r3, #1
 800373c:	e000      	b.n	8003740 <ai_network_get_info+0xb4>
  }

  return false;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3780      	adds	r7, #128	; 0x80
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	0800ec88 	.word	0x0800ec88
 800374c:	0800ec90 	.word	0x0800ec90
 8003750:	0800ecb4 	.word	0x0800ecb4
 8003754:	0800ecd0 	.word	0x0800ecd0
 8003758:	0800ece8 	.word	0x0800ece8

0800375c <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f007 fa69 	bl	800ac3c <ai_platform_network_get_error>
 800376a:	4603      	mov	r3, r0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af02      	add	r7, sp, #8
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800377e:	2300      	movs	r3, #0
 8003780:	9301      	str	r3, [sp, #4]
 8003782:	2303      	movs	r3, #3
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	2301      	movs	r3, #1
 8003788:	4a04      	ldr	r2, [pc, #16]	; (800379c <ai_network_create+0x28>)
 800378a:	6839      	ldr	r1, [r7, #0]
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f007 fd71 	bl	800b274 <ai_platform_network_create>
 8003792:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	2400000c 	.word	0x2400000c

080037a0 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f007 fde7 	bl	800b37c <ai_platform_network_destroy>
 80037ae:	4603      	mov	r3, r0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80037c2:	6839      	ldr	r1, [r7, #0]
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f007 fe63 	bl	800b490 <ai_platform_network_init>
 80037ca:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <ai_network_init+0x1e>
 80037d2:	2300      	movs	r3, #0
 80037d4:	e02b      	b.n	800382e <ai_network_init+0x76>

  ai_bool ok = true;
 80037d6:	2301      	movs	r3, #1
 80037d8:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	4619      	mov	r1, r3
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f7ff ff06 	bl	80035f0 <network_configure_weights>
 80037e4:	4603      	mov	r3, r0
 80037e6:	461a      	mov	r2, r3
 80037e8:	7afb      	ldrb	r3, [r7, #11]
 80037ea:	4013      	ands	r3, r2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	bf14      	ite	ne
 80037f0:	2301      	movne	r3, #1
 80037f2:	2300      	moveq	r3, #0
 80037f4:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	3318      	adds	r3, #24
 80037fa:	4619      	mov	r1, r3
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f7ff fecd 	bl	800359c <network_configure_activations>
 8003802:	4603      	mov	r3, r0
 8003804:	461a      	mov	r2, r3
 8003806:	7afb      	ldrb	r3, [r7, #11]
 8003808:	4013      	ands	r3, r2
 800380a:	2b00      	cmp	r3, #0
 800380c:	bf14      	ite	ne
 800380e:	2301      	movne	r3, #1
 8003810:	2300      	moveq	r3, #0
 8003812:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f007 ff23 	bl	800b660 <ai_platform_network_post_init>
 800381a:	4603      	mov	r3, r0
 800381c:	461a      	mov	r2, r3
 800381e:	7afb      	ldrb	r3, [r7, #11]
 8003820:	4013      	ands	r3, r2
 8003822:	2b00      	cmp	r3, #0
 8003824:	bf14      	ite	ne
 8003826:	2301      	movne	r3, #1
 8003828:	2300      	moveq	r3, #0
 800382a:	72fb      	strb	r3, [r7, #11]

  return ok;
 800382c:	7afb      	ldrb	r3, [r7, #11]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b084      	sub	sp, #16
 800383a:	af00      	add	r7, sp, #0
 800383c:	60f8      	str	r0, [r7, #12]
 800383e:	60b9      	str	r1, [r7, #8]
 8003840:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f007 ffb6 	bl	800b7b8 <ai_platform_network_process>
 800384c:	4603      	mov	r3, r0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <ai_network_forward>:

AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	6039      	str	r1, [r7, #0]
  return ai_platform_network_process(network, input, NULL);
 8003860:	2200      	movs	r2, #0
 8003862:	6839      	ldr	r1, [r7, #0]
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f007 ffa7 	bl	800b7b8 <ai_platform_network_process>
 800386a:	4603      	mov	r3, r0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <ai_network_data_weights_get>:
#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
    0xa6, 0x81, 0xbf, 0xc1, 0x7c, 0x09, 0x3f, 0x0d, 0x54,
    0xd2, 0xbf, 0xbf, 0x88, 0x0f, 0xc0, 0xd1, 0x06, 0xad,
    0xbf, 0xe3, 0xc5, 0x8c, 0xbf, 0xdc, 0x84, 0xa2, 0x3f
  };

  return AI_HANDLE_PTR(s_network_weights);
 8003878:	4b02      	ldr	r3, [pc, #8]	; (8003884 <ai_network_data_weights_get+0x10>)

}
 800387a:	4618      	mov	r0, r3
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	0800ed78 	.word	0x0800ed78

08003888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800388e:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <HAL_MspInit+0x30>)
 8003890:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003894:	4a08      	ldr	r2, [pc, #32]	; (80038b8 <HAL_MspInit+0x30>)
 8003896:	f043 0302 	orr.w	r3, r3, #2
 800389a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800389e:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <HAL_MspInit+0x30>)
 80038a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	607b      	str	r3, [r7, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	58024400 	.word	0x58024400

080038bc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a0b      	ldr	r2, [pc, #44]	; (80038f8 <HAL_CRC_MspInit+0x3c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d10e      	bne.n	80038ec <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80038ce:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <HAL_CRC_MspInit+0x40>)
 80038d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038d4:	4a09      	ldr	r2, [pc, #36]	; (80038fc <HAL_CRC_MspInit+0x40>)
 80038d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038de:	4b07      	ldr	r3, [pc, #28]	; (80038fc <HAL_CRC_MspInit+0x40>)
 80038e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80038ec:	bf00      	nop
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	58024c00 	.word	0x58024c00
 80038fc:	58024400 	.word	0x58024400

08003900 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08e      	sub	sp, #56	; 0x38
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	605a      	str	r2, [r3, #4]
 8003912:	609a      	str	r2, [r3, #8]
 8003914:	60da      	str	r2, [r3, #12]
 8003916:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a59      	ldr	r2, [pc, #356]	; (8003a84 <HAL_ETH_MspInit+0x184>)
 800391e:	4293      	cmp	r3, r2
 8003920:	f040 80ab 	bne.w	8003a7a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003924:	4b58      	ldr	r3, [pc, #352]	; (8003a88 <HAL_ETH_MspInit+0x188>)
 8003926:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800392a:	4a57      	ldr	r2, [pc, #348]	; (8003a88 <HAL_ETH_MspInit+0x188>)
 800392c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003930:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003934:	4b54      	ldr	r3, [pc, #336]	; (8003a88 <HAL_ETH_MspInit+0x188>)
 8003936:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800393a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800393e:	623b      	str	r3, [r7, #32]
 8003940:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8003942:	4b51      	ldr	r3, [pc, #324]	; (8003a88 <HAL_ETH_MspInit+0x188>)
 8003944:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003948:	4a4f      	ldr	r2, [pc, #316]	; (8003a88 <HAL_ETH_MspInit+0x188>)
 800394a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800394e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003952:	4b4d      	ldr	r3, [pc, #308]	; (8003a88 <HAL_ETH_MspInit+0x188>)
 8003954:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800395c:	61fb      	str	r3, [r7, #28]
 800395e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8003960:	4b49      	ldr	r3, [pc, #292]	; (8003a88 <HAL_ETH_MspInit+0x188>)
 8003962:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003966:	4a48      	ldr	r2, [pc, #288]	; (8003a88 <HAL_ETH_MspInit+0x188>)
 8003968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800396c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003970:	4b45      	ldr	r3, [pc, #276]	; (8003a88 <HAL_ETH_MspInit+0x188>)
 8003972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397a:	61bb      	str	r3, [r7, #24]
 800397c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800397e:	4b42      	ldr	r3, [pc, #264]	; (8003a88 <HAL_ETH_MspInit+0x188>)
 8003980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003984:	4a40      	ldr	r2, [pc, #256]	; (8003a88 <HAL_ETH_MspInit+0x188>)
 8003986:	f043 0304 	orr.w	r3, r3, #4
 800398a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800398e:	4b3e      	ldr	r3, [pc, #248]	; (8003a88 <HAL_ETH_MspInit+0x188>)
 8003990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800399c:	4b3a      	ldr	r3, [pc, #232]	; (8003a88 <HAL_ETH_MspInit+0x188>)
 800399e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039a2:	4a39      	ldr	r2, [pc, #228]	; (8003a88 <HAL_ETH_MspInit+0x188>)
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039ac:	4b36      	ldr	r3, [pc, #216]	; (8003a88 <HAL_ETH_MspInit+0x188>)
 80039ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	613b      	str	r3, [r7, #16]
 80039b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ba:	4b33      	ldr	r3, [pc, #204]	; (8003a88 <HAL_ETH_MspInit+0x188>)
 80039bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039c0:	4a31      	ldr	r2, [pc, #196]	; (8003a88 <HAL_ETH_MspInit+0x188>)
 80039c2:	f043 0302 	orr.w	r3, r3, #2
 80039c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039ca:	4b2f      	ldr	r3, [pc, #188]	; (8003a88 <HAL_ETH_MspInit+0x188>)
 80039cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80039d8:	4b2b      	ldr	r3, [pc, #172]	; (8003a88 <HAL_ETH_MspInit+0x188>)
 80039da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039de:	4a2a      	ldr	r2, [pc, #168]	; (8003a88 <HAL_ETH_MspInit+0x188>)
 80039e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039e8:	4b27      	ldr	r3, [pc, #156]	; (8003a88 <HAL_ETH_MspInit+0x188>)
 80039ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f2:	60bb      	str	r3, [r7, #8]
 80039f4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80039f6:	2332      	movs	r3, #50	; 0x32
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fa:	2302      	movs	r3, #2
 80039fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a02:	2300      	movs	r3, #0
 8003a04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a06:	230b      	movs	r3, #11
 8003a08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a0e:	4619      	mov	r1, r3
 8003a10:	481e      	ldr	r0, [pc, #120]	; (8003a8c <HAL_ETH_MspInit+0x18c>)
 8003a12:	f001 f8c3 	bl	8004b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003a16:	2386      	movs	r3, #134	; 0x86
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a22:	2300      	movs	r3, #0
 8003a24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a26:	230b      	movs	r3, #11
 8003a28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4817      	ldr	r0, [pc, #92]	; (8003a90 <HAL_ETH_MspInit+0x190>)
 8003a32:	f001 f8b3 	bl	8004b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003a36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a44:	2300      	movs	r3, #0
 8003a46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a48:	230b      	movs	r3, #11
 8003a4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a50:	4619      	mov	r1, r3
 8003a52:	4810      	ldr	r0, [pc, #64]	; (8003a94 <HAL_ETH_MspInit+0x194>)
 8003a54:	f001 f8a2 	bl	8004b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003a58:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a66:	2300      	movs	r3, #0
 8003a68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a6a:	230b      	movs	r3, #11
 8003a6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a72:	4619      	mov	r1, r3
 8003a74:	4808      	ldr	r0, [pc, #32]	; (8003a98 <HAL_ETH_MspInit+0x198>)
 8003a76:	f001 f891 	bl	8004b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8003a7a:	bf00      	nop
 8003a7c:	3738      	adds	r7, #56	; 0x38
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40028000 	.word	0x40028000
 8003a88:	58024400 	.word	0x58024400
 8003a8c:	58020800 	.word	0x58020800
 8003a90:	58020000 	.word	0x58020000
 8003a94:	58020400 	.word	0x58020400
 8003a98:	58021800 	.word	0x58021800

08003a9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08a      	sub	sp, #40	; 0x28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa4:	f107 0314 	add.w	r3, r7, #20
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	605a      	str	r2, [r3, #4]
 8003aae:	609a      	str	r2, [r3, #8]
 8003ab0:	60da      	str	r2, [r3, #12]
 8003ab2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a1a      	ldr	r2, [pc, #104]	; (8003b24 <HAL_UART_MspInit+0x88>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d12e      	bne.n	8003b1c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003abe:	4b1a      	ldr	r3, [pc, #104]	; (8003b28 <HAL_UART_MspInit+0x8c>)
 8003ac0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ac4:	4a18      	ldr	r2, [pc, #96]	; (8003b28 <HAL_UART_MspInit+0x8c>)
 8003ac6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ace:	4b16      	ldr	r3, [pc, #88]	; (8003b28 <HAL_UART_MspInit+0x8c>)
 8003ad0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ad4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003adc:	4b12      	ldr	r3, [pc, #72]	; (8003b28 <HAL_UART_MspInit+0x8c>)
 8003ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ae2:	4a11      	ldr	r2, [pc, #68]	; (8003b28 <HAL_UART_MspInit+0x8c>)
 8003ae4:	f043 0308 	orr.w	r3, r3, #8
 8003ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003aec:	4b0e      	ldr	r3, [pc, #56]	; (8003b28 <HAL_UART_MspInit+0x8c>)
 8003aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003afa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b00:	2302      	movs	r3, #2
 8003b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b04:	2300      	movs	r3, #0
 8003b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003b0c:	2307      	movs	r3, #7
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b10:	f107 0314 	add.w	r3, r7, #20
 8003b14:	4619      	mov	r1, r3
 8003b16:	4805      	ldr	r0, [pc, #20]	; (8003b2c <HAL_UART_MspInit+0x90>)
 8003b18:	f001 f840 	bl	8004b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003b1c:	bf00      	nop
 8003b1e:	3728      	adds	r7, #40	; 0x28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40004800 	.word	0x40004800
 8003b28:	58024400 	.word	0x58024400
 8003b2c:	58020c00 	.word	0x58020c00

08003b30 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08a      	sub	sp, #40	; 0x28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b38:	f107 0314 	add.w	r3, r7, #20
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	605a      	str	r2, [r3, #4]
 8003b42:	609a      	str	r2, [r3, #8]
 8003b44:	60da      	str	r2, [r3, #12]
 8003b46:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a21      	ldr	r2, [pc, #132]	; (8003bd4 <HAL_PCD_MspInit+0xa4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d13b      	bne.n	8003bca <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b52:	4b21      	ldr	r3, [pc, #132]	; (8003bd8 <HAL_PCD_MspInit+0xa8>)
 8003b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b58:	4a1f      	ldr	r2, [pc, #124]	; (8003bd8 <HAL_PCD_MspInit+0xa8>)
 8003b5a:	f043 0301 	orr.w	r3, r3, #1
 8003b5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b62:	4b1d      	ldr	r3, [pc, #116]	; (8003bd8 <HAL_PCD_MspInit+0xa8>)
 8003b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003b70:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b76:	2302      	movs	r3, #2
 8003b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8003b82:	230a      	movs	r3, #10
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b86:	f107 0314 	add.w	r3, r7, #20
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4813      	ldr	r0, [pc, #76]	; (8003bdc <HAL_PCD_MspInit+0xac>)
 8003b8e:	f001 f805 	bl	8004b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003b92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003ba0:	f107 0314 	add.w	r3, r7, #20
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	480d      	ldr	r0, [pc, #52]	; (8003bdc <HAL_PCD_MspInit+0xac>)
 8003ba8:	f000 fff8 	bl	8004b9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003bac:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <HAL_PCD_MspInit+0xa8>)
 8003bae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003bb2:	4a09      	ldr	r2, [pc, #36]	; (8003bd8 <HAL_PCD_MspInit+0xa8>)
 8003bb4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003bb8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <HAL_PCD_MspInit+0xa8>)
 8003bbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003bc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003bca:	bf00      	nop
 8003bcc:	3728      	adds	r7, #40	; 0x28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40080000 	.word	0x40080000
 8003bd8:	58024400 	.word	0x58024400
 8003bdc:	58020000 	.word	0x58020000

08003be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003be4:	bf00      	nop
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bf2:	e7fe      	b.n	8003bf2 <HardFault_Handler+0x4>

08003bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bf8:	e7fe      	b.n	8003bf8 <MemManage_Handler+0x4>

08003bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bfe:	e7fe      	b.n	8003bfe <BusFault_Handler+0x4>

08003c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c04:	e7fe      	b.n	8003c04 <UsageFault_Handler+0x4>

08003c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c06:	b480      	push	{r7}
 8003c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c0a:	bf00      	nop
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c18:	bf00      	nop
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c22:	b480      	push	{r7}
 8003c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c26:	bf00      	nop
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c34:	f000 f954 	bl	8003ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c38:	bf00      	nop
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c48:	2300      	movs	r3, #0
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	e00a      	b.n	8003c64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c4e:	f3af 8000 	nop.w
 8003c52:	4601      	mov	r1, r0
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	60ba      	str	r2, [r7, #8]
 8003c5a:	b2ca      	uxtb	r2, r1
 8003c5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	3301      	adds	r3, #1
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	dbf0      	blt.n	8003c4e <_read+0x12>
	}

return len;
 8003c6c:	687b      	ldr	r3, [r7, #4]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
	return -1;
 8003c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
 8003c96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c9e:	605a      	str	r2, [r3, #4]
	return 0;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <_isatty>:

int _isatty(int file)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
	return 1;
 8003cb6:	2301      	movs	r3, #1
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
	return 0;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
	...

08003ce0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003ce8:	4b11      	ldr	r3, [pc, #68]	; (8003d30 <_sbrk+0x50>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d102      	bne.n	8003cf6 <_sbrk+0x16>
		heap_end = &end;
 8003cf0:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <_sbrk+0x50>)
 8003cf2:	4a10      	ldr	r2, [pc, #64]	; (8003d34 <_sbrk+0x54>)
 8003cf4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003cf6:	4b0e      	ldr	r3, [pc, #56]	; (8003d30 <_sbrk+0x50>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003cfc:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <_sbrk+0x50>)
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4413      	add	r3, r2
 8003d04:	466a      	mov	r2, sp
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d907      	bls.n	8003d1a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003d0a:	f009 f8f3 	bl	800cef4 <__errno>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	230c      	movs	r3, #12
 8003d12:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d18:	e006      	b.n	8003d28 <_sbrk+0x48>
	}

	heap_end += incr;
 8003d1a:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <_sbrk+0x50>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4413      	add	r3, r2
 8003d22:	4a03      	ldr	r2, [pc, #12]	; (8003d30 <_sbrk+0x50>)
 8003d24:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003d26:	68fb      	ldr	r3, [r7, #12]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	24000644 	.word	0x24000644
 8003d34:	24000bc0 	.word	0x24000bc0

08003d38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003d3c:	4b29      	ldr	r3, [pc, #164]	; (8003de4 <SystemInit+0xac>)
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d42:	4a28      	ldr	r2, [pc, #160]	; (8003de4 <SystemInit+0xac>)
 8003d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003d4c:	4b26      	ldr	r3, [pc, #152]	; (8003de8 <SystemInit+0xb0>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a25      	ldr	r2, [pc, #148]	; (8003de8 <SystemInit+0xb0>)
 8003d52:	f043 0301 	orr.w	r3, r3, #1
 8003d56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003d58:	4b23      	ldr	r3, [pc, #140]	; (8003de8 <SystemInit+0xb0>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003d5e:	4b22      	ldr	r3, [pc, #136]	; (8003de8 <SystemInit+0xb0>)
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	4921      	ldr	r1, [pc, #132]	; (8003de8 <SystemInit+0xb0>)
 8003d64:	4b21      	ldr	r3, [pc, #132]	; (8003dec <SystemInit+0xb4>)
 8003d66:	4013      	ands	r3, r2
 8003d68:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003d6a:	4b1f      	ldr	r3, [pc, #124]	; (8003de8 <SystemInit+0xb0>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003d70:	4b1d      	ldr	r3, [pc, #116]	; (8003de8 <SystemInit+0xb0>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003d76:	4b1c      	ldr	r3, [pc, #112]	; (8003de8 <SystemInit+0xb0>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8003d7c:	4b1a      	ldr	r3, [pc, #104]	; (8003de8 <SystemInit+0xb0>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8003d82:	4b19      	ldr	r3, [pc, #100]	; (8003de8 <SystemInit+0xb0>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8003d88:	4b17      	ldr	r3, [pc, #92]	; (8003de8 <SystemInit+0xb0>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003d8e:	4b16      	ldr	r3, [pc, #88]	; (8003de8 <SystemInit+0xb0>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8003d94:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <SystemInit+0xb0>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003d9a:	4b13      	ldr	r3, [pc, #76]	; (8003de8 <SystemInit+0xb0>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8003da0:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <SystemInit+0xb0>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003da6:	4b10      	ldr	r3, [pc, #64]	; (8003de8 <SystemInit+0xb0>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003dac:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <SystemInit+0xb0>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a0d      	ldr	r2, [pc, #52]	; (8003de8 <SystemInit+0xb0>)
 8003db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003db6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003db8:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <SystemInit+0xb0>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003dbe:	4b0c      	ldr	r3, [pc, #48]	; (8003df0 <SystemInit+0xb8>)
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <SystemInit+0xbc>)
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dca:	d202      	bcs.n	8003dd2 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003dcc:	4b0a      	ldr	r3, [pc, #40]	; (8003df8 <SystemInit+0xc0>)
 8003dce:	2201      	movs	r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003dd2:	4b04      	ldr	r3, [pc, #16]	; (8003de4 <SystemInit+0xac>)
 8003dd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003dd8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003dda:	bf00      	nop
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	e000ed00 	.word	0xe000ed00
 8003de8:	58024400 	.word	0x58024400
 8003dec:	eaf6ed7f 	.word	0xeaf6ed7f
 8003df0:	5c001000 	.word	0x5c001000
 8003df4:	ffff0000 	.word	0xffff0000
 8003df8:	51008108 	.word	0x51008108

08003dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e02:	2003      	movs	r0, #3
 8003e04:	f000 f998 	bl	8004138 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e08:	f001 ffb2 	bl	8005d70 <HAL_RCC_GetSysClockFreq>
 8003e0c:	4601      	mov	r1, r0
 8003e0e:	4b15      	ldr	r3, [pc, #84]	; (8003e64 <HAL_Init+0x68>)
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	0a1b      	lsrs	r3, r3, #8
 8003e14:	f003 030f 	and.w	r3, r3, #15
 8003e18:	4a13      	ldr	r2, [pc, #76]	; (8003e68 <HAL_Init+0x6c>)
 8003e1a:	5cd3      	ldrb	r3, [r2, r3]
 8003e1c:	f003 031f 	and.w	r3, r3, #31
 8003e20:	fa21 f303 	lsr.w	r3, r1, r3
 8003e24:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e26:	4b0f      	ldr	r3, [pc, #60]	; (8003e64 <HAL_Init+0x68>)
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	4a0e      	ldr	r2, [pc, #56]	; (8003e68 <HAL_Init+0x6c>)
 8003e30:	5cd3      	ldrb	r3, [r2, r3]
 8003e32:	f003 031f 	and.w	r3, r3, #31
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3c:	4a0b      	ldr	r2, [pc, #44]	; (8003e6c <HAL_Init+0x70>)
 8003e3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e40:	4a0b      	ldr	r2, [pc, #44]	; (8003e70 <HAL_Init+0x74>)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e46:	2000      	movs	r0, #0
 8003e48:	f000 f814 	bl	8003e74 <HAL_InitTick>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e002      	b.n	8003e5c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003e56:	f7ff fd17 	bl	8003888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	58024400 	.word	0x58024400
 8003e68:	0800edb8 	.word	0x0800edb8
 8003e6c:	2400036c 	.word	0x2400036c
 8003e70:	24000368 	.word	0x24000368

08003e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003e7c:	4b15      	ldr	r3, [pc, #84]	; (8003ed4 <HAL_InitTick+0x60>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e021      	b.n	8003ecc <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003e88:	4b13      	ldr	r3, [pc, #76]	; (8003ed8 <HAL_InitTick+0x64>)
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <HAL_InitTick+0x60>)
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	4619      	mov	r1, r3
 8003e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 f96f 	bl	8004182 <HAL_SYSTICK_Config>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e00e      	b.n	8003ecc <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b0f      	cmp	r3, #15
 8003eb2:	d80a      	bhi.n	8003eca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ebc:	f000 f947 	bl	800414e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ec0:	4a06      	ldr	r2, [pc, #24]	; (8003edc <HAL_InitTick+0x68>)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	e000      	b.n	8003ecc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	24000374 	.word	0x24000374
 8003ed8:	24000368 	.word	0x24000368
 8003edc:	24000370 	.word	0x24000370

08003ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ee4:	4b06      	ldr	r3, [pc, #24]	; (8003f00 <HAL_IncTick+0x20>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <HAL_IncTick+0x24>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4413      	add	r3, r2
 8003ef0:	4a04      	ldr	r2, [pc, #16]	; (8003f04 <HAL_IncTick+0x24>)
 8003ef2:	6013      	str	r3, [r2, #0]
}
 8003ef4:	bf00      	nop
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	24000374 	.word	0x24000374
 8003f04:	24000bb4 	.word	0x24000bb4

08003f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8003f0c:	4b03      	ldr	r3, [pc, #12]	; (8003f1c <HAL_GetTick+0x14>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	24000bb4 	.word	0x24000bb4

08003f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f28:	f7ff ffee 	bl	8003f08 <HAL_GetTick>
 8003f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f38:	d005      	beq.n	8003f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f3a:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <HAL_Delay+0x40>)
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4413      	add	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f46:	bf00      	nop
 8003f48:	f7ff ffde 	bl	8003f08 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d8f7      	bhi.n	8003f48 <HAL_Delay+0x28>
  {
  }
}
 8003f58:	bf00      	nop
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	24000374 	.word	0x24000374

08003f64 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
 return __STM32H7xx_HAL_VERSION;
 8003f68:	f04f 7384 	mov.w	r3, #17301504	; 0x1080000
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
	...

08003f78 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003f7c:	4b03      	ldr	r3, [pc, #12]	; (8003f8c <HAL_GetREVID+0x14>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	0c1b      	lsrs	r3, r3, #16
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	5c001000 	.word	0x5c001000

08003f90 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8003f94:	4b04      	ldr	r3, [pc, #16]	; (8003fa8 <HAL_GetDEVID+0x18>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	5c001000 	.word	0x5c001000

08003fac <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003fb4:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003fbc:	4904      	ldr	r1, [pc, #16]	; (8003fd0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	604b      	str	r3, [r1, #4]
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	58000400 	.word	0x58000400

08003fd4 <__NVIC_SetPriorityGrouping>:
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <__NVIC_SetPriorityGrouping+0x40>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ffc:	4b06      	ldr	r3, [pc, #24]	; (8004018 <__NVIC_SetPriorityGrouping+0x44>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004002:	4a04      	ldr	r2, [pc, #16]	; (8004014 <__NVIC_SetPriorityGrouping+0x40>)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	60d3      	str	r3, [r2, #12]
}
 8004008:	bf00      	nop
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	e000ed00 	.word	0xe000ed00
 8004018:	05fa0000 	.word	0x05fa0000

0800401c <__NVIC_GetPriorityGrouping>:
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004020:	4b04      	ldr	r3, [pc, #16]	; (8004034 <__NVIC_GetPriorityGrouping+0x18>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	0a1b      	lsrs	r3, r3, #8
 8004026:	f003 0307 	and.w	r3, r3, #7
}
 800402a:	4618      	mov	r0, r3
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	e000ed00 	.word	0xe000ed00

08004038 <__NVIC_SetPriority>:
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	4603      	mov	r3, r0
 8004040:	6039      	str	r1, [r7, #0]
 8004042:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004048:	2b00      	cmp	r3, #0
 800404a:	db0a      	blt.n	8004062 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	b2da      	uxtb	r2, r3
 8004050:	490c      	ldr	r1, [pc, #48]	; (8004084 <__NVIC_SetPriority+0x4c>)
 8004052:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004056:	0112      	lsls	r2, r2, #4
 8004058:	b2d2      	uxtb	r2, r2
 800405a:	440b      	add	r3, r1
 800405c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004060:	e00a      	b.n	8004078 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	b2da      	uxtb	r2, r3
 8004066:	4908      	ldr	r1, [pc, #32]	; (8004088 <__NVIC_SetPriority+0x50>)
 8004068:	88fb      	ldrh	r3, [r7, #6]
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	3b04      	subs	r3, #4
 8004070:	0112      	lsls	r2, r2, #4
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	440b      	add	r3, r1
 8004076:	761a      	strb	r2, [r3, #24]
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	e000e100 	.word	0xe000e100
 8004088:	e000ed00 	.word	0xe000ed00

0800408c <NVIC_EncodePriority>:
{
 800408c:	b480      	push	{r7}
 800408e:	b089      	sub	sp, #36	; 0x24
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	f1c3 0307 	rsb	r3, r3, #7
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	bf28      	it	cs
 80040aa:	2304      	movcs	r3, #4
 80040ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	3304      	adds	r3, #4
 80040b2:	2b06      	cmp	r3, #6
 80040b4:	d902      	bls.n	80040bc <NVIC_EncodePriority+0x30>
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	3b03      	subs	r3, #3
 80040ba:	e000      	b.n	80040be <NVIC_EncodePriority+0x32>
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	43da      	mvns	r2, r3
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	401a      	ands	r2, r3
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	fa01 f303 	lsl.w	r3, r1, r3
 80040de:	43d9      	mvns	r1, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e4:	4313      	orrs	r3, r2
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3724      	adds	r7, #36	; 0x24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
	...

080040f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3b01      	subs	r3, #1
 8004100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004104:	d301      	bcc.n	800410a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004106:	2301      	movs	r3, #1
 8004108:	e00f      	b.n	800412a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800410a:	4a0a      	ldr	r2, [pc, #40]	; (8004134 <SysTick_Config+0x40>)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3b01      	subs	r3, #1
 8004110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004112:	210f      	movs	r1, #15
 8004114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004118:	f7ff ff8e 	bl	8004038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800411c:	4b05      	ldr	r3, [pc, #20]	; (8004134 <SysTick_Config+0x40>)
 800411e:	2200      	movs	r2, #0
 8004120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004122:	4b04      	ldr	r3, [pc, #16]	; (8004134 <SysTick_Config+0x40>)
 8004124:	2207      	movs	r2, #7
 8004126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	e000e010 	.word	0xe000e010

08004138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff ff47 	bl	8003fd4 <__NVIC_SetPriorityGrouping>
}
 8004146:	bf00      	nop
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b086      	sub	sp, #24
 8004152:	af00      	add	r7, sp, #0
 8004154:	4603      	mov	r3, r0
 8004156:	60b9      	str	r1, [r7, #8]
 8004158:	607a      	str	r2, [r7, #4]
 800415a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800415c:	f7ff ff5e 	bl	800401c <__NVIC_GetPriorityGrouping>
 8004160:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	68b9      	ldr	r1, [r7, #8]
 8004166:	6978      	ldr	r0, [r7, #20]
 8004168:	f7ff ff90 	bl	800408c <NVIC_EncodePriority>
 800416c:	4602      	mov	r2, r0
 800416e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004172:	4611      	mov	r1, r2
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff ff5f 	bl	8004038 <__NVIC_SetPriority>
}
 800417a:	bf00      	nop
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b082      	sub	sp, #8
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7ff ffb2 	bl	80040f4 <SysTick_Config>
 8004190:	4603      	mov	r3, r0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e054      	b.n	8004258 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	7f5b      	ldrb	r3, [r3, #29]
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d105      	bne.n	80041c4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7ff fb7c 	bl	80038bc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	791b      	ldrb	r3, [r3, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10c      	bne.n	80041ec <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a22      	ldr	r2, [pc, #136]	; (8004260 <HAL_CRC_Init+0xc4>)
 80041d8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0218 	bic.w	r2, r2, #24
 80041e8:	609a      	str	r2, [r3, #8]
 80041ea:	e00c      	b.n	8004206 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6899      	ldr	r1, [r3, #8]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	461a      	mov	r2, r3
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f834 	bl	8004264 <HAL_CRCEx_Polynomial_Set>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e028      	b.n	8004258 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	795b      	ldrb	r3, [r3, #5]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d105      	bne.n	800421a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004216:	611a      	str	r2, [r3, #16]
 8004218:	e004      	b.n	8004224 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6912      	ldr	r2, [r2, #16]
 8004222:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695a      	ldr	r2, [r3, #20]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	699a      	ldr	r2, [r3, #24]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	04c11db7 	.word	0x04c11db7

08004264 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004270:	2300      	movs	r3, #0
 8004272:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004274:	231f      	movs	r3, #31
 8004276:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004278:	bf00      	nop
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1e5a      	subs	r2, r3, #1
 800427e:	613a      	str	r2, [r7, #16]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d009      	beq.n	8004298 <HAL_CRCEx_Polynomial_Set+0x34>
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f003 031f 	and.w	r3, r3, #31
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	fa22 f303 	lsr.w	r3, r2, r3
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0f0      	beq.n	800427a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b18      	cmp	r3, #24
 800429c:	d846      	bhi.n	800432c <HAL_CRCEx_Polynomial_Set+0xc8>
 800429e:	a201      	add	r2, pc, #4	; (adr r2, 80042a4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80042a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a4:	08004333 	.word	0x08004333
 80042a8:	0800432d 	.word	0x0800432d
 80042ac:	0800432d 	.word	0x0800432d
 80042b0:	0800432d 	.word	0x0800432d
 80042b4:	0800432d 	.word	0x0800432d
 80042b8:	0800432d 	.word	0x0800432d
 80042bc:	0800432d 	.word	0x0800432d
 80042c0:	0800432d 	.word	0x0800432d
 80042c4:	08004321 	.word	0x08004321
 80042c8:	0800432d 	.word	0x0800432d
 80042cc:	0800432d 	.word	0x0800432d
 80042d0:	0800432d 	.word	0x0800432d
 80042d4:	0800432d 	.word	0x0800432d
 80042d8:	0800432d 	.word	0x0800432d
 80042dc:	0800432d 	.word	0x0800432d
 80042e0:	0800432d 	.word	0x0800432d
 80042e4:	08004315 	.word	0x08004315
 80042e8:	0800432d 	.word	0x0800432d
 80042ec:	0800432d 	.word	0x0800432d
 80042f0:	0800432d 	.word	0x0800432d
 80042f4:	0800432d 	.word	0x0800432d
 80042f8:	0800432d 	.word	0x0800432d
 80042fc:	0800432d 	.word	0x0800432d
 8004300:	0800432d 	.word	0x0800432d
 8004304:	08004309 	.word	0x08004309
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	2b06      	cmp	r3, #6
 800430c:	d913      	bls.n	8004336 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004312:	e010      	b.n	8004336 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	2b07      	cmp	r3, #7
 8004318:	d90f      	bls.n	800433a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800431e:	e00c      	b.n	800433a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	2b0f      	cmp	r3, #15
 8004324:	d90b      	bls.n	800433e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800432a:	e008      	b.n	800433e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	75fb      	strb	r3, [r7, #23]
      break;
 8004330:	e006      	b.n	8004340 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004332:	bf00      	nop
 8004334:	e004      	b.n	8004340 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004336:	bf00      	nop
 8004338:	e002      	b.n	8004340 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800433a:	bf00      	nop
 800433c:	e000      	b.n	8004340 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800433e:	bf00      	nop
  }
  if (status == HAL_OK)
 8004340:	7dfb      	ldrb	r3, [r7, #23]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10d      	bne.n	8004362 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f023 0118 	bic.w	r1, r3, #24
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	430a      	orrs	r2, r1
 8004360:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004362:	7dfb      	ldrb	r3, [r7, #23]
}
 8004364:	4618      	mov	r0, r3
 8004366:	371c      	adds	r7, #28
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e0c6      	b.n	8004510 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004386:	2b00      	cmp	r3, #0
 8004388:	d102      	bne.n	8004390 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff fab8 	bl	8003900 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2223      	movs	r2, #35	; 0x23
 8004394:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004396:	4b60      	ldr	r3, [pc, #384]	; (8004518 <HAL_ETH_Init+0x1a8>)
 8004398:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800439c:	4a5e      	ldr	r2, [pc, #376]	; (8004518 <HAL_ETH_Init+0x1a8>)
 800439e:	f043 0302 	orr.w	r3, r3, #2
 80043a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80043a6:	4b5c      	ldr	r3, [pc, #368]	; (8004518 <HAL_ETH_Init+0x1a8>)
 80043a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	60bb      	str	r3, [r7, #8]
 80043b2:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	7a1b      	ldrb	r3, [r3, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d103      	bne.n	80043c4 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80043bc:	2000      	movs	r0, #0
 80043be:	f7ff fdf5 	bl	8003fac <HAL_SYSCFG_ETHInterfaceSelect>
 80043c2:	e003      	b.n	80043cc <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80043c4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80043c8:	f7ff fdf0 	bl	8003fac <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0201 	orr.w	r2, r2, #1
 80043de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043e4:	f7ff fd90 	bl	8003f08 <HAL_GetTick>
 80043e8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80043ea:	e00f      	b.n	800440c <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80043ec:	f7ff fd8c 	bl	8003f08 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80043fa:	d907      	bls.n	800440c <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2204      	movs	r2, #4
 8004400:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	22e0      	movs	r2, #224	; 0xe0
 8004406:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e081      	b.n	8004510 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1e6      	bne.n	80043ec <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 fac0 	bl	80049a4 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004424:	f001 fe16 	bl	8006054 <HAL_RCC_GetHCLKFreq>
 8004428:	4602      	mov	r2, r0
 800442a:	4b3c      	ldr	r3, [pc, #240]	; (800451c <HAL_ETH_Init+0x1ac>)
 800442c:	fba3 2302 	umull	r2, r3, r3, r2
 8004430:	0c9a      	lsrs	r2, r3, #18
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3a01      	subs	r2, #1
 8004438:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 fa13 	bl	8004868 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004458:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800445c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d007      	beq.n	800447a <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	22e0      	movs	r2, #224	; 0xe0
 8004474:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e04a      	b.n	8004510 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	f241 1308 	movw	r3, #4360	; 0x1108
 8004482:	4413      	add	r3, r2
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	4b26      	ldr	r3, [pc, #152]	; (8004520 <HAL_ETH_Init+0x1b0>)
 8004488:	4013      	ands	r3, r2
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6952      	ldr	r2, [r2, #20]
 800448e:	0052      	lsls	r2, r2, #1
 8004490:	6879      	ldr	r1, [r7, #4]
 8004492:	6809      	ldr	r1, [r1, #0]
 8004494:	431a      	orrs	r2, r3
 8004496:	f241 1308 	movw	r3, #4360	; 0x1108
 800449a:	440b      	add	r3, r1
 800449c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 fad8 	bl	8004a54 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 fb1c 	bl	8004ae2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	3305      	adds	r3, #5
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	021a      	lsls	r2, r3, #8
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	3304      	adds	r3, #4
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	4619      	mov	r1, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	3303      	adds	r3, #3
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	061a      	lsls	r2, r3, #24
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	3302      	adds	r3, #2
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	041b      	lsls	r3, r3, #16
 80044dc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	3301      	adds	r3, #1
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80044e8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80044f6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80044f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2210      	movs	r2, #16
 8004506:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2210      	movs	r2, #16
 800450c:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	58024400 	.word	0x58024400
 800451c:	431bde83 	.word	0x431bde83
 8004520:	ffff8001 	.word	0xffff8001

08004524 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8004536:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	791b      	ldrb	r3, [r3, #4]
 800453c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800453e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	7b1b      	ldrb	r3, [r3, #12]
 8004544:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004546:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	7b5b      	ldrb	r3, [r3, #13]
 800454c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800454e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	7b9b      	ldrb	r3, [r3, #14]
 8004554:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004556:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	7bdb      	ldrb	r3, [r3, #15]
 800455c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800455e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	7c12      	ldrb	r2, [r2, #16]
 8004564:	2a00      	cmp	r2, #0
 8004566:	d102      	bne.n	800456e <ETH_SetMACConfig+0x4a>
 8004568:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800456c:	e000      	b.n	8004570 <ETH_SetMACConfig+0x4c>
 800456e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004570:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	7c52      	ldrb	r2, [r2, #17]
 8004576:	2a00      	cmp	r2, #0
 8004578:	d102      	bne.n	8004580 <ETH_SetMACConfig+0x5c>
 800457a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800457e:	e000      	b.n	8004582 <ETH_SetMACConfig+0x5e>
 8004580:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004582:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	7c9b      	ldrb	r3, [r3, #18]
 8004588:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800458a:	431a      	orrs	r2, r3
                                macconf->Speed |
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004590:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8004596:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	7f1b      	ldrb	r3, [r3, #28]
 800459c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800459e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	7f5b      	ldrb	r3, [r3, #29]
 80045a4:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80045a6:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	7f92      	ldrb	r2, [r2, #30]
 80045ac:	2a00      	cmp	r2, #0
 80045ae:	d102      	bne.n	80045b6 <ETH_SetMACConfig+0x92>
 80045b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045b4:	e000      	b.n	80045b8 <ETH_SetMACConfig+0x94>
 80045b6:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80045b8:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	7fdb      	ldrb	r3, [r3, #31]
 80045be:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80045c0:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80045c8:	2a00      	cmp	r2, #0
 80045ca:	d102      	bne.n	80045d2 <ETH_SetMACConfig+0xae>
 80045cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045d0:	e000      	b.n	80045d4 <ETH_SetMACConfig+0xb0>
 80045d2:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80045d4:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80045da:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045e2:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80045e4:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	4b56      	ldr	r3, [pc, #344]	; (8004750 <ETH_SetMACConfig+0x22c>)
 80045f6:	4013      	ands	r3, r2
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6812      	ldr	r2, [r2, #0]
 80045fc:	68f9      	ldr	r1, [r7, #12]
 80045fe:	430b      	orrs	r3, r1
 8004600:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004606:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800460e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004610:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004618:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800461a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004622:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004624:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800462c:	2a00      	cmp	r2, #0
 800462e:	d102      	bne.n	8004636 <ETH_SetMACConfig+0x112>
 8004630:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004634:	e000      	b.n	8004638 <ETH_SetMACConfig+0x114>
 8004636:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004638:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800463e:	4313      	orrs	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	4b42      	ldr	r3, [pc, #264]	; (8004754 <ETH_SetMACConfig+0x230>)
 800464a:	4013      	ands	r3, r2
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6812      	ldr	r2, [r2, #0]
 8004650:	68f9      	ldr	r1, [r7, #12]
 8004652:	430b      	orrs	r3, r1
 8004654:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800465c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	4b3a      	ldr	r3, [pc, #232]	; (8004758 <ETH_SetMACConfig+0x234>)
 800466e:	4013      	ands	r3, r2
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6812      	ldr	r2, [r2, #0]
 8004674:	68f9      	ldr	r1, [r7, #12]
 8004676:	430b      	orrs	r3, r1
 8004678:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004680:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004686:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800468e:	2a00      	cmp	r2, #0
 8004690:	d101      	bne.n	8004696 <ETH_SetMACConfig+0x172>
 8004692:	2280      	movs	r2, #128	; 0x80
 8004694:	e000      	b.n	8004698 <ETH_SetMACConfig+0x174>
 8004696:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004698:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800469e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046aa:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80046ae:	4013      	ands	r3, r2
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6812      	ldr	r2, [r2, #0]
 80046b4:	68f9      	ldr	r1, [r7, #12]
 80046b6:	430b      	orrs	r3, r1
 80046b8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80046c0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80046c8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d6:	f023 0103 	bic.w	r1, r3, #3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80046ee:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800470a:	2a00      	cmp	r2, #0
 800470c:	d101      	bne.n	8004712 <ETH_SetMACConfig+0x1ee>
 800470e:	2240      	movs	r2, #64	; 0x40
 8004710:	e000      	b.n	8004714 <ETH_SetMACConfig+0x1f0>
 8004712:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004714:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800471c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800471e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004726:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004728:	4313      	orrs	r3, r2
 800472a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004734:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	430a      	orrs	r2, r1
 8004740:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004744:	bf00      	nop
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	00048083 	.word	0x00048083
 8004754:	c0f88000 	.word	0xc0f88000
 8004758:	fffffef0 	.word	0xfffffef0

0800475c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	4b38      	ldr	r3, [pc, #224]	; (8004854 <ETH_SetDMAConfig+0xf8>)
 8004772:	4013      	ands	r3, r2
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	6812      	ldr	r2, [r2, #0]
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	6809      	ldr	r1, [r1, #0]
 800477c:	431a      	orrs	r2, r3
 800477e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8004782:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	791b      	ldrb	r3, [r3, #4]
 8004788:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800478e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	7b1b      	ldrb	r3, [r3, #12]
 8004794:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004796:	4313      	orrs	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	f241 0304 	movw	r3, #4100	; 0x1004
 80047a2:	4413      	add	r3, r2
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	4b2c      	ldr	r3, [pc, #176]	; (8004858 <ETH_SetDMAConfig+0xfc>)
 80047a8:	4013      	ands	r3, r2
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6811      	ldr	r1, [r2, #0]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	431a      	orrs	r2, r3
 80047b2:	f241 0304 	movw	r3, #4100	; 0x1004
 80047b6:	440b      	add	r3, r1
 80047b8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	7b5b      	ldrb	r3, [r3, #13]
 80047be:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80047c4:	4313      	orrs	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	4b22      	ldr	r3, [pc, #136]	; (800485c <ETH_SetDMAConfig+0x100>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6811      	ldr	r1, [r2, #0]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	431a      	orrs	r2, r3
 80047de:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80047e2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	7d1b      	ldrb	r3, [r3, #20]
 80047ec:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80047ee:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	7f5b      	ldrb	r3, [r3, #29]
 80047f4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	f241 1304 	movw	r3, #4356	; 0x1104
 8004802:	4413      	add	r3, r2
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	4b16      	ldr	r3, [pc, #88]	; (8004860 <ETH_SetDMAConfig+0x104>)
 8004808:	4013      	ands	r3, r2
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6811      	ldr	r1, [r2, #0]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	431a      	orrs	r2, r3
 8004812:	f241 1304 	movw	r3, #4356	; 0x1104
 8004816:	440b      	add	r3, r1
 8004818:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	7f1b      	ldrb	r3, [r3, #28]
 800481e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004824:	4313      	orrs	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	f241 1308 	movw	r3, #4360	; 0x1108
 8004830:	4413      	add	r3, r2
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <ETH_SetDMAConfig+0x108>)
 8004836:	4013      	ands	r3, r2
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6811      	ldr	r1, [r2, #0]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	431a      	orrs	r2, r3
 8004840:	f241 1308 	movw	r3, #4360	; 0x1108
 8004844:	440b      	add	r3, r1
 8004846:	601a      	str	r2, [r3, #0]
}
 8004848:	bf00      	nop
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	ffff87fd 	.word	0xffff87fd
 8004858:	ffff2ffe 	.word	0xffff2ffe
 800485c:	fffec000 	.word	0xfffec000
 8004860:	ffc0efef 	.word	0xffc0efef
 8004864:	7fc0ffff 	.word	0x7fc0ffff

08004868 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b0a4      	sub	sp, #144	; 0x90
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004870:	2301      	movs	r3, #1
 8004872:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004876:	2300      	movs	r3, #0
 8004878:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800487a:	2300      	movs	r3, #0
 800487c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004880:	2300      	movs	r3, #0
 8004882:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004886:	2301      	movs	r3, #1
 8004888:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800488c:	2301      	movs	r3, #1
 800488e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004892:	2301      	movs	r3, #1
 8004894:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004898:	2300      	movs	r3, #0
 800489a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800489e:	2301      	movs	r3, #1
 80048a0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80048a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048a8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80048aa:	2300      	movs	r3, #0
 80048ac:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80048b4:	2300      	movs	r3, #0
 80048b6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80048ba:	2300      	movs	r3, #0
 80048bc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80048c0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80048c4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80048c6:	2300      	movs	r3, #0
 80048c8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80048cc:	2300      	movs	r3, #0
 80048ce:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80048d0:	2301      	movs	r3, #1
 80048d2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80048d6:	2300      	movs	r3, #0
 80048d8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80048dc:	2300      	movs	r3, #0
 80048de:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80048e2:	2300      	movs	r3, #0
 80048e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80048e6:	2300      	movs	r3, #0
 80048e8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80048ea:	2300      	movs	r3, #0
 80048ec:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80048ee:	2300      	movs	r3, #0
 80048f0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80048f4:	2300      	movs	r3, #0
 80048f6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80048fa:	2301      	movs	r3, #1
 80048fc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004900:	2320      	movs	r3, #32
 8004902:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004906:	2301      	movs	r3, #1
 8004908:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800490c:	2300      	movs	r3, #0
 800490e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004912:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004916:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004918:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800491c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800491e:	2300      	movs	r3, #0
 8004920:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004924:	2302      	movs	r3, #2
 8004926:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800492a:	2300      	movs	r3, #0
 800492c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004930:	2300      	movs	r3, #0
 8004932:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004936:	2300      	movs	r3, #0
 8004938:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800493c:	2301      	movs	r3, #1
 800493e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004942:	2300      	movs	r3, #0
 8004944:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004946:	2301      	movs	r3, #1
 8004948:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800494c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004950:	4619      	mov	r1, r3
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7ff fde6 	bl	8004524 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004958:	2301      	movs	r3, #1
 800495a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800495c:	2301      	movs	r3, #1
 800495e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004960:	2300      	movs	r3, #0
 8004962:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004964:	2300      	movs	r3, #0
 8004966:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800496a:	2300      	movs	r3, #0
 800496c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800496e:	2300      	movs	r3, #0
 8004970:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004972:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004976:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004978:	2300      	movs	r3, #0
 800497a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800497c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004980:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004982:	2300      	movs	r3, #0
 8004984:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8004988:	f44f 7306 	mov.w	r3, #536	; 0x218
 800498c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800498e:	f107 0308 	add.w	r3, r7, #8
 8004992:	4619      	mov	r1, r3
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f7ff fee1 	bl	800475c <ETH_SetDMAConfig>
}
 800499a:	bf00      	nop
 800499c:	3790      	adds	r7, #144	; 0x90
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
	...

080049a4 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80049b4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80049bc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80049be:	f001 fb49 	bl	8006054 <HAL_RCC_GetHCLKFreq>
 80049c2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	4a1e      	ldr	r2, [pc, #120]	; (8004a40 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d908      	bls.n	80049de <ETH_MAC_MDIO_ClkConfig+0x3a>
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	4a1d      	ldr	r2, [pc, #116]	; (8004a44 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d804      	bhi.n	80049de <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	e027      	b.n	8004a2e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	4a18      	ldr	r2, [pc, #96]	; (8004a44 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d908      	bls.n	80049f8 <ETH_MAC_MDIO_ClkConfig+0x54>
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	4a17      	ldr	r2, [pc, #92]	; (8004a48 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d804      	bhi.n	80049f8 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	e01a      	b.n	8004a2e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	4a13      	ldr	r2, [pc, #76]	; (8004a48 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d903      	bls.n	8004a08 <ETH_MAC_MDIO_ClkConfig+0x64>
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	4a12      	ldr	r2, [pc, #72]	; (8004a4c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d911      	bls.n	8004a2c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4a10      	ldr	r2, [pc, #64]	; (8004a4c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d908      	bls.n	8004a22 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4a0f      	ldr	r2, [pc, #60]	; (8004a50 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d804      	bhi.n	8004a22 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	e005      	b.n	8004a2e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	e000      	b.n	8004a2e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004a2c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004a38:	bf00      	nop
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	01312cff 	.word	0x01312cff
 8004a44:	02160ebf 	.word	0x02160ebf
 8004a48:	039386ff 	.word	0x039386ff
 8004a4c:	05f5e0ff 	.word	0x05f5e0ff
 8004a50:	08f0d17f 	.word	0x08f0d17f

08004a54 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	e01d      	b.n	8004a9e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68d9      	ldr	r1, [r3, #12]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	4413      	add	r3, r2
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	440b      	add	r3, r1
 8004a72:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2200      	movs	r2, #0
 8004a78:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2200      	movs	r2, #0
 8004a84:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004a8c:	68b9      	ldr	r1, [r7, #8]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	3206      	adds	r2, #6
 8004a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	60fb      	str	r3, [r7, #12]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2b03      	cmp	r3, #3
 8004aa2:	d9de      	bls.n	8004a62 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	f241 132c 	movw	r3, #4396	; 0x112c
 8004ab2:	4413      	add	r3, r2
 8004ab4:	2203      	movs	r2, #3
 8004ab6:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68d9      	ldr	r1, [r3, #12]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	f241 1314 	movw	r3, #4372	; 0x1114
 8004ac4:	4413      	add	r3, r2
 8004ac6:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68da      	ldr	r2, [r3, #12]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8004ad4:	601a      	str	r2, [r3, #0]
}
 8004ad6:	bf00      	nop
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b085      	sub	sp, #20
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	e024      	b.n	8004b3a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6919      	ldr	r1, [r3, #16]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	4613      	mov	r3, r2
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	4413      	add	r3, r2
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	440b      	add	r3, r1
 8004b00:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2200      	movs	r2, #0
 8004b12:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2200      	movs	r2, #0
 8004b18:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2200      	movs	r2, #0
 8004b24:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	6879      	ldr	r1, [r7, #4]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	330a      	adds	r3, #10
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	440b      	add	r3, r1
 8004b32:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	3301      	adds	r3, #1
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2b03      	cmp	r3, #3
 8004b3e:	d9d7      	bls.n	8004af0 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	f241 1330 	movw	r3, #4400	; 0x1130
 8004b66:	4413      	add	r3, r2
 8004b68:	2203      	movs	r2, #3
 8004b6a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6919      	ldr	r1, [r3, #16]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	f241 131c 	movw	r3, #4380	; 0x111c
 8004b78:	4413      	add	r3, r2
 8004b7a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	f241 1328 	movw	r3, #4392	; 0x1128
 8004b8c:	4413      	add	r3, r2
 8004b8e:	6019      	str	r1, [r3, #0]
}
 8004b90:	bf00      	nop
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b089      	sub	sp, #36	; 0x24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004baa:	4b89      	ldr	r3, [pc, #548]	; (8004dd0 <HAL_GPIO_Init+0x234>)
 8004bac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004bae:	e194      	b.n	8004eda <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 8186 	beq.w	8004ed4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d00b      	beq.n	8004be8 <HAL_GPIO_Init+0x4c>
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d007      	beq.n	8004be8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bdc:	2b11      	cmp	r3, #17
 8004bde:	d003      	beq.n	8004be8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	2b12      	cmp	r3, #18
 8004be6:	d130      	bne.n	8004c4a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	2203      	movs	r2, #3
 8004bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf8:	43db      	mvns	r3, r3
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	68da      	ldr	r2, [r3, #12]
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c1e:	2201      	movs	r2, #1
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	fa02 f303 	lsl.w	r3, r2, r3
 8004c26:	43db      	mvns	r3, r3
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	091b      	lsrs	r3, r3, #4
 8004c34:	f003 0201 	and.w	r2, r3, #1
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	2203      	movs	r2, #3
 8004c56:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5a:	43db      	mvns	r3, r3
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d003      	beq.n	8004c8a <HAL_GPIO_Init+0xee>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2b12      	cmp	r3, #18
 8004c88:	d123      	bne.n	8004cd2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	08da      	lsrs	r2, r3, #3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	3208      	adds	r2, #8
 8004c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	f003 0307 	and.w	r3, r3, #7
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	220f      	movs	r2, #15
 8004ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca6:	43db      	mvns	r3, r3
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	4013      	ands	r3, r2
 8004cac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	691a      	ldr	r2, [r3, #16]
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	08da      	lsrs	r2, r3, #3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3208      	adds	r2, #8
 8004ccc:	69b9      	ldr	r1, [r7, #24]
 8004cce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	2203      	movs	r2, #3
 8004cde:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f003 0203 	and.w	r2, r3, #3
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	69ba      	ldr	r2, [r7, #24]
 8004d04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 80e0 	beq.w	8004ed4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d14:	4b2f      	ldr	r3, [pc, #188]	; (8004dd4 <HAL_GPIO_Init+0x238>)
 8004d16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d1a:	4a2e      	ldr	r2, [pc, #184]	; (8004dd4 <HAL_GPIO_Init+0x238>)
 8004d1c:	f043 0302 	orr.w	r3, r3, #2
 8004d20:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004d24:	4b2b      	ldr	r3, [pc, #172]	; (8004dd4 <HAL_GPIO_Init+0x238>)
 8004d26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d32:	4a29      	ldr	r2, [pc, #164]	; (8004dd8 <HAL_GPIO_Init+0x23c>)
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	089b      	lsrs	r3, r3, #2
 8004d38:	3302      	adds	r3, #2
 8004d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	220f      	movs	r2, #15
 8004d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4e:	43db      	mvns	r3, r3
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	4013      	ands	r3, r2
 8004d54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a20      	ldr	r2, [pc, #128]	; (8004ddc <HAL_GPIO_Init+0x240>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d052      	beq.n	8004e04 <HAL_GPIO_Init+0x268>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a1f      	ldr	r2, [pc, #124]	; (8004de0 <HAL_GPIO_Init+0x244>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d031      	beq.n	8004dca <HAL_GPIO_Init+0x22e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a1e      	ldr	r2, [pc, #120]	; (8004de4 <HAL_GPIO_Init+0x248>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d02b      	beq.n	8004dc6 <HAL_GPIO_Init+0x22a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a1d      	ldr	r2, [pc, #116]	; (8004de8 <HAL_GPIO_Init+0x24c>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d025      	beq.n	8004dc2 <HAL_GPIO_Init+0x226>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a1c      	ldr	r2, [pc, #112]	; (8004dec <HAL_GPIO_Init+0x250>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d01f      	beq.n	8004dbe <HAL_GPIO_Init+0x222>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a1b      	ldr	r2, [pc, #108]	; (8004df0 <HAL_GPIO_Init+0x254>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d019      	beq.n	8004dba <HAL_GPIO_Init+0x21e>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a1a      	ldr	r2, [pc, #104]	; (8004df4 <HAL_GPIO_Init+0x258>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d013      	beq.n	8004db6 <HAL_GPIO_Init+0x21a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a19      	ldr	r2, [pc, #100]	; (8004df8 <HAL_GPIO_Init+0x25c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d00d      	beq.n	8004db2 <HAL_GPIO_Init+0x216>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a18      	ldr	r2, [pc, #96]	; (8004dfc <HAL_GPIO_Init+0x260>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d007      	beq.n	8004dae <HAL_GPIO_Init+0x212>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a17      	ldr	r2, [pc, #92]	; (8004e00 <HAL_GPIO_Init+0x264>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d101      	bne.n	8004daa <HAL_GPIO_Init+0x20e>
 8004da6:	2309      	movs	r3, #9
 8004da8:	e02d      	b.n	8004e06 <HAL_GPIO_Init+0x26a>
 8004daa:	230a      	movs	r3, #10
 8004dac:	e02b      	b.n	8004e06 <HAL_GPIO_Init+0x26a>
 8004dae:	2308      	movs	r3, #8
 8004db0:	e029      	b.n	8004e06 <HAL_GPIO_Init+0x26a>
 8004db2:	2307      	movs	r3, #7
 8004db4:	e027      	b.n	8004e06 <HAL_GPIO_Init+0x26a>
 8004db6:	2306      	movs	r3, #6
 8004db8:	e025      	b.n	8004e06 <HAL_GPIO_Init+0x26a>
 8004dba:	2305      	movs	r3, #5
 8004dbc:	e023      	b.n	8004e06 <HAL_GPIO_Init+0x26a>
 8004dbe:	2304      	movs	r3, #4
 8004dc0:	e021      	b.n	8004e06 <HAL_GPIO_Init+0x26a>
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e01f      	b.n	8004e06 <HAL_GPIO_Init+0x26a>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e01d      	b.n	8004e06 <HAL_GPIO_Init+0x26a>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e01b      	b.n	8004e06 <HAL_GPIO_Init+0x26a>
 8004dce:	bf00      	nop
 8004dd0:	58000080 	.word	0x58000080
 8004dd4:	58024400 	.word	0x58024400
 8004dd8:	58000400 	.word	0x58000400
 8004ddc:	58020000 	.word	0x58020000
 8004de0:	58020400 	.word	0x58020400
 8004de4:	58020800 	.word	0x58020800
 8004de8:	58020c00 	.word	0x58020c00
 8004dec:	58021000 	.word	0x58021000
 8004df0:	58021400 	.word	0x58021400
 8004df4:	58021800 	.word	0x58021800
 8004df8:	58021c00 	.word	0x58021c00
 8004dfc:	58022000 	.word	0x58022000
 8004e00:	58022400 	.word	0x58022400
 8004e04:	2300      	movs	r3, #0
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	f002 0203 	and.w	r2, r2, #3
 8004e0c:	0092      	lsls	r2, r2, #2
 8004e0e:	4093      	lsls	r3, r2
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e16:	4938      	ldr	r1, [pc, #224]	; (8004ef8 <HAL_GPIO_Init+0x35c>)
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	089b      	lsrs	r3, r3, #2
 8004e1c:	3302      	adds	r3, #2
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	4013      	ands	r3, r2
 8004e32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	43db      	mvns	r3, r3
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	43db      	mvns	r3, r3
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	4013      	ands	r3, r2
 8004e88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004e9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	43db      	mvns	r3, r3
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004ecc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f47f ae63 	bne.w	8004bb0 <HAL_GPIO_Init+0x14>
  }
}
 8004eea:	bf00      	nop
 8004eec:	3724      	adds	r7, #36	; 0x24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	58000400 	.word	0x58000400

08004efc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	807b      	strh	r3, [r7, #2]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f0c:	787b      	ldrb	r3, [r7, #1]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f12:	887a      	ldrh	r2, [r7, #2]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004f18:	e003      	b.n	8004f22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004f1a:	887b      	ldrh	r3, [r7, #2]
 8004f1c:	041a      	lsls	r2, r3, #16
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	619a      	str	r2, [r3, #24]
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f30:	b08f      	sub	sp, #60	; 0x3c
 8004f32:	af0a      	add	r7, sp, #40	; 0x28
 8004f34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e116      	b.n	800516e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d106      	bne.n	8004f60 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7fe fde8 	bl	8003b30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2203      	movs	r2, #3
 8004f64:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d102      	bne.n	8004f7a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f005 f9d2 	bl	800a328 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	603b      	str	r3, [r7, #0]
 8004f8a:	687e      	ldr	r6, [r7, #4]
 8004f8c:	466d      	mov	r5, sp
 8004f8e:	f106 0410 	add.w	r4, r6, #16
 8004f92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004fa2:	1d33      	adds	r3, r6, #4
 8004fa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fa6:	6838      	ldr	r0, [r7, #0]
 8004fa8:	f005 f95c 	bl	800a264 <USB_CoreInit>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d005      	beq.n	8004fbe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e0d7      	b.n	800516e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f005 f9c0 	bl	800a34a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fca:	2300      	movs	r3, #0
 8004fcc:	73fb      	strb	r3, [r7, #15]
 8004fce:	e04a      	b.n	8005066 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004fd0:	7bfa      	ldrb	r2, [r7, #15]
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	1a9b      	subs	r3, r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	440b      	add	r3, r1
 8004fde:	333d      	adds	r3, #61	; 0x3d
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004fe4:	7bfa      	ldrb	r2, [r7, #15]
 8004fe6:	6879      	ldr	r1, [r7, #4]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	1a9b      	subs	r3, r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	333c      	adds	r3, #60	; 0x3c
 8004ff4:	7bfa      	ldrb	r2, [r7, #15]
 8004ff6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004ff8:	7bfa      	ldrb	r2, [r7, #15]
 8004ffa:	7bfb      	ldrb	r3, [r7, #15]
 8004ffc:	b298      	uxth	r0, r3
 8004ffe:	6879      	ldr	r1, [r7, #4]
 8005000:	4613      	mov	r3, r2
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	1a9b      	subs	r3, r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	440b      	add	r3, r1
 800500a:	3342      	adds	r3, #66	; 0x42
 800500c:	4602      	mov	r2, r0
 800500e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005010:	7bfa      	ldrb	r2, [r7, #15]
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	4613      	mov	r3, r2
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	1a9b      	subs	r3, r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	333f      	adds	r3, #63	; 0x3f
 8005020:	2200      	movs	r2, #0
 8005022:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005024:	7bfa      	ldrb	r2, [r7, #15]
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	4613      	mov	r3, r2
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	1a9b      	subs	r3, r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	440b      	add	r3, r1
 8005032:	3344      	adds	r3, #68	; 0x44
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005038:	7bfa      	ldrb	r2, [r7, #15]
 800503a:	6879      	ldr	r1, [r7, #4]
 800503c:	4613      	mov	r3, r2
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	1a9b      	subs	r3, r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	3348      	adds	r3, #72	; 0x48
 8005048:	2200      	movs	r2, #0
 800504a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800504c:	7bfa      	ldrb	r2, [r7, #15]
 800504e:	6879      	ldr	r1, [r7, #4]
 8005050:	4613      	mov	r3, r2
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	1a9b      	subs	r3, r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	440b      	add	r3, r1
 800505a:	3350      	adds	r3, #80	; 0x50
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005060:	7bfb      	ldrb	r3, [r7, #15]
 8005062:	3301      	adds	r3, #1
 8005064:	73fb      	strb	r3, [r7, #15]
 8005066:	7bfa      	ldrb	r2, [r7, #15]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	429a      	cmp	r2, r3
 800506e:	d3af      	bcc.n	8004fd0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005070:	2300      	movs	r3, #0
 8005072:	73fb      	strb	r3, [r7, #15]
 8005074:	e044      	b.n	8005100 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005076:	7bfa      	ldrb	r2, [r7, #15]
 8005078:	6879      	ldr	r1, [r7, #4]
 800507a:	4613      	mov	r3, r2
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	1a9b      	subs	r3, r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	440b      	add	r3, r1
 8005084:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005088:	2200      	movs	r2, #0
 800508a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800508c:	7bfa      	ldrb	r2, [r7, #15]
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	4613      	mov	r3, r2
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	1a9b      	subs	r3, r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	440b      	add	r3, r1
 800509a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800509e:	7bfa      	ldrb	r2, [r7, #15]
 80050a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80050a2:	7bfa      	ldrb	r2, [r7, #15]
 80050a4:	6879      	ldr	r1, [r7, #4]
 80050a6:	4613      	mov	r3, r2
 80050a8:	00db      	lsls	r3, r3, #3
 80050aa:	1a9b      	subs	r3, r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	440b      	add	r3, r1
 80050b0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80050b4:	2200      	movs	r2, #0
 80050b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80050b8:	7bfa      	ldrb	r2, [r7, #15]
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	4613      	mov	r3, r2
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	1a9b      	subs	r3, r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	440b      	add	r3, r1
 80050c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80050ce:	7bfa      	ldrb	r2, [r7, #15]
 80050d0:	6879      	ldr	r1, [r7, #4]
 80050d2:	4613      	mov	r3, r2
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	1a9b      	subs	r3, r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	440b      	add	r3, r1
 80050dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80050e0:	2200      	movs	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80050e4:	7bfa      	ldrb	r2, [r7, #15]
 80050e6:	6879      	ldr	r1, [r7, #4]
 80050e8:	4613      	mov	r3, r2
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	1a9b      	subs	r3, r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	440b      	add	r3, r1
 80050f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80050f6:	2200      	movs	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
 80050fc:	3301      	adds	r3, #1
 80050fe:	73fb      	strb	r3, [r7, #15]
 8005100:	7bfa      	ldrb	r2, [r7, #15]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	429a      	cmp	r2, r3
 8005108:	d3b5      	bcc.n	8005076 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	603b      	str	r3, [r7, #0]
 8005110:	687e      	ldr	r6, [r7, #4]
 8005112:	466d      	mov	r5, sp
 8005114:	f106 0410 	add.w	r4, r6, #16
 8005118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800511a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800511c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800511e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005120:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005124:	e885 0003 	stmia.w	r5, {r0, r1}
 8005128:	1d33      	adds	r3, r6, #4
 800512a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800512c:	6838      	ldr	r0, [r7, #0]
 800512e:	f005 f937 	bl	800a3a0 <USB_DevInit>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d005      	beq.n	8005144 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e014      	b.n	800516e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	2b01      	cmp	r3, #1
 800515a:	d102      	bne.n	8005162 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f80b 	bl	8005178 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4618      	mov	r0, r3
 8005168:	f005 fad9 	bl	800a71e <USB_DevDisconnect>

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005178 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051a6:	4b05      	ldr	r3, [pc, #20]	; (80051bc <HAL_PCDEx_ActivateLPM+0x44>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	10000003 	.word	0x10000003

080051c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80051c8:	4b19      	ldr	r3, [pc, #100]	; (8005230 <HAL_PWREx_ConfigSupply+0x70>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d00a      	beq.n	80051ea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80051d4:	4b16      	ldr	r3, [pc, #88]	; (8005230 <HAL_PWREx_ConfigSupply+0x70>)
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d001      	beq.n	80051e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e01f      	b.n	8005226 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80051e6:	2300      	movs	r3, #0
 80051e8:	e01d      	b.n	8005226 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80051ea:	4b11      	ldr	r3, [pc, #68]	; (8005230 <HAL_PWREx_ConfigSupply+0x70>)
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f023 0207 	bic.w	r2, r3, #7
 80051f2:	490f      	ldr	r1, [pc, #60]	; (8005230 <HAL_PWREx_ConfigSupply+0x70>)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80051fa:	f7fe fe85 	bl	8003f08 <HAL_GetTick>
 80051fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005200:	e009      	b.n	8005216 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005202:	f7fe fe81 	bl	8003f08 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005210:	d901      	bls.n	8005216 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e007      	b.n	8005226 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005216:	4b06      	ldr	r3, [pc, #24]	; (8005230 <HAL_PWREx_ConfigSupply+0x70>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800521e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005222:	d1ee      	bne.n	8005202 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	58024800 	.word	0x58024800

08005234 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005234:	b480      	push	{r7}
 8005236:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005238:	4b05      	ldr	r3, [pc, #20]	; (8005250 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	4a04      	ldr	r2, [pc, #16]	; (8005250 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800523e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005242:	60d3      	str	r3, [r2, #12]
}
 8005244:	bf00      	nop
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	58024800 	.word	0x58024800

08005254 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b08c      	sub	sp, #48	; 0x30
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e3c4      	b.n	80059f0 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 8087 	beq.w	8005382 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005274:	4ba2      	ldr	r3, [pc, #648]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800527c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800527e:	4ba0      	ldr	r3, [pc, #640]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 8005280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005282:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005286:	2b10      	cmp	r3, #16
 8005288:	d007      	beq.n	800529a <HAL_RCC_OscConfig+0x46>
 800528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528c:	2b18      	cmp	r3, #24
 800528e:	d110      	bne.n	80052b2 <HAL_RCC_OscConfig+0x5e>
 8005290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005292:	f003 0303 	and.w	r3, r3, #3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d10b      	bne.n	80052b2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800529a:	4b99      	ldr	r3, [pc, #612]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d06c      	beq.n	8005380 <HAL_RCC_OscConfig+0x12c>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d168      	bne.n	8005380 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e39e      	b.n	80059f0 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ba:	d106      	bne.n	80052ca <HAL_RCC_OscConfig+0x76>
 80052bc:	4b90      	ldr	r3, [pc, #576]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a8f      	ldr	r2, [pc, #572]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 80052c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	e02e      	b.n	8005328 <HAL_RCC_OscConfig+0xd4>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10c      	bne.n	80052ec <HAL_RCC_OscConfig+0x98>
 80052d2:	4b8b      	ldr	r3, [pc, #556]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a8a      	ldr	r2, [pc, #552]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 80052d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	4b88      	ldr	r3, [pc, #544]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a87      	ldr	r2, [pc, #540]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 80052e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052e8:	6013      	str	r3, [r2, #0]
 80052ea:	e01d      	b.n	8005328 <HAL_RCC_OscConfig+0xd4>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052f4:	d10c      	bne.n	8005310 <HAL_RCC_OscConfig+0xbc>
 80052f6:	4b82      	ldr	r3, [pc, #520]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a81      	ldr	r2, [pc, #516]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 80052fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	4b7f      	ldr	r3, [pc, #508]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a7e      	ldr	r2, [pc, #504]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 8005308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	e00b      	b.n	8005328 <HAL_RCC_OscConfig+0xd4>
 8005310:	4b7b      	ldr	r3, [pc, #492]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a7a      	ldr	r2, [pc, #488]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 8005316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	4b78      	ldr	r3, [pc, #480]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a77      	ldr	r2, [pc, #476]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 8005322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d013      	beq.n	8005358 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005330:	f7fe fdea 	bl	8003f08 <HAL_GetTick>
 8005334:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005336:	e008      	b.n	800534a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005338:	f7fe fde6 	bl	8003f08 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b64      	cmp	r3, #100	; 0x64
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e352      	b.n	80059f0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800534a:	4b6d      	ldr	r3, [pc, #436]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0f0      	beq.n	8005338 <HAL_RCC_OscConfig+0xe4>
 8005356:	e014      	b.n	8005382 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005358:	f7fe fdd6 	bl	8003f08 <HAL_GetTick>
 800535c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005360:	f7fe fdd2 	bl	8003f08 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b64      	cmp	r3, #100	; 0x64
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e33e      	b.n	80059f0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005372:	4b63      	ldr	r3, [pc, #396]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1f0      	bne.n	8005360 <HAL_RCC_OscConfig+0x10c>
 800537e:	e000      	b.n	8005382 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 8092 	beq.w	80054b4 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005390:	4b5b      	ldr	r3, [pc, #364]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005398:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800539a:	4b59      	ldr	r3, [pc, #356]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 800539c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d007      	beq.n	80053b6 <HAL_RCC_OscConfig+0x162>
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	2b18      	cmp	r3, #24
 80053aa:	d12d      	bne.n	8005408 <HAL_RCC_OscConfig+0x1b4>
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d128      	bne.n	8005408 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053b6:	4b52      	ldr	r3, [pc, #328]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0304 	and.w	r3, r3, #4
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d005      	beq.n	80053ce <HAL_RCC_OscConfig+0x17a>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e310      	b.n	80059f0 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ce:	f7fe fdd3 	bl	8003f78 <HAL_GetREVID>
 80053d2:	4602      	mov	r2, r0
 80053d4:	f241 0303 	movw	r3, #4099	; 0x1003
 80053d8:	429a      	cmp	r2, r3
 80053da:	d80a      	bhi.n	80053f2 <HAL_RCC_OscConfig+0x19e>
 80053dc:	4b48      	ldr	r3, [pc, #288]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	031b      	lsls	r3, r3, #12
 80053ea:	4945      	ldr	r1, [pc, #276]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053f0:	e060      	b.n	80054b4 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f2:	4b43      	ldr	r3, [pc, #268]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	061b      	lsls	r3, r3, #24
 8005400:	493f      	ldr	r1, [pc, #252]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 8005402:	4313      	orrs	r3, r2
 8005404:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005406:	e055      	b.n	80054b4 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d038      	beq.n	8005482 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005410:	4b3b      	ldr	r3, [pc, #236]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f023 0219 	bic.w	r2, r3, #25
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	4938      	ldr	r1, [pc, #224]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 800541e:	4313      	orrs	r3, r2
 8005420:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005422:	f7fe fd71 	bl	8003f08 <HAL_GetTick>
 8005426:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005428:	e008      	b.n	800543c <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800542a:	f7fe fd6d 	bl	8003f08 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	d901      	bls.n	800543c <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e2d9      	b.n	80059f0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800543c:	4b30      	ldr	r3, [pc, #192]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b00      	cmp	r3, #0
 8005446:	d0f0      	beq.n	800542a <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005448:	f7fe fd96 	bl	8003f78 <HAL_GetREVID>
 800544c:	4602      	mov	r2, r0
 800544e:	f241 0303 	movw	r3, #4099	; 0x1003
 8005452:	429a      	cmp	r2, r3
 8005454:	d80a      	bhi.n	800546c <HAL_RCC_OscConfig+0x218>
 8005456:	4b2a      	ldr	r3, [pc, #168]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	031b      	lsls	r3, r3, #12
 8005464:	4926      	ldr	r1, [pc, #152]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 8005466:	4313      	orrs	r3, r2
 8005468:	604b      	str	r3, [r1, #4]
 800546a:	e023      	b.n	80054b4 <HAL_RCC_OscConfig+0x260>
 800546c:	4b24      	ldr	r3, [pc, #144]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	061b      	lsls	r3, r3, #24
 800547a:	4921      	ldr	r1, [pc, #132]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 800547c:	4313      	orrs	r3, r2
 800547e:	604b      	str	r3, [r1, #4]
 8005480:	e018      	b.n	80054b4 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005482:	4b1f      	ldr	r3, [pc, #124]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a1e      	ldr	r2, [pc, #120]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 8005488:	f023 0301 	bic.w	r3, r3, #1
 800548c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548e:	f7fe fd3b 	bl	8003f08 <HAL_GetTick>
 8005492:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005494:	e008      	b.n	80054a8 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005496:	f7fe fd37 	bl	8003f08 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d901      	bls.n	80054a8 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e2a3      	b.n	80059f0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054a8:	4b15      	ldr	r3, [pc, #84]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0304 	and.w	r3, r3, #4
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1f0      	bne.n	8005496 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0310 	and.w	r3, r3, #16
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 8091 	beq.w	80055e4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054c2:	4b0f      	ldr	r3, [pc, #60]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80054cc:	4b0c      	ldr	r3, [pc, #48]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 80054ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	2b08      	cmp	r3, #8
 80054d6:	d007      	beq.n	80054e8 <HAL_RCC_OscConfig+0x294>
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	2b18      	cmp	r3, #24
 80054dc:	d12f      	bne.n	800553e <HAL_RCC_OscConfig+0x2ea>
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f003 0303 	and.w	r3, r3, #3
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d12a      	bne.n	800553e <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054e8:	4b05      	ldr	r3, [pc, #20]	; (8005500 <HAL_RCC_OscConfig+0x2ac>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d007      	beq.n	8005504 <HAL_RCC_OscConfig+0x2b0>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	2b80      	cmp	r3, #128	; 0x80
 80054fa:	d003      	beq.n	8005504 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e277      	b.n	80059f0 <HAL_RCC_OscConfig+0x79c>
 8005500:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005504:	f7fe fd38 	bl	8003f78 <HAL_GetREVID>
 8005508:	4602      	mov	r2, r0
 800550a:	f241 0303 	movw	r3, #4099	; 0x1003
 800550e:	429a      	cmp	r2, r3
 8005510:	d80a      	bhi.n	8005528 <HAL_RCC_OscConfig+0x2d4>
 8005512:	4ba2      	ldr	r3, [pc, #648]	; (800579c <HAL_RCC_OscConfig+0x548>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	069b      	lsls	r3, r3, #26
 8005520:	499e      	ldr	r1, [pc, #632]	; (800579c <HAL_RCC_OscConfig+0x548>)
 8005522:	4313      	orrs	r3, r2
 8005524:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005526:	e05d      	b.n	80055e4 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005528:	4b9c      	ldr	r3, [pc, #624]	; (800579c <HAL_RCC_OscConfig+0x548>)
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	061b      	lsls	r3, r3, #24
 8005536:	4999      	ldr	r1, [pc, #612]	; (800579c <HAL_RCC_OscConfig+0x548>)
 8005538:	4313      	orrs	r3, r2
 800553a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800553c:	e052      	b.n	80055e4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d035      	beq.n	80055b2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005546:	4b95      	ldr	r3, [pc, #596]	; (800579c <HAL_RCC_OscConfig+0x548>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a94      	ldr	r2, [pc, #592]	; (800579c <HAL_RCC_OscConfig+0x548>)
 800554c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005552:	f7fe fcd9 	bl	8003f08 <HAL_GetTick>
 8005556:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005558:	e008      	b.n	800556c <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800555a:	f7fe fcd5 	bl	8003f08 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e241      	b.n	80059f0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800556c:	4b8b      	ldr	r3, [pc, #556]	; (800579c <HAL_RCC_OscConfig+0x548>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0f0      	beq.n	800555a <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005578:	f7fe fcfe 	bl	8003f78 <HAL_GetREVID>
 800557c:	4602      	mov	r2, r0
 800557e:	f241 0303 	movw	r3, #4099	; 0x1003
 8005582:	429a      	cmp	r2, r3
 8005584:	d80a      	bhi.n	800559c <HAL_RCC_OscConfig+0x348>
 8005586:	4b85      	ldr	r3, [pc, #532]	; (800579c <HAL_RCC_OscConfig+0x548>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	069b      	lsls	r3, r3, #26
 8005594:	4981      	ldr	r1, [pc, #516]	; (800579c <HAL_RCC_OscConfig+0x548>)
 8005596:	4313      	orrs	r3, r2
 8005598:	604b      	str	r3, [r1, #4]
 800559a:	e023      	b.n	80055e4 <HAL_RCC_OscConfig+0x390>
 800559c:	4b7f      	ldr	r3, [pc, #508]	; (800579c <HAL_RCC_OscConfig+0x548>)
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	061b      	lsls	r3, r3, #24
 80055aa:	497c      	ldr	r1, [pc, #496]	; (800579c <HAL_RCC_OscConfig+0x548>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	60cb      	str	r3, [r1, #12]
 80055b0:	e018      	b.n	80055e4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80055b2:	4b7a      	ldr	r3, [pc, #488]	; (800579c <HAL_RCC_OscConfig+0x548>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a79      	ldr	r2, [pc, #484]	; (800579c <HAL_RCC_OscConfig+0x548>)
 80055b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055be:	f7fe fca3 	bl	8003f08 <HAL_GetTick>
 80055c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80055c4:	e008      	b.n	80055d8 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80055c6:	f7fe fc9f 	bl	8003f08 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d901      	bls.n	80055d8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e20b      	b.n	80059f0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80055d8:	4b70      	ldr	r3, [pc, #448]	; (800579c <HAL_RCC_OscConfig+0x548>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1f0      	bne.n	80055c6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0308 	and.w	r3, r3, #8
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d036      	beq.n	800565e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d019      	beq.n	800562c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055f8:	4b68      	ldr	r3, [pc, #416]	; (800579c <HAL_RCC_OscConfig+0x548>)
 80055fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055fc:	4a67      	ldr	r2, [pc, #412]	; (800579c <HAL_RCC_OscConfig+0x548>)
 80055fe:	f043 0301 	orr.w	r3, r3, #1
 8005602:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005604:	f7fe fc80 	bl	8003f08 <HAL_GetTick>
 8005608:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800560c:	f7fe fc7c 	bl	8003f08 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e1e8      	b.n	80059f0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800561e:	4b5f      	ldr	r3, [pc, #380]	; (800579c <HAL_RCC_OscConfig+0x548>)
 8005620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d0f0      	beq.n	800560c <HAL_RCC_OscConfig+0x3b8>
 800562a:	e018      	b.n	800565e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800562c:	4b5b      	ldr	r3, [pc, #364]	; (800579c <HAL_RCC_OscConfig+0x548>)
 800562e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005630:	4a5a      	ldr	r2, [pc, #360]	; (800579c <HAL_RCC_OscConfig+0x548>)
 8005632:	f023 0301 	bic.w	r3, r3, #1
 8005636:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005638:	f7fe fc66 	bl	8003f08 <HAL_GetTick>
 800563c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800563e:	e008      	b.n	8005652 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005640:	f7fe fc62 	bl	8003f08 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b02      	cmp	r3, #2
 800564c:	d901      	bls.n	8005652 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e1ce      	b.n	80059f0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005652:	4b52      	ldr	r3, [pc, #328]	; (800579c <HAL_RCC_OscConfig+0x548>)
 8005654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1f0      	bne.n	8005640 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0320 	and.w	r3, r3, #32
 8005666:	2b00      	cmp	r3, #0
 8005668:	d036      	beq.n	80056d8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d019      	beq.n	80056a6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005672:	4b4a      	ldr	r3, [pc, #296]	; (800579c <HAL_RCC_OscConfig+0x548>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a49      	ldr	r2, [pc, #292]	; (800579c <HAL_RCC_OscConfig+0x548>)
 8005678:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800567c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800567e:	f7fe fc43 	bl	8003f08 <HAL_GetTick>
 8005682:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005684:	e008      	b.n	8005698 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005686:	f7fe fc3f 	bl	8003f08 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e1ab      	b.n	80059f0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005698:	4b40      	ldr	r3, [pc, #256]	; (800579c <HAL_RCC_OscConfig+0x548>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0f0      	beq.n	8005686 <HAL_RCC_OscConfig+0x432>
 80056a4:	e018      	b.n	80056d8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056a6:	4b3d      	ldr	r3, [pc, #244]	; (800579c <HAL_RCC_OscConfig+0x548>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a3c      	ldr	r2, [pc, #240]	; (800579c <HAL_RCC_OscConfig+0x548>)
 80056ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056b2:	f7fe fc29 	bl	8003f08 <HAL_GetTick>
 80056b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80056b8:	e008      	b.n	80056cc <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80056ba:	f7fe fc25 	bl	8003f08 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e191      	b.n	80059f0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80056cc:	4b33      	ldr	r3, [pc, #204]	; (800579c <HAL_RCC_OscConfig+0x548>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1f0      	bne.n	80056ba <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0304 	and.w	r3, r3, #4
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 8086 	beq.w	80057f2 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80056e6:	4b2e      	ldr	r3, [pc, #184]	; (80057a0 <HAL_RCC_OscConfig+0x54c>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a2d      	ldr	r2, [pc, #180]	; (80057a0 <HAL_RCC_OscConfig+0x54c>)
 80056ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056f2:	f7fe fc09 	bl	8003f08 <HAL_GetTick>
 80056f6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056f8:	e008      	b.n	800570c <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80056fa:	f7fe fc05 	bl	8003f08 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	2b64      	cmp	r3, #100	; 0x64
 8005706:	d901      	bls.n	800570c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e171      	b.n	80059f0 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800570c:	4b24      	ldr	r3, [pc, #144]	; (80057a0 <HAL_RCC_OscConfig+0x54c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0f0      	beq.n	80056fa <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d106      	bne.n	800572e <HAL_RCC_OscConfig+0x4da>
 8005720:	4b1e      	ldr	r3, [pc, #120]	; (800579c <HAL_RCC_OscConfig+0x548>)
 8005722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005724:	4a1d      	ldr	r2, [pc, #116]	; (800579c <HAL_RCC_OscConfig+0x548>)
 8005726:	f043 0301 	orr.w	r3, r3, #1
 800572a:	6713      	str	r3, [r2, #112]	; 0x70
 800572c:	e02d      	b.n	800578a <HAL_RCC_OscConfig+0x536>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10c      	bne.n	8005750 <HAL_RCC_OscConfig+0x4fc>
 8005736:	4b19      	ldr	r3, [pc, #100]	; (800579c <HAL_RCC_OscConfig+0x548>)
 8005738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573a:	4a18      	ldr	r2, [pc, #96]	; (800579c <HAL_RCC_OscConfig+0x548>)
 800573c:	f023 0301 	bic.w	r3, r3, #1
 8005740:	6713      	str	r3, [r2, #112]	; 0x70
 8005742:	4b16      	ldr	r3, [pc, #88]	; (800579c <HAL_RCC_OscConfig+0x548>)
 8005744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005746:	4a15      	ldr	r2, [pc, #84]	; (800579c <HAL_RCC_OscConfig+0x548>)
 8005748:	f023 0304 	bic.w	r3, r3, #4
 800574c:	6713      	str	r3, [r2, #112]	; 0x70
 800574e:	e01c      	b.n	800578a <HAL_RCC_OscConfig+0x536>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	2b05      	cmp	r3, #5
 8005756:	d10c      	bne.n	8005772 <HAL_RCC_OscConfig+0x51e>
 8005758:	4b10      	ldr	r3, [pc, #64]	; (800579c <HAL_RCC_OscConfig+0x548>)
 800575a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575c:	4a0f      	ldr	r2, [pc, #60]	; (800579c <HAL_RCC_OscConfig+0x548>)
 800575e:	f043 0304 	orr.w	r3, r3, #4
 8005762:	6713      	str	r3, [r2, #112]	; 0x70
 8005764:	4b0d      	ldr	r3, [pc, #52]	; (800579c <HAL_RCC_OscConfig+0x548>)
 8005766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005768:	4a0c      	ldr	r2, [pc, #48]	; (800579c <HAL_RCC_OscConfig+0x548>)
 800576a:	f043 0301 	orr.w	r3, r3, #1
 800576e:	6713      	str	r3, [r2, #112]	; 0x70
 8005770:	e00b      	b.n	800578a <HAL_RCC_OscConfig+0x536>
 8005772:	4b0a      	ldr	r3, [pc, #40]	; (800579c <HAL_RCC_OscConfig+0x548>)
 8005774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005776:	4a09      	ldr	r2, [pc, #36]	; (800579c <HAL_RCC_OscConfig+0x548>)
 8005778:	f023 0301 	bic.w	r3, r3, #1
 800577c:	6713      	str	r3, [r2, #112]	; 0x70
 800577e:	4b07      	ldr	r3, [pc, #28]	; (800579c <HAL_RCC_OscConfig+0x548>)
 8005780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005782:	4a06      	ldr	r2, [pc, #24]	; (800579c <HAL_RCC_OscConfig+0x548>)
 8005784:	f023 0304 	bic.w	r3, r3, #4
 8005788:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d01a      	beq.n	80057c8 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005792:	f7fe fbb9 	bl	8003f08 <HAL_GetTick>
 8005796:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005798:	e00f      	b.n	80057ba <HAL_RCC_OscConfig+0x566>
 800579a:	bf00      	nop
 800579c:	58024400 	.word	0x58024400
 80057a0:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057a4:	f7fe fbb0 	bl	8003f08 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e11a      	b.n	80059f0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057ba:	4b8f      	ldr	r3, [pc, #572]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 80057bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0ee      	beq.n	80057a4 <HAL_RCC_OscConfig+0x550>
 80057c6:	e014      	b.n	80057f2 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c8:	f7fe fb9e 	bl	8003f08 <HAL_GetTick>
 80057cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057ce:	e00a      	b.n	80057e6 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057d0:	f7fe fb9a 	bl	8003f08 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	f241 3288 	movw	r2, #5000	; 0x1388
 80057de:	4293      	cmp	r3, r2
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e104      	b.n	80059f0 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057e6:	4b84      	ldr	r3, [pc, #528]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 80057e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1ee      	bne.n	80057d0 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 80f9 	beq.w	80059ee <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80057fc:	4b7e      	ldr	r3, [pc, #504]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005804:	2b18      	cmp	r3, #24
 8005806:	f000 80b4 	beq.w	8005972 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580e:	2b02      	cmp	r3, #2
 8005810:	f040 8095 	bne.w	800593e <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005814:	4b78      	ldr	r3, [pc, #480]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a77      	ldr	r2, [pc, #476]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 800581a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800581e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005820:	f7fe fb72 	bl	8003f08 <HAL_GetTick>
 8005824:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005826:	e008      	b.n	800583a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005828:	f7fe fb6e 	bl	8003f08 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b02      	cmp	r3, #2
 8005834:	d901      	bls.n	800583a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e0da      	b.n	80059f0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800583a:	4b6f      	ldr	r3, [pc, #444]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1f0      	bne.n	8005828 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005846:	4b6c      	ldr	r3, [pc, #432]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 8005848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800584a:	4b6c      	ldr	r3, [pc, #432]	; (80059fc <HAL_RCC_OscConfig+0x7a8>)
 800584c:	4013      	ands	r3, r2
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005856:	0112      	lsls	r2, r2, #4
 8005858:	430a      	orrs	r2, r1
 800585a:	4967      	ldr	r1, [pc, #412]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 800585c:	4313      	orrs	r3, r2
 800585e:	628b      	str	r3, [r1, #40]	; 0x28
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005864:	3b01      	subs	r3, #1
 8005866:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800586e:	3b01      	subs	r3, #1
 8005870:	025b      	lsls	r3, r3, #9
 8005872:	b29b      	uxth	r3, r3
 8005874:	431a      	orrs	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587a:	3b01      	subs	r3, #1
 800587c:	041b      	lsls	r3, r3, #16
 800587e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005882:	431a      	orrs	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005888:	3b01      	subs	r3, #1
 800588a:	061b      	lsls	r3, r3, #24
 800588c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005890:	4959      	ldr	r1, [pc, #356]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 8005892:	4313      	orrs	r3, r2
 8005894:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005896:	4b58      	ldr	r3, [pc, #352]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 8005898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589a:	4a57      	ldr	r2, [pc, #348]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 800589c:	f023 0301 	bic.w	r3, r3, #1
 80058a0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80058a2:	4b55      	ldr	r3, [pc, #340]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 80058a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058a6:	4b56      	ldr	r3, [pc, #344]	; (8005a00 <HAL_RCC_OscConfig+0x7ac>)
 80058a8:	4013      	ands	r3, r2
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80058ae:	00d2      	lsls	r2, r2, #3
 80058b0:	4951      	ldr	r1, [pc, #324]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80058b6:	4b50      	ldr	r3, [pc, #320]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 80058b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ba:	f023 020c 	bic.w	r2, r3, #12
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	494d      	ldr	r1, [pc, #308]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80058c8:	4b4b      	ldr	r3, [pc, #300]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 80058ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058cc:	f023 0202 	bic.w	r2, r3, #2
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d4:	4948      	ldr	r1, [pc, #288]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80058da:	4b47      	ldr	r3, [pc, #284]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 80058dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058de:	4a46      	ldr	r2, [pc, #280]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 80058e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058e6:	4b44      	ldr	r3, [pc, #272]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 80058e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ea:	4a43      	ldr	r2, [pc, #268]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 80058ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80058f2:	4b41      	ldr	r3, [pc, #260]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 80058f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f6:	4a40      	ldr	r2, [pc, #256]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 80058f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80058fe:	4b3e      	ldr	r3, [pc, #248]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 8005900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005902:	4a3d      	ldr	r2, [pc, #244]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 8005904:	f043 0301 	orr.w	r3, r3, #1
 8005908:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800590a:	4b3b      	ldr	r3, [pc, #236]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a3a      	ldr	r2, [pc, #232]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 8005910:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005916:	f7fe faf7 	bl	8003f08 <HAL_GetTick>
 800591a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800591c:	e008      	b.n	8005930 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800591e:	f7fe faf3 	bl	8003f08 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d901      	bls.n	8005930 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e05f      	b.n	80059f0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005930:	4b31      	ldr	r3, [pc, #196]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d0f0      	beq.n	800591e <HAL_RCC_OscConfig+0x6ca>
 800593c:	e057      	b.n	80059ee <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800593e:	4b2e      	ldr	r3, [pc, #184]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a2d      	ldr	r2, [pc, #180]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 8005944:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594a:	f7fe fadd 	bl	8003f08 <HAL_GetTick>
 800594e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005950:	e008      	b.n	8005964 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005952:	f7fe fad9 	bl	8003f08 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d901      	bls.n	8005964 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e045      	b.n	80059f0 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005964:	4b24      	ldr	r3, [pc, #144]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1f0      	bne.n	8005952 <HAL_RCC_OscConfig+0x6fe>
 8005970:	e03d      	b.n	80059ee <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005972:	4b21      	ldr	r3, [pc, #132]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 8005974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005976:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005978:	4b1f      	ldr	r3, [pc, #124]	; (80059f8 <HAL_RCC_OscConfig+0x7a4>)
 800597a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	2b01      	cmp	r3, #1
 8005984:	d031      	beq.n	80059ea <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	f003 0203 	and.w	r2, r3, #3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005990:	429a      	cmp	r2, r3
 8005992:	d12a      	bne.n	80059ea <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	091b      	lsrs	r3, r3, #4
 8005998:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d122      	bne.n	80059ea <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ae:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d11a      	bne.n	80059ea <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	0a5b      	lsrs	r3, r3, #9
 80059b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d111      	bne.n	80059ea <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	0c1b      	lsrs	r3, r3, #16
 80059ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d108      	bne.n	80059ea <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	0e1b      	lsrs	r3, r3, #24
 80059dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d001      	beq.n	80059ee <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e000      	b.n	80059f0 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3730      	adds	r7, #48	; 0x30
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	58024400 	.word	0x58024400
 80059fc:	fffffc0c 	.word	0xfffffc0c
 8005a00:	ffff0007 	.word	0xffff0007

08005a04 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e19c      	b.n	8005d52 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a18:	4b8a      	ldr	r3, [pc, #552]	; (8005c44 <HAL_RCC_ClockConfig+0x240>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 030f 	and.w	r3, r3, #15
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d910      	bls.n	8005a48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a26:	4b87      	ldr	r3, [pc, #540]	; (8005c44 <HAL_RCC_ClockConfig+0x240>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f023 020f 	bic.w	r2, r3, #15
 8005a2e:	4985      	ldr	r1, [pc, #532]	; (8005c44 <HAL_RCC_ClockConfig+0x240>)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a36:	4b83      	ldr	r3, [pc, #524]	; (8005c44 <HAL_RCC_ClockConfig+0x240>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 030f 	and.w	r3, r3, #15
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d001      	beq.n	8005a48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e184      	b.n	8005d52 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d010      	beq.n	8005a76 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691a      	ldr	r2, [r3, #16]
 8005a58:	4b7b      	ldr	r3, [pc, #492]	; (8005c48 <HAL_RCC_ClockConfig+0x244>)
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d908      	bls.n	8005a76 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a64:	4b78      	ldr	r3, [pc, #480]	; (8005c48 <HAL_RCC_ClockConfig+0x244>)
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	4975      	ldr	r1, [pc, #468]	; (8005c48 <HAL_RCC_ClockConfig+0x244>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0308 	and.w	r3, r3, #8
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d010      	beq.n	8005aa4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	695a      	ldr	r2, [r3, #20]
 8005a86:	4b70      	ldr	r3, [pc, #448]	; (8005c48 <HAL_RCC_ClockConfig+0x244>)
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d908      	bls.n	8005aa4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a92:	4b6d      	ldr	r3, [pc, #436]	; (8005c48 <HAL_RCC_ClockConfig+0x244>)
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	496a      	ldr	r1, [pc, #424]	; (8005c48 <HAL_RCC_ClockConfig+0x244>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0310 	and.w	r3, r3, #16
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d010      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	699a      	ldr	r2, [r3, #24]
 8005ab4:	4b64      	ldr	r3, [pc, #400]	; (8005c48 <HAL_RCC_ClockConfig+0x244>)
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d908      	bls.n	8005ad2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ac0:	4b61      	ldr	r3, [pc, #388]	; (8005c48 <HAL_RCC_ClockConfig+0x244>)
 8005ac2:	69db      	ldr	r3, [r3, #28]
 8005ac4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	495e      	ldr	r1, [pc, #376]	; (8005c48 <HAL_RCC_ClockConfig+0x244>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0320 	and.w	r3, r3, #32
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d010      	beq.n	8005b00 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	69da      	ldr	r2, [r3, #28]
 8005ae2:	4b59      	ldr	r3, [pc, #356]	; (8005c48 <HAL_RCC_ClockConfig+0x244>)
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d908      	bls.n	8005b00 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005aee:	4b56      	ldr	r3, [pc, #344]	; (8005c48 <HAL_RCC_ClockConfig+0x244>)
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	4953      	ldr	r1, [pc, #332]	; (8005c48 <HAL_RCC_ClockConfig+0x244>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d010      	beq.n	8005b2e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68da      	ldr	r2, [r3, #12]
 8005b10:	4b4d      	ldr	r3, [pc, #308]	; (8005c48 <HAL_RCC_ClockConfig+0x244>)
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	f003 030f 	and.w	r3, r3, #15
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d908      	bls.n	8005b2e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b1c:	4b4a      	ldr	r3, [pc, #296]	; (8005c48 <HAL_RCC_ClockConfig+0x244>)
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	f023 020f 	bic.w	r2, r3, #15
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	4947      	ldr	r1, [pc, #284]	; (8005c48 <HAL_RCC_ClockConfig+0x244>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d055      	beq.n	8005be6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005b3a:	4b43      	ldr	r3, [pc, #268]	; (8005c48 <HAL_RCC_ClockConfig+0x244>)
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	4940      	ldr	r1, [pc, #256]	; (8005c48 <HAL_RCC_ClockConfig+0x244>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d107      	bne.n	8005b64 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b54:	4b3c      	ldr	r3, [pc, #240]	; (8005c48 <HAL_RCC_ClockConfig+0x244>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d121      	bne.n	8005ba4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e0f6      	b.n	8005d52 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	2b03      	cmp	r3, #3
 8005b6a:	d107      	bne.n	8005b7c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b6c:	4b36      	ldr	r3, [pc, #216]	; (8005c48 <HAL_RCC_ClockConfig+0x244>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d115      	bne.n	8005ba4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e0ea      	b.n	8005d52 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d107      	bne.n	8005b94 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b84:	4b30      	ldr	r3, [pc, #192]	; (8005c48 <HAL_RCC_ClockConfig+0x244>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d109      	bne.n	8005ba4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e0de      	b.n	8005d52 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b94:	4b2c      	ldr	r3, [pc, #176]	; (8005c48 <HAL_RCC_ClockConfig+0x244>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e0d6      	b.n	8005d52 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ba4:	4b28      	ldr	r3, [pc, #160]	; (8005c48 <HAL_RCC_ClockConfig+0x244>)
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	f023 0207 	bic.w	r2, r3, #7
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	4925      	ldr	r1, [pc, #148]	; (8005c48 <HAL_RCC_ClockConfig+0x244>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bb6:	f7fe f9a7 	bl	8003f08 <HAL_GetTick>
 8005bba:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bbc:	e00a      	b.n	8005bd4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bbe:	f7fe f9a3 	bl	8003f08 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d901      	bls.n	8005bd4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e0be      	b.n	8005d52 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bd4:	4b1c      	ldr	r3, [pc, #112]	; (8005c48 <HAL_RCC_ClockConfig+0x244>)
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	00db      	lsls	r3, r3, #3
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d1eb      	bne.n	8005bbe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0302 	and.w	r3, r3, #2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d010      	beq.n	8005c14 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68da      	ldr	r2, [r3, #12]
 8005bf6:	4b14      	ldr	r3, [pc, #80]	; (8005c48 <HAL_RCC_ClockConfig+0x244>)
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	f003 030f 	and.w	r3, r3, #15
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d208      	bcs.n	8005c14 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c02:	4b11      	ldr	r3, [pc, #68]	; (8005c48 <HAL_RCC_ClockConfig+0x244>)
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	f023 020f 	bic.w	r2, r3, #15
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	490e      	ldr	r1, [pc, #56]	; (8005c48 <HAL_RCC_ClockConfig+0x244>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c14:	4b0b      	ldr	r3, [pc, #44]	; (8005c44 <HAL_RCC_ClockConfig+0x240>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 030f 	and.w	r3, r3, #15
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d214      	bcs.n	8005c4c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c22:	4b08      	ldr	r3, [pc, #32]	; (8005c44 <HAL_RCC_ClockConfig+0x240>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f023 020f 	bic.w	r2, r3, #15
 8005c2a:	4906      	ldr	r1, [pc, #24]	; (8005c44 <HAL_RCC_ClockConfig+0x240>)
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c32:	4b04      	ldr	r3, [pc, #16]	; (8005c44 <HAL_RCC_ClockConfig+0x240>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 030f 	and.w	r3, r3, #15
 8005c3a:	683a      	ldr	r2, [r7, #0]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d005      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e086      	b.n	8005d52 <HAL_RCC_ClockConfig+0x34e>
 8005c44:	52002000 	.word	0x52002000
 8005c48:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0304 	and.w	r3, r3, #4
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d010      	beq.n	8005c7a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691a      	ldr	r2, [r3, #16]
 8005c5c:	4b3f      	ldr	r3, [pc, #252]	; (8005d5c <HAL_RCC_ClockConfig+0x358>)
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d208      	bcs.n	8005c7a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c68:	4b3c      	ldr	r3, [pc, #240]	; (8005d5c <HAL_RCC_ClockConfig+0x358>)
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	4939      	ldr	r1, [pc, #228]	; (8005d5c <HAL_RCC_ClockConfig+0x358>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0308 	and.w	r3, r3, #8
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d010      	beq.n	8005ca8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	695a      	ldr	r2, [r3, #20]
 8005c8a:	4b34      	ldr	r3, [pc, #208]	; (8005d5c <HAL_RCC_ClockConfig+0x358>)
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d208      	bcs.n	8005ca8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c96:	4b31      	ldr	r3, [pc, #196]	; (8005d5c <HAL_RCC_ClockConfig+0x358>)
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	492e      	ldr	r1, [pc, #184]	; (8005d5c <HAL_RCC_ClockConfig+0x358>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0310 	and.w	r3, r3, #16
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d010      	beq.n	8005cd6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	699a      	ldr	r2, [r3, #24]
 8005cb8:	4b28      	ldr	r3, [pc, #160]	; (8005d5c <HAL_RCC_ClockConfig+0x358>)
 8005cba:	69db      	ldr	r3, [r3, #28]
 8005cbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d208      	bcs.n	8005cd6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005cc4:	4b25      	ldr	r3, [pc, #148]	; (8005d5c <HAL_RCC_ClockConfig+0x358>)
 8005cc6:	69db      	ldr	r3, [r3, #28]
 8005cc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	4922      	ldr	r1, [pc, #136]	; (8005d5c <HAL_RCC_ClockConfig+0x358>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0320 	and.w	r3, r3, #32
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d010      	beq.n	8005d04 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	69da      	ldr	r2, [r3, #28]
 8005ce6:	4b1d      	ldr	r3, [pc, #116]	; (8005d5c <HAL_RCC_ClockConfig+0x358>)
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d208      	bcs.n	8005d04 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005cf2:	4b1a      	ldr	r3, [pc, #104]	; (8005d5c <HAL_RCC_ClockConfig+0x358>)
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	4917      	ldr	r1, [pc, #92]	; (8005d5c <HAL_RCC_ClockConfig+0x358>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005d04:	f000 f834 	bl	8005d70 <HAL_RCC_GetSysClockFreq>
 8005d08:	4601      	mov	r1, r0
 8005d0a:	4b14      	ldr	r3, [pc, #80]	; (8005d5c <HAL_RCC_ClockConfig+0x358>)
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	0a1b      	lsrs	r3, r3, #8
 8005d10:	f003 030f 	and.w	r3, r3, #15
 8005d14:	4a12      	ldr	r2, [pc, #72]	; (8005d60 <HAL_RCC_ClockConfig+0x35c>)
 8005d16:	5cd3      	ldrb	r3, [r2, r3]
 8005d18:	f003 031f 	and.w	r3, r3, #31
 8005d1c:	fa21 f303 	lsr.w	r3, r1, r3
 8005d20:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d22:	4b0e      	ldr	r3, [pc, #56]	; (8005d5c <HAL_RCC_ClockConfig+0x358>)
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	f003 030f 	and.w	r3, r3, #15
 8005d2a:	4a0d      	ldr	r2, [pc, #52]	; (8005d60 <HAL_RCC_ClockConfig+0x35c>)
 8005d2c:	5cd3      	ldrb	r3, [r2, r3]
 8005d2e:	f003 031f 	and.w	r3, r3, #31
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	fa22 f303 	lsr.w	r3, r2, r3
 8005d38:	4a0a      	ldr	r2, [pc, #40]	; (8005d64 <HAL_RCC_ClockConfig+0x360>)
 8005d3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d3c:	4a0a      	ldr	r2, [pc, #40]	; (8005d68 <HAL_RCC_ClockConfig+0x364>)
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005d42:	4b0a      	ldr	r3, [pc, #40]	; (8005d6c <HAL_RCC_ClockConfig+0x368>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fe f894 	bl	8003e74 <HAL_InitTick>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3718      	adds	r7, #24
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	58024400 	.word	0x58024400
 8005d60:	0800edb8 	.word	0x0800edb8
 8005d64:	2400036c 	.word	0x2400036c
 8005d68:	24000368 	.word	0x24000368
 8005d6c:	24000370 	.word	0x24000370

08005d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b089      	sub	sp, #36	; 0x24
 8005d74:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d76:	4baf      	ldr	r3, [pc, #700]	; (8006034 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d7e:	2b18      	cmp	r3, #24
 8005d80:	f200 814e 	bhi.w	8006020 <HAL_RCC_GetSysClockFreq+0x2b0>
 8005d84:	a201      	add	r2, pc, #4	; (adr r2, 8005d8c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8a:	bf00      	nop
 8005d8c:	08005df1 	.word	0x08005df1
 8005d90:	08006021 	.word	0x08006021
 8005d94:	08006021 	.word	0x08006021
 8005d98:	08006021 	.word	0x08006021
 8005d9c:	08006021 	.word	0x08006021
 8005da0:	08006021 	.word	0x08006021
 8005da4:	08006021 	.word	0x08006021
 8005da8:	08006021 	.word	0x08006021
 8005dac:	08005e17 	.word	0x08005e17
 8005db0:	08006021 	.word	0x08006021
 8005db4:	08006021 	.word	0x08006021
 8005db8:	08006021 	.word	0x08006021
 8005dbc:	08006021 	.word	0x08006021
 8005dc0:	08006021 	.word	0x08006021
 8005dc4:	08006021 	.word	0x08006021
 8005dc8:	08006021 	.word	0x08006021
 8005dcc:	08005e1d 	.word	0x08005e1d
 8005dd0:	08006021 	.word	0x08006021
 8005dd4:	08006021 	.word	0x08006021
 8005dd8:	08006021 	.word	0x08006021
 8005ddc:	08006021 	.word	0x08006021
 8005de0:	08006021 	.word	0x08006021
 8005de4:	08006021 	.word	0x08006021
 8005de8:	08006021 	.word	0x08006021
 8005dec:	08005e23 	.word	0x08005e23
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005df0:	4b90      	ldr	r3, [pc, #576]	; (8006034 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0320 	and.w	r3, r3, #32
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d009      	beq.n	8005e10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005dfc:	4b8d      	ldr	r3, [pc, #564]	; (8006034 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	08db      	lsrs	r3, r3, #3
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	4a8c      	ldr	r2, [pc, #560]	; (8006038 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005e08:	fa22 f303 	lsr.w	r3, r2, r3
 8005e0c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005e0e:	e10a      	b.n	8006026 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005e10:	4b89      	ldr	r3, [pc, #548]	; (8006038 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005e12:	61bb      	str	r3, [r7, #24]
    break;
 8005e14:	e107      	b.n	8006026 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005e16:	4b89      	ldr	r3, [pc, #548]	; (800603c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005e18:	61bb      	str	r3, [r7, #24]
    break;
 8005e1a:	e104      	b.n	8006026 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005e1c:	4b88      	ldr	r3, [pc, #544]	; (8006040 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8005e1e:	61bb      	str	r3, [r7, #24]
    break;
 8005e20:	e101      	b.n	8006026 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e22:	4b84      	ldr	r3, [pc, #528]	; (8006034 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e26:	f003 0303 	and.w	r3, r3, #3
 8005e2a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005e2c:	4b81      	ldr	r3, [pc, #516]	; (8006034 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e30:	091b      	lsrs	r3, r3, #4
 8005e32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e36:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005e38:	4b7e      	ldr	r3, [pc, #504]	; (8006034 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005e42:	4b7c      	ldr	r3, [pc, #496]	; (8006034 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e46:	08db      	lsrs	r3, r3, #3
 8005e48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	fb02 f303 	mul.w	r3, r2, r3
 8005e52:	ee07 3a90 	vmov	s15, r3
 8005e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e5a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 80da 	beq.w	800601a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d05a      	beq.n	8005f22 <HAL_RCC_GetSysClockFreq+0x1b2>
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d302      	bcc.n	8005e76 <HAL_RCC_GetSysClockFreq+0x106>
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d078      	beq.n	8005f66 <HAL_RCC_GetSysClockFreq+0x1f6>
 8005e74:	e099      	b.n	8005faa <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e76:	4b6f      	ldr	r3, [pc, #444]	; (8006034 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0320 	and.w	r3, r3, #32
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d02d      	beq.n	8005ede <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e82:	4b6c      	ldr	r3, [pc, #432]	; (8006034 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	08db      	lsrs	r3, r3, #3
 8005e88:	f003 0303 	and.w	r3, r3, #3
 8005e8c:	4a6a      	ldr	r2, [pc, #424]	; (8006038 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e92:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	ee07 3a90 	vmov	s15, r3
 8005e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	ee07 3a90 	vmov	s15, r3
 8005ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eac:	4b61      	ldr	r3, [pc, #388]	; (8006034 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb4:	ee07 3a90 	vmov	s15, r3
 8005eb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ebc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ec0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006044 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005ec4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ec8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ecc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ed0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ed4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005edc:	e087      	b.n	8005fee <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	ee07 3a90 	vmov	s15, r3
 8005ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006048 <HAL_RCC_GetSysClockFreq+0x2d8>
 8005eec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ef0:	4b50      	ldr	r3, [pc, #320]	; (8006034 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef8:	ee07 3a90 	vmov	s15, r3
 8005efc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f00:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f04:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006044 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005f08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f20:	e065      	b.n	8005fee <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	ee07 3a90 	vmov	s15, r3
 8005f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800604c <HAL_RCC_GetSysClockFreq+0x2dc>
 8005f30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f34:	4b3f      	ldr	r3, [pc, #252]	; (8006034 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f3c:	ee07 3a90 	vmov	s15, r3
 8005f40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f44:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f48:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006044 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005f4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f64:	e043      	b.n	8005fee <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	ee07 3a90 	vmov	s15, r3
 8005f6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f70:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006050 <HAL_RCC_GetSysClockFreq+0x2e0>
 8005f74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f78:	4b2e      	ldr	r3, [pc, #184]	; (8006034 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f80:	ee07 3a90 	vmov	s15, r3
 8005f84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f88:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f8c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006044 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005f90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fa8:	e021      	b.n	8005fee <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	ee07 3a90 	vmov	s15, r3
 8005fb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800604c <HAL_RCC_GetSysClockFreq+0x2dc>
 8005fb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fbc:	4b1d      	ldr	r3, [pc, #116]	; (8006034 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc4:	ee07 3a90 	vmov	s15, r3
 8005fc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fcc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fd0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006044 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005fd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fe0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fe8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fec:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005fee:	4b11      	ldr	r3, [pc, #68]	; (8006034 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff2:	0a5b      	lsrs	r3, r3, #9
 8005ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	ee07 3a90 	vmov	s15, r3
 8006002:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006006:	edd7 6a07 	vldr	s13, [r7, #28]
 800600a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800600e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006012:	ee17 3a90 	vmov	r3, s15
 8006016:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006018:	e005      	b.n	8006026 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800601a:	2300      	movs	r3, #0
 800601c:	61bb      	str	r3, [r7, #24]
    break;
 800601e:	e002      	b.n	8006026 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006020:	4b06      	ldr	r3, [pc, #24]	; (800603c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006022:	61bb      	str	r3, [r7, #24]
    break;
 8006024:	bf00      	nop
  }

  return sysclockfreq;
 8006026:	69bb      	ldr	r3, [r7, #24]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3724      	adds	r7, #36	; 0x24
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	58024400 	.word	0x58024400
 8006038:	03d09000 	.word	0x03d09000
 800603c:	003d0900 	.word	0x003d0900
 8006040:	007a1200 	.word	0x007a1200
 8006044:	46000000 	.word	0x46000000
 8006048:	4c742400 	.word	0x4c742400
 800604c:	4a742400 	.word	0x4a742400
 8006050:	4af42400 	.word	0x4af42400

08006054 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800605a:	f7ff fe89 	bl	8005d70 <HAL_RCC_GetSysClockFreq>
 800605e:	4601      	mov	r1, r0
 8006060:	4b10      	ldr	r3, [pc, #64]	; (80060a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	0a1b      	lsrs	r3, r3, #8
 8006066:	f003 030f 	and.w	r3, r3, #15
 800606a:	4a0f      	ldr	r2, [pc, #60]	; (80060a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800606c:	5cd3      	ldrb	r3, [r2, r3]
 800606e:	f003 031f 	and.w	r3, r3, #31
 8006072:	fa21 f303 	lsr.w	r3, r1, r3
 8006076:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006078:	4b0a      	ldr	r3, [pc, #40]	; (80060a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	f003 030f 	and.w	r3, r3, #15
 8006080:	4a09      	ldr	r2, [pc, #36]	; (80060a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006082:	5cd3      	ldrb	r3, [r2, r3]
 8006084:	f003 031f 	and.w	r3, r3, #31
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	fa22 f303 	lsr.w	r3, r2, r3
 800608e:	4a07      	ldr	r2, [pc, #28]	; (80060ac <HAL_RCC_GetHCLKFreq+0x58>)
 8006090:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006092:	4a07      	ldr	r2, [pc, #28]	; (80060b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006098:	4b04      	ldr	r3, [pc, #16]	; (80060ac <HAL_RCC_GetHCLKFreq+0x58>)
 800609a:	681b      	ldr	r3, [r3, #0]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3708      	adds	r7, #8
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	58024400 	.word	0x58024400
 80060a8:	0800edb8 	.word	0x0800edb8
 80060ac:	2400036c 	.word	0x2400036c
 80060b0:	24000368 	.word	0x24000368

080060b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80060b8:	f7ff ffcc 	bl	8006054 <HAL_RCC_GetHCLKFreq>
 80060bc:	4601      	mov	r1, r0
 80060be:	4b06      	ldr	r3, [pc, #24]	; (80060d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	091b      	lsrs	r3, r3, #4
 80060c4:	f003 0307 	and.w	r3, r3, #7
 80060c8:	4a04      	ldr	r2, [pc, #16]	; (80060dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80060ca:	5cd3      	ldrb	r3, [r2, r3]
 80060cc:	f003 031f 	and.w	r3, r3, #31
 80060d0:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	58024400 	.word	0x58024400
 80060dc:	0800edb8 	.word	0x0800edb8

080060e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80060e4:	f7ff ffb6 	bl	8006054 <HAL_RCC_GetHCLKFreq>
 80060e8:	4601      	mov	r1, r0
 80060ea:	4b06      	ldr	r3, [pc, #24]	; (8006104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	0a1b      	lsrs	r3, r3, #8
 80060f0:	f003 0307 	and.w	r3, r3, #7
 80060f4:	4a04      	ldr	r2, [pc, #16]	; (8006108 <HAL_RCC_GetPCLK2Freq+0x28>)
 80060f6:	5cd3      	ldrb	r3, [r2, r3]
 80060f8:	f003 031f 	and.w	r3, r3, #31
 80060fc:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006100:	4618      	mov	r0, r3
 8006102:	bd80      	pop	{r7, pc}
 8006104:	58024400 	.word	0x58024400
 8006108:	0800edb8 	.word	0x0800edb8

0800610c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006114:	2300      	movs	r3, #0
 8006116:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006118:	2300      	movs	r3, #0
 800611a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d03d      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800612c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006130:	d013      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006132:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006136:	d802      	bhi.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006138:	2b00      	cmp	r3, #0
 800613a:	d007      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800613c:	e01f      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800613e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006142:	d013      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006144:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006148:	d01c      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800614a:	e018      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800614c:	4baf      	ldr	r3, [pc, #700]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800614e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006150:	4aae      	ldr	r2, [pc, #696]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006156:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006158:	e015      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	3304      	adds	r3, #4
 800615e:	2102      	movs	r1, #2
 8006160:	4618      	mov	r0, r3
 8006162:	f001 f95f 	bl	8007424 <RCCEx_PLL2_Config>
 8006166:	4603      	mov	r3, r0
 8006168:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800616a:	e00c      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	3324      	adds	r3, #36	; 0x24
 8006170:	2102      	movs	r1, #2
 8006172:	4618      	mov	r0, r3
 8006174:	f001 fa08 	bl	8007588 <RCCEx_PLL3_Config>
 8006178:	4603      	mov	r3, r0
 800617a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800617c:	e003      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	75fb      	strb	r3, [r7, #23]
      break;
 8006182:	e000      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006184:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006186:	7dfb      	ldrb	r3, [r7, #23]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d109      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800618c:	4b9f      	ldr	r3, [pc, #636]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800618e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006190:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006198:	499c      	ldr	r1, [pc, #624]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800619a:	4313      	orrs	r3, r2
 800619c:	650b      	str	r3, [r1, #80]	; 0x50
 800619e:	e001      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a0:	7dfb      	ldrb	r3, [r7, #23]
 80061a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d03d      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	d826      	bhi.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80061b8:	a201      	add	r2, pc, #4	; (adr r2, 80061c0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80061ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061be:	bf00      	nop
 80061c0:	080061d5 	.word	0x080061d5
 80061c4:	080061e3 	.word	0x080061e3
 80061c8:	080061f5 	.word	0x080061f5
 80061cc:	0800620d 	.word	0x0800620d
 80061d0:	0800620d 	.word	0x0800620d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061d4:	4b8d      	ldr	r3, [pc, #564]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80061d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d8:	4a8c      	ldr	r2, [pc, #560]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80061da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80061e0:	e015      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	3304      	adds	r3, #4
 80061e6:	2100      	movs	r1, #0
 80061e8:	4618      	mov	r0, r3
 80061ea:	f001 f91b 	bl	8007424 <RCCEx_PLL2_Config>
 80061ee:	4603      	mov	r3, r0
 80061f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80061f2:	e00c      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	3324      	adds	r3, #36	; 0x24
 80061f8:	2100      	movs	r1, #0
 80061fa:	4618      	mov	r0, r3
 80061fc:	f001 f9c4 	bl	8007588 <RCCEx_PLL3_Config>
 8006200:	4603      	mov	r3, r0
 8006202:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006204:	e003      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	75fb      	strb	r3, [r7, #23]
      break;
 800620a:	e000      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800620c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800620e:	7dfb      	ldrb	r3, [r7, #23]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d109      	bne.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006214:	4b7d      	ldr	r3, [pc, #500]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006218:	f023 0207 	bic.w	r2, r3, #7
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006220:	497a      	ldr	r1, [pc, #488]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006222:	4313      	orrs	r3, r2
 8006224:	650b      	str	r3, [r1, #80]	; 0x50
 8006226:	e001      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006228:	7dfb      	ldrb	r3, [r7, #23]
 800622a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006234:	2b00      	cmp	r3, #0
 8006236:	d03e      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800623c:	2b80      	cmp	r3, #128	; 0x80
 800623e:	d01c      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006240:	2b80      	cmp	r3, #128	; 0x80
 8006242:	d804      	bhi.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006244:	2b00      	cmp	r3, #0
 8006246:	d008      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006248:	2b40      	cmp	r3, #64	; 0x40
 800624a:	d00d      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800624c:	e01e      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800624e:	2bc0      	cmp	r3, #192	; 0xc0
 8006250:	d01f      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006256:	d01e      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006258:	e018      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800625a:	4b6c      	ldr	r3, [pc, #432]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800625c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625e:	4a6b      	ldr	r2, [pc, #428]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006264:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006266:	e017      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	3304      	adds	r3, #4
 800626c:	2100      	movs	r1, #0
 800626e:	4618      	mov	r0, r3
 8006270:	f001 f8d8 	bl	8007424 <RCCEx_PLL2_Config>
 8006274:	4603      	mov	r3, r0
 8006276:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006278:	e00e      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	3324      	adds	r3, #36	; 0x24
 800627e:	2100      	movs	r1, #0
 8006280:	4618      	mov	r0, r3
 8006282:	f001 f981 	bl	8007588 <RCCEx_PLL3_Config>
 8006286:	4603      	mov	r3, r0
 8006288:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800628a:	e005      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	75fb      	strb	r3, [r7, #23]
      break;
 8006290:	e002      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006292:	bf00      	nop
 8006294:	e000      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006296:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006298:	7dfb      	ldrb	r3, [r7, #23]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d109      	bne.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800629e:	4b5b      	ldr	r3, [pc, #364]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062aa:	4958      	ldr	r1, [pc, #352]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062ac:	4313      	orrs	r3, r2
 80062ae:	650b      	str	r3, [r1, #80]	; 0x50
 80062b0:	e001      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b2:	7dfb      	ldrb	r3, [r7, #23]
 80062b4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d044      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062cc:	d01f      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80062ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062d2:	d805      	bhi.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00a      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80062d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062dc:	d00e      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80062de:	e01f      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80062e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80062e4:	d01f      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80062e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062ea:	d01e      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80062ec:	e018      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062ee:	4b47      	ldr	r3, [pc, #284]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f2:	4a46      	ldr	r2, [pc, #280]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062fa:	e017      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3304      	adds	r3, #4
 8006300:	2100      	movs	r1, #0
 8006302:	4618      	mov	r0, r3
 8006304:	f001 f88e 	bl	8007424 <RCCEx_PLL2_Config>
 8006308:	4603      	mov	r3, r0
 800630a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800630c:	e00e      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	3324      	adds	r3, #36	; 0x24
 8006312:	2100      	movs	r1, #0
 8006314:	4618      	mov	r0, r3
 8006316:	f001 f937 	bl	8007588 <RCCEx_PLL3_Config>
 800631a:	4603      	mov	r3, r0
 800631c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800631e:	e005      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	75fb      	strb	r3, [r7, #23]
      break;
 8006324:	e002      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006326:	bf00      	nop
 8006328:	e000      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800632a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800632c:	7dfb      	ldrb	r3, [r7, #23]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10a      	bne.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006332:	4b36      	ldr	r3, [pc, #216]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006336:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006340:	4932      	ldr	r1, [pc, #200]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006342:	4313      	orrs	r3, r2
 8006344:	658b      	str	r3, [r1, #88]	; 0x58
 8006346:	e001      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006348:	7dfb      	ldrb	r3, [r7, #23]
 800634a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006354:	2b00      	cmp	r3, #0
 8006356:	d044      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800635e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006362:	d01f      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006364:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006368:	d805      	bhi.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00a      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800636e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006372:	d00e      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006374:	e01f      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006376:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800637a:	d01f      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800637c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006380:	d01e      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006382:	e018      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006384:	4b21      	ldr	r3, [pc, #132]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006388:	4a20      	ldr	r2, [pc, #128]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800638a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800638e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006390:	e017      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	3304      	adds	r3, #4
 8006396:	2100      	movs	r1, #0
 8006398:	4618      	mov	r0, r3
 800639a:	f001 f843 	bl	8007424 <RCCEx_PLL2_Config>
 800639e:	4603      	mov	r3, r0
 80063a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80063a2:	e00e      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	3324      	adds	r3, #36	; 0x24
 80063a8:	2100      	movs	r1, #0
 80063aa:	4618      	mov	r0, r3
 80063ac:	f001 f8ec 	bl	8007588 <RCCEx_PLL3_Config>
 80063b0:	4603      	mov	r3, r0
 80063b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063b4:	e005      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	75fb      	strb	r3, [r7, #23]
      break;
 80063ba:	e002      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80063bc:	bf00      	nop
 80063be:	e000      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80063c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063c2:	7dfb      	ldrb	r3, [r7, #23]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10a      	bne.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80063c8:	4b10      	ldr	r3, [pc, #64]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063cc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80063d6:	490d      	ldr	r1, [pc, #52]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	658b      	str	r3, [r1, #88]	; 0x58
 80063dc:	e001      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063de:	7dfb      	ldrb	r3, [r7, #23]
 80063e0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d035      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063f2:	2b10      	cmp	r3, #16
 80063f4:	d00c      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80063f6:	2b10      	cmp	r3, #16
 80063f8:	d802      	bhi.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d01b      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80063fe:	e017      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006400:	2b20      	cmp	r3, #32
 8006402:	d00c      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006404:	2b30      	cmp	r3, #48	; 0x30
 8006406:	d018      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006408:	e012      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800640a:	bf00      	nop
 800640c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006410:	4baf      	ldr	r3, [pc, #700]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006414:	4aae      	ldr	r2, [pc, #696]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800641a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800641c:	e00e      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	3304      	adds	r3, #4
 8006422:	2102      	movs	r1, #2
 8006424:	4618      	mov	r0, r3
 8006426:	f000 fffd 	bl	8007424 <RCCEx_PLL2_Config>
 800642a:	4603      	mov	r3, r0
 800642c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800642e:	e005      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	75fb      	strb	r3, [r7, #23]
      break;
 8006434:	e002      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006436:	bf00      	nop
 8006438:	e000      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800643a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800643c:	7dfb      	ldrb	r3, [r7, #23]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d109      	bne.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006442:	4ba3      	ldr	r3, [pc, #652]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006446:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800644e:	49a0      	ldr	r1, [pc, #640]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006450:	4313      	orrs	r3, r2
 8006452:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006454:	e001      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006456:	7dfb      	ldrb	r3, [r7, #23]
 8006458:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d042      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800646a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800646e:	d01f      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8006470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006474:	d805      	bhi.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800647a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800647e:	d00e      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8006480:	e01f      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8006482:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006486:	d01f      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006488:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800648c:	d01e      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800648e:	e018      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006490:	4b8f      	ldr	r3, [pc, #572]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006494:	4a8e      	ldr	r2, [pc, #568]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800649a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800649c:	e017      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	3304      	adds	r3, #4
 80064a2:	2100      	movs	r1, #0
 80064a4:	4618      	mov	r0, r3
 80064a6:	f000 ffbd 	bl	8007424 <RCCEx_PLL2_Config>
 80064aa:	4603      	mov	r3, r0
 80064ac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80064ae:	e00e      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	3324      	adds	r3, #36	; 0x24
 80064b4:	2100      	movs	r1, #0
 80064b6:	4618      	mov	r0, r3
 80064b8:	f001 f866 	bl	8007588 <RCCEx_PLL3_Config>
 80064bc:	4603      	mov	r3, r0
 80064be:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80064c0:	e005      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	75fb      	strb	r3, [r7, #23]
      break;
 80064c6:	e002      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80064c8:	bf00      	nop
 80064ca:	e000      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80064cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064ce:	7dfb      	ldrb	r3, [r7, #23]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d109      	bne.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80064d4:	4b7e      	ldr	r3, [pc, #504]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80064d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064e0:	497b      	ldr	r1, [pc, #492]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	650b      	str	r3, [r1, #80]	; 0x50
 80064e6:	e001      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
 80064ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d042      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006500:	d01b      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006502:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006506:	d805      	bhi.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006508:	2b00      	cmp	r3, #0
 800650a:	d022      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800650c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006510:	d00a      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006512:	e01b      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006514:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006518:	d01d      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800651a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800651e:	d01c      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8006520:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006524:	d01b      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006526:	e011      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	3304      	adds	r3, #4
 800652c:	2101      	movs	r1, #1
 800652e:	4618      	mov	r0, r3
 8006530:	f000 ff78 	bl	8007424 <RCCEx_PLL2_Config>
 8006534:	4603      	mov	r3, r0
 8006536:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006538:	e012      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	3324      	adds	r3, #36	; 0x24
 800653e:	2101      	movs	r1, #1
 8006540:	4618      	mov	r0, r3
 8006542:	f001 f821 	bl	8007588 <RCCEx_PLL3_Config>
 8006546:	4603      	mov	r3, r0
 8006548:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800654a:	e009      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	75fb      	strb	r3, [r7, #23]
      break;
 8006550:	e006      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006552:	bf00      	nop
 8006554:	e004      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006556:	bf00      	nop
 8006558:	e002      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800655a:	bf00      	nop
 800655c:	e000      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800655e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006560:	7dfb      	ldrb	r3, [r7, #23]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d109      	bne.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006566:	4b5a      	ldr	r3, [pc, #360]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800656a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006572:	4957      	ldr	r1, [pc, #348]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006574:	4313      	orrs	r3, r2
 8006576:	650b      	str	r3, [r1, #80]	; 0x50
 8006578:	e001      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800657a:	7dfb      	ldrb	r3, [r7, #23]
 800657c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d044      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006590:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006594:	d01b      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006596:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800659a:	d805      	bhi.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800659c:	2b00      	cmp	r3, #0
 800659e:	d022      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80065a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065a4:	d00a      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80065a6:	e01b      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80065a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ac:	d01d      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80065ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065b2:	d01c      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80065b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065b8:	d01b      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80065ba:	e011      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3304      	adds	r3, #4
 80065c0:	2101      	movs	r1, #1
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 ff2e 	bl	8007424 <RCCEx_PLL2_Config>
 80065c8:	4603      	mov	r3, r0
 80065ca:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80065cc:	e012      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	3324      	adds	r3, #36	; 0x24
 80065d2:	2101      	movs	r1, #1
 80065d4:	4618      	mov	r0, r3
 80065d6:	f000 ffd7 	bl	8007588 <RCCEx_PLL3_Config>
 80065da:	4603      	mov	r3, r0
 80065dc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80065de:	e009      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	75fb      	strb	r3, [r7, #23]
      break;
 80065e4:	e006      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80065e6:	bf00      	nop
 80065e8:	e004      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80065ea:	bf00      	nop
 80065ec:	e002      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80065ee:	bf00      	nop
 80065f0:	e000      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80065f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065f4:	7dfb      	ldrb	r3, [r7, #23]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10a      	bne.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80065fa:	4b35      	ldr	r3, [pc, #212]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065fe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006608:	4931      	ldr	r1, [pc, #196]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800660a:	4313      	orrs	r3, r2
 800660c:	658b      	str	r3, [r1, #88]	; 0x58
 800660e:	e001      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006610:	7dfb      	ldrb	r3, [r7, #23]
 8006612:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d02d      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006624:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006628:	d005      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800662a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800662e:	d009      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8006630:	2b00      	cmp	r3, #0
 8006632:	d013      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006634:	e00f      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006636:	4b26      	ldr	r3, [pc, #152]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663a:	4a25      	ldr	r2, [pc, #148]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800663c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006640:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006642:	e00c      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3304      	adds	r3, #4
 8006648:	2101      	movs	r1, #1
 800664a:	4618      	mov	r0, r3
 800664c:	f000 feea 	bl	8007424 <RCCEx_PLL2_Config>
 8006650:	4603      	mov	r3, r0
 8006652:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006654:	e003      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	75fb      	strb	r3, [r7, #23]
      break;
 800665a:	e000      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800665c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800665e:	7dfb      	ldrb	r3, [r7, #23]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d109      	bne.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006664:	4b1a      	ldr	r3, [pc, #104]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006668:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006670:	4917      	ldr	r1, [pc, #92]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006672:	4313      	orrs	r3, r2
 8006674:	650b      	str	r3, [r1, #80]	; 0x50
 8006676:	e001      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006678:	7dfb      	ldrb	r3, [r7, #23]
 800667a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d035      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668c:	2b03      	cmp	r3, #3
 800668e:	d81b      	bhi.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006690:	a201      	add	r2, pc, #4	; (adr r2, 8006698 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8006692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006696:	bf00      	nop
 8006698:	080066d5 	.word	0x080066d5
 800669c:	080066a9 	.word	0x080066a9
 80066a0:	080066b7 	.word	0x080066b7
 80066a4:	080066d5 	.word	0x080066d5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066a8:	4b09      	ldr	r3, [pc, #36]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ac:	4a08      	ldr	r2, [pc, #32]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80066b4:	e00f      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	3304      	adds	r3, #4
 80066ba:	2102      	movs	r1, #2
 80066bc:	4618      	mov	r0, r3
 80066be:	f000 feb1 	bl	8007424 <RCCEx_PLL2_Config>
 80066c2:	4603      	mov	r3, r0
 80066c4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80066c6:	e006      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	75fb      	strb	r3, [r7, #23]
      break;
 80066cc:	e003      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80066ce:	bf00      	nop
 80066d0:	58024400 	.word	0x58024400
      break;
 80066d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066d6:	7dfb      	ldrb	r3, [r7, #23]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d109      	bne.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80066dc:	4bba      	ldr	r3, [pc, #744]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e0:	f023 0203 	bic.w	r2, r3, #3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e8:	49b7      	ldr	r1, [pc, #732]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	64cb      	str	r3, [r1, #76]	; 0x4c
 80066ee:	e001      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f0:	7dfb      	ldrb	r3, [r7, #23]
 80066f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 8086 	beq.w	800680e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006702:	4bb2      	ldr	r3, [pc, #712]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4ab1      	ldr	r2, [pc, #708]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800670c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800670e:	f7fd fbfb 	bl	8003f08 <HAL_GetTick>
 8006712:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006714:	e009      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006716:	f7fd fbf7 	bl	8003f08 <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	2b64      	cmp	r3, #100	; 0x64
 8006722:	d902      	bls.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	75fb      	strb	r3, [r7, #23]
        break;
 8006728:	e005      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800672a:	4ba8      	ldr	r3, [pc, #672]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0ef      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8006736:	7dfb      	ldrb	r3, [r7, #23]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d166      	bne.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800673c:	4ba2      	ldr	r3, [pc, #648]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800673e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006746:	4053      	eors	r3, r2
 8006748:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800674c:	2b00      	cmp	r3, #0
 800674e:	d013      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006750:	4b9d      	ldr	r3, [pc, #628]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006758:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800675a:	4b9b      	ldr	r3, [pc, #620]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800675c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675e:	4a9a      	ldr	r2, [pc, #616]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006764:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006766:	4b98      	ldr	r3, [pc, #608]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676a:	4a97      	ldr	r2, [pc, #604]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800676c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006770:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006772:	4a95      	ldr	r2, [pc, #596]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800677e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006782:	d115      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006784:	f7fd fbc0 	bl	8003f08 <HAL_GetTick>
 8006788:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800678a:	e00b      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800678c:	f7fd fbbc 	bl	8003f08 <HAL_GetTick>
 8006790:	4602      	mov	r2, r0
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	f241 3288 	movw	r2, #5000	; 0x1388
 800679a:	4293      	cmp	r3, r2
 800679c:	d902      	bls.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	75fb      	strb	r3, [r7, #23]
            break;
 80067a2:	e005      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067a4:	4b88      	ldr	r3, [pc, #544]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80067a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a8:	f003 0302 	and.w	r3, r3, #2
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d0ed      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80067b0:	7dfb      	ldrb	r3, [r7, #23]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d126      	bne.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067c4:	d10d      	bne.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80067c6:	4b80      	ldr	r3, [pc, #512]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067d4:	0919      	lsrs	r1, r3, #4
 80067d6:	4b7e      	ldr	r3, [pc, #504]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80067d8:	400b      	ands	r3, r1
 80067da:	497b      	ldr	r1, [pc, #492]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	610b      	str	r3, [r1, #16]
 80067e0:	e005      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80067e2:	4b79      	ldr	r3, [pc, #484]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	4a78      	ldr	r2, [pc, #480]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80067e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80067ec:	6113      	str	r3, [r2, #16]
 80067ee:	4b76      	ldr	r3, [pc, #472]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80067f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067fc:	4972      	ldr	r1, [pc, #456]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	670b      	str	r3, [r1, #112]	; 0x70
 8006802:	e004      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006804:	7dfb      	ldrb	r3, [r7, #23]
 8006806:	75bb      	strb	r3, [r7, #22]
 8006808:	e001      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800680a:	7dfb      	ldrb	r3, [r7, #23]
 800680c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	2b00      	cmp	r3, #0
 8006818:	d07d      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800681e:	2b28      	cmp	r3, #40	; 0x28
 8006820:	d866      	bhi.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8006822:	a201      	add	r2, pc, #4	; (adr r2, 8006828 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006828:	080068f7 	.word	0x080068f7
 800682c:	080068f1 	.word	0x080068f1
 8006830:	080068f1 	.word	0x080068f1
 8006834:	080068f1 	.word	0x080068f1
 8006838:	080068f1 	.word	0x080068f1
 800683c:	080068f1 	.word	0x080068f1
 8006840:	080068f1 	.word	0x080068f1
 8006844:	080068f1 	.word	0x080068f1
 8006848:	080068cd 	.word	0x080068cd
 800684c:	080068f1 	.word	0x080068f1
 8006850:	080068f1 	.word	0x080068f1
 8006854:	080068f1 	.word	0x080068f1
 8006858:	080068f1 	.word	0x080068f1
 800685c:	080068f1 	.word	0x080068f1
 8006860:	080068f1 	.word	0x080068f1
 8006864:	080068f1 	.word	0x080068f1
 8006868:	080068df 	.word	0x080068df
 800686c:	080068f1 	.word	0x080068f1
 8006870:	080068f1 	.word	0x080068f1
 8006874:	080068f1 	.word	0x080068f1
 8006878:	080068f1 	.word	0x080068f1
 800687c:	080068f1 	.word	0x080068f1
 8006880:	080068f1 	.word	0x080068f1
 8006884:	080068f1 	.word	0x080068f1
 8006888:	080068f7 	.word	0x080068f7
 800688c:	080068f1 	.word	0x080068f1
 8006890:	080068f1 	.word	0x080068f1
 8006894:	080068f1 	.word	0x080068f1
 8006898:	080068f1 	.word	0x080068f1
 800689c:	080068f1 	.word	0x080068f1
 80068a0:	080068f1 	.word	0x080068f1
 80068a4:	080068f1 	.word	0x080068f1
 80068a8:	080068f7 	.word	0x080068f7
 80068ac:	080068f1 	.word	0x080068f1
 80068b0:	080068f1 	.word	0x080068f1
 80068b4:	080068f1 	.word	0x080068f1
 80068b8:	080068f1 	.word	0x080068f1
 80068bc:	080068f1 	.word	0x080068f1
 80068c0:	080068f1 	.word	0x080068f1
 80068c4:	080068f1 	.word	0x080068f1
 80068c8:	080068f7 	.word	0x080068f7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	3304      	adds	r3, #4
 80068d0:	2101      	movs	r1, #1
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 fda6 	bl	8007424 <RCCEx_PLL2_Config>
 80068d8:	4603      	mov	r3, r0
 80068da:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80068dc:	e00c      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	3324      	adds	r3, #36	; 0x24
 80068e2:	2101      	movs	r1, #1
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 fe4f 	bl	8007588 <RCCEx_PLL3_Config>
 80068ea:	4603      	mov	r3, r0
 80068ec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80068ee:	e003      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	75fb      	strb	r3, [r7, #23]
      break;
 80068f4:	e000      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80068f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068f8:	7dfb      	ldrb	r3, [r7, #23]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d109      	bne.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80068fe:	4b32      	ldr	r3, [pc, #200]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006902:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800690a:	492f      	ldr	r1, [pc, #188]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800690c:	4313      	orrs	r3, r2
 800690e:	654b      	str	r3, [r1, #84]	; 0x54
 8006910:	e001      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006912:	7dfb      	ldrb	r3, [r7, #23]
 8006914:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d037      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006926:	2b05      	cmp	r3, #5
 8006928:	d820      	bhi.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x860>
 800692a:	a201      	add	r2, pc, #4	; (adr r2, 8006930 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800692c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006930:	08006973 	.word	0x08006973
 8006934:	08006949 	.word	0x08006949
 8006938:	0800695b 	.word	0x0800695b
 800693c:	08006973 	.word	0x08006973
 8006940:	08006973 	.word	0x08006973
 8006944:	08006973 	.word	0x08006973
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	3304      	adds	r3, #4
 800694c:	2101      	movs	r1, #1
 800694e:	4618      	mov	r0, r3
 8006950:	f000 fd68 	bl	8007424 <RCCEx_PLL2_Config>
 8006954:	4603      	mov	r3, r0
 8006956:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006958:	e00c      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	3324      	adds	r3, #36	; 0x24
 800695e:	2101      	movs	r1, #1
 8006960:	4618      	mov	r0, r3
 8006962:	f000 fe11 	bl	8007588 <RCCEx_PLL3_Config>
 8006966:	4603      	mov	r3, r0
 8006968:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800696a:	e003      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	75fb      	strb	r3, [r7, #23]
      break;
 8006970:	e000      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8006972:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006974:	7dfb      	ldrb	r3, [r7, #23]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d109      	bne.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800697a:	4b13      	ldr	r3, [pc, #76]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800697c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697e:	f023 0207 	bic.w	r2, r3, #7
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006986:	4910      	ldr	r1, [pc, #64]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006988:	4313      	orrs	r3, r2
 800698a:	654b      	str	r3, [r1, #84]	; 0x54
 800698c:	e001      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800698e:	7dfb      	ldrb	r3, [r7, #23]
 8006990:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0304 	and.w	r3, r3, #4
 800699a:	2b00      	cmp	r3, #0
 800699c:	d040      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a4:	2b05      	cmp	r3, #5
 80069a6:	d827      	bhi.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80069a8:	a201      	add	r2, pc, #4	; (adr r2, 80069b0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80069aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ae:	bf00      	nop
 80069b0:	080069ff 	.word	0x080069ff
 80069b4:	080069d5 	.word	0x080069d5
 80069b8:	080069e7 	.word	0x080069e7
 80069bc:	080069ff 	.word	0x080069ff
 80069c0:	080069ff 	.word	0x080069ff
 80069c4:	080069ff 	.word	0x080069ff
 80069c8:	58024400 	.word	0x58024400
 80069cc:	58024800 	.word	0x58024800
 80069d0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	3304      	adds	r3, #4
 80069d8:	2101      	movs	r1, #1
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 fd22 	bl	8007424 <RCCEx_PLL2_Config>
 80069e0:	4603      	mov	r3, r0
 80069e2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80069e4:	e00c      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	3324      	adds	r3, #36	; 0x24
 80069ea:	2101      	movs	r1, #1
 80069ec:	4618      	mov	r0, r3
 80069ee:	f000 fdcb 	bl	8007588 <RCCEx_PLL3_Config>
 80069f2:	4603      	mov	r3, r0
 80069f4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80069f6:	e003      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	75fb      	strb	r3, [r7, #23]
      break;
 80069fc:	e000      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80069fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a00:	7dfb      	ldrb	r3, [r7, #23]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10a      	bne.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a06:	4bb2      	ldr	r3, [pc, #712]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a0a:	f023 0207 	bic.w	r2, r3, #7
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a14:	49ae      	ldr	r1, [pc, #696]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	658b      	str	r3, [r1, #88]	; 0x58
 8006a1a:	e001      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a1c:	7dfb      	ldrb	r3, [r7, #23]
 8006a1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0320 	and.w	r3, r3, #32
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d044      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a36:	d01b      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8006a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a3c:	d805      	bhi.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d022      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8006a42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a46:	d00a      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006a48:	e01b      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a4e:	d01d      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006a50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a54:	d01c      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006a56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a5a:	d01b      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006a5c:	e011      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	3304      	adds	r3, #4
 8006a62:	2100      	movs	r1, #0
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 fcdd 	bl	8007424 <RCCEx_PLL2_Config>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006a6e:	e012      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	3324      	adds	r3, #36	; 0x24
 8006a74:	2102      	movs	r1, #2
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 fd86 	bl	8007588 <RCCEx_PLL3_Config>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006a80:	e009      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	75fb      	strb	r3, [r7, #23]
      break;
 8006a86:	e006      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006a88:	bf00      	nop
 8006a8a:	e004      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006a8c:	bf00      	nop
 8006a8e:	e002      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006a90:	bf00      	nop
 8006a92:	e000      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006a94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a96:	7dfb      	ldrb	r3, [r7, #23]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10a      	bne.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a9c:	4b8c      	ldr	r3, [pc, #560]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aaa:	4989      	ldr	r1, [pc, #548]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	654b      	str	r3, [r1, #84]	; 0x54
 8006ab0:	e001      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab2:	7dfb      	ldrb	r3, [r7, #23]
 8006ab4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d044      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006acc:	d01b      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8006ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ad2:	d805      	bhi.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d022      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006adc:	d00a      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006ade:	e01b      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8006ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ae4:	d01d      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006ae6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006aea:	d01c      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8006aec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006af0:	d01b      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8006af2:	e011      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	3304      	adds	r3, #4
 8006af8:	2100      	movs	r1, #0
 8006afa:	4618      	mov	r0, r3
 8006afc:	f000 fc92 	bl	8007424 <RCCEx_PLL2_Config>
 8006b00:	4603      	mov	r3, r0
 8006b02:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006b04:	e012      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	3324      	adds	r3, #36	; 0x24
 8006b0a:	2102      	movs	r1, #2
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 fd3b 	bl	8007588 <RCCEx_PLL3_Config>
 8006b12:	4603      	mov	r3, r0
 8006b14:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006b16:	e009      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b1c:	e006      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006b1e:	bf00      	nop
 8006b20:	e004      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006b22:	bf00      	nop
 8006b24:	e002      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006b26:	bf00      	nop
 8006b28:	e000      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006b2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b2c:	7dfb      	ldrb	r3, [r7, #23]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10a      	bne.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b32:	4b67      	ldr	r3, [pc, #412]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b36:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b40:	4963      	ldr	r1, [pc, #396]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	658b      	str	r3, [r1, #88]	; 0x58
 8006b46:	e001      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b48:	7dfb      	ldrb	r3, [r7, #23]
 8006b4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d044      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b62:	d01b      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006b64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b68:	d805      	bhi.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d022      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b72:	d00a      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006b74:	e01b      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8006b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b7a:	d01d      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006b7c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006b80:	d01c      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006b82:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006b86:	d01b      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006b88:	e011      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	3304      	adds	r3, #4
 8006b8e:	2100      	movs	r1, #0
 8006b90:	4618      	mov	r0, r3
 8006b92:	f000 fc47 	bl	8007424 <RCCEx_PLL2_Config>
 8006b96:	4603      	mov	r3, r0
 8006b98:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006b9a:	e012      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	3324      	adds	r3, #36	; 0x24
 8006ba0:	2102      	movs	r1, #2
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 fcf0 	bl	8007588 <RCCEx_PLL3_Config>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006bac:	e009      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	75fb      	strb	r3, [r7, #23]
      break;
 8006bb2:	e006      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006bb4:	bf00      	nop
 8006bb6:	e004      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006bb8:	bf00      	nop
 8006bba:	e002      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006bbc:	bf00      	nop
 8006bbe:	e000      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006bc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bc2:	7dfb      	ldrb	r3, [r7, #23]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10a      	bne.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006bc8:	4b41      	ldr	r3, [pc, #260]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bcc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bd6:	493e      	ldr	r1, [pc, #248]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	658b      	str	r3, [r1, #88]	; 0x58
 8006bdc:	e001      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bde:	7dfb      	ldrb	r3, [r7, #23]
 8006be0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0308 	and.w	r3, r3, #8
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d01a      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf8:	d10a      	bne.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	3324      	adds	r3, #36	; 0x24
 8006bfe:	2102      	movs	r1, #2
 8006c00:	4618      	mov	r0, r3
 8006c02:	f000 fcc1 	bl	8007588 <RCCEx_PLL3_Config>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006c10:	4b2f      	ldr	r3, [pc, #188]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c1e:	492c      	ldr	r1, [pc, #176]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0310 	and.w	r3, r3, #16
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d01a      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c3a:	d10a      	bne.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	3324      	adds	r3, #36	; 0x24
 8006c40:	2102      	movs	r1, #2
 8006c42:	4618      	mov	r0, r3
 8006c44:	f000 fca0 	bl	8007588 <RCCEx_PLL3_Config>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c52:	4b1f      	ldr	r3, [pc, #124]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c60:	491b      	ldr	r1, [pc, #108]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d032      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c7c:	d00d      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8006c7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c82:	d016      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d111      	bne.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	3304      	adds	r3, #4
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 fbc8 	bl	8007424 <RCCEx_PLL2_Config>
 8006c94:	4603      	mov	r3, r0
 8006c96:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006c98:	e00c      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	3324      	adds	r3, #36	; 0x24
 8006c9e:	2102      	movs	r1, #2
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f000 fc71 	bl	8007588 <RCCEx_PLL3_Config>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006caa:	e003      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	75fb      	strb	r3, [r7, #23]
      break;
 8006cb0:	e000      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8006cb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cb4:	7dfb      	ldrb	r3, [r7, #23]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10c      	bne.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006cba:	4b05      	ldr	r3, [pc, #20]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cbe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006cc8:	4901      	ldr	r1, [pc, #4]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	658b      	str	r3, [r1, #88]	; 0x58
 8006cce:	e003      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8006cd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd4:	7dfb      	ldrb	r3, [r7, #23]
 8006cd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d02f      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cee:	d00c      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006cf0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006cf4:	d015      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8006cf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cfa:	d10f      	bne.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cfc:	4b71      	ldr	r3, [pc, #452]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d00:	4a70      	ldr	r2, [pc, #448]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006d08:	e00c      	b.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	3324      	adds	r3, #36	; 0x24
 8006d0e:	2101      	movs	r1, #1
 8006d10:	4618      	mov	r0, r3
 8006d12:	f000 fc39 	bl	8007588 <RCCEx_PLL3_Config>
 8006d16:	4603      	mov	r3, r0
 8006d18:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006d1a:	e003      	b.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d20:	e000      	b.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8006d22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d24:	7dfb      	ldrb	r3, [r7, #23]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10a      	bne.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d2a:	4b66      	ldr	r3, [pc, #408]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d38:	4962      	ldr	r1, [pc, #392]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	654b      	str	r3, [r1, #84]	; 0x54
 8006d3e:	e001      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d40:	7dfb      	ldrb	r3, [r7, #23]
 8006d42:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d029      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d003      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8006d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d5c:	d007      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8006d5e:	e00f      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d60:	4b58      	ldr	r3, [pc, #352]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d64:	4a57      	ldr	r2, [pc, #348]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006d6c:	e00b      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	3304      	adds	r3, #4
 8006d72:	2102      	movs	r1, #2
 8006d74:	4618      	mov	r0, r3
 8006d76:	f000 fb55 	bl	8007424 <RCCEx_PLL2_Config>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006d7e:	e002      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	75fb      	strb	r3, [r7, #23]
      break;
 8006d84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d86:	7dfb      	ldrb	r3, [r7, #23]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d109      	bne.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006d8c:	4b4d      	ldr	r3, [pc, #308]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d98:	494a      	ldr	r1, [pc, #296]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006d9e:	e001      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da0:	7dfb      	ldrb	r3, [r7, #23]
 8006da2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00a      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	3324      	adds	r3, #36	; 0x24
 8006db4:	2102      	movs	r1, #2
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 fbe6 	bl	8007588 <RCCEx_PLL3_Config>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d001      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d02f      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dda:	d00c      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006ddc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006de0:	d802      	bhi.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d011      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8006de6:	e00d      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8006de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dec:	d00f      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8006dee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006df2:	d00e      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8006df4:	e006      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006df6:	4b33      	ldr	r3, [pc, #204]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfa:	4a32      	ldr	r2, [pc, #200]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006e02:	e007      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	75fb      	strb	r3, [r7, #23]
      break;
 8006e08:	e004      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006e0a:	bf00      	nop
 8006e0c:	e002      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006e0e:	bf00      	nop
 8006e10:	e000      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006e12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e14:	7dfb      	ldrb	r3, [r7, #23]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d109      	bne.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e1a:	4b2a      	ldr	r3, [pc, #168]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e26:	4927      	ldr	r1, [pc, #156]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	654b      	str	r3, [r1, #84]	; 0x54
 8006e2c:	e001      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e2e:	7dfb      	ldrb	r3, [r7, #23]
 8006e30:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d008      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006e3e:	4b21      	ldr	r3, [pc, #132]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4a:	491e      	ldr	r1, [pc, #120]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d008      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e5c:	4b19      	ldr	r3, [pc, #100]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e60:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e68:	4916      	ldr	r1, [pc, #88]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00d      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e7a:	4b12      	ldr	r3, [pc, #72]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	4a11      	ldr	r2, [pc, #68]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006e80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e84:	6113      	str	r3, [r2, #16]
 8006e86:	4b0f      	ldr	r3, [pc, #60]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006e88:	691a      	ldr	r2, [r3, #16]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006e90:	490c      	ldr	r1, [pc, #48]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006e92:	4313      	orrs	r3, r2
 8006e94:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	da08      	bge.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006e9e:	4b09      	ldr	r3, [pc, #36]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ea2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eaa:	4906      	ldr	r1, [pc, #24]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006eac:	4313      	orrs	r3, r2
 8006eae:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8006eb0:	7dbb      	ldrb	r3, [r7, #22]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d101      	bne.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	e000      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3718      	adds	r7, #24
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	58024400 	.word	0x58024400

08006ec8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006ecc:	f7ff f8c2 	bl	8006054 <HAL_RCC_GetHCLKFreq>
 8006ed0:	4601      	mov	r1, r0
 8006ed2:	4b06      	ldr	r3, [pc, #24]	; (8006eec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	091b      	lsrs	r3, r3, #4
 8006ed8:	f003 0307 	and.w	r3, r3, #7
 8006edc:	4a04      	ldr	r2, [pc, #16]	; (8006ef0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006ede:	5cd3      	ldrb	r3, [r2, r3]
 8006ee0:	f003 031f 	and.w	r3, r3, #31
 8006ee4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	58024400 	.word	0x58024400
 8006ef0:	0800edb8 	.word	0x0800edb8

08006ef4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b089      	sub	sp, #36	; 0x24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006efc:	4b9d      	ldr	r3, [pc, #628]	; (8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f00:	f003 0303 	and.w	r3, r3, #3
 8006f04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006f06:	4b9b      	ldr	r3, [pc, #620]	; (8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0a:	0b1b      	lsrs	r3, r3, #12
 8006f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006f12:	4b98      	ldr	r3, [pc, #608]	; (8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f16:	091b      	lsrs	r3, r3, #4
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006f1e:	4b95      	ldr	r3, [pc, #596]	; (8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f22:	08db      	lsrs	r3, r3, #3
 8006f24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	fb02 f303 	mul.w	r3, r2, r3
 8006f2e:	ee07 3a90 	vmov	s15, r3
 8006f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 810a 	beq.w	8007156 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d05a      	beq.n	8006ffe <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d302      	bcc.n	8006f52 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d078      	beq.n	8007042 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8006f50:	e099      	b.n	8007086 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f52:	4b88      	ldr	r3, [pc, #544]	; (8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0320 	and.w	r3, r3, #32
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d02d      	beq.n	8006fba <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f5e:	4b85      	ldr	r3, [pc, #532]	; (8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	08db      	lsrs	r3, r3, #3
 8006f64:	f003 0303 	and.w	r3, r3, #3
 8006f68:	4a83      	ldr	r2, [pc, #524]	; (8007178 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8006f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f6e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	ee07 3a90 	vmov	s15, r3
 8006f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	ee07 3a90 	vmov	s15, r3
 8006f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f88:	4b7a      	ldr	r3, [pc, #488]	; (8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f90:	ee07 3a90 	vmov	s15, r3
 8006f94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f98:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f9c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800717c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006fa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fb4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006fb8:	e087      	b.n	80070ca <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	ee07 3a90 	vmov	s15, r3
 8006fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fc4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007180 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8006fc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fcc:	4b69      	ldr	r3, [pc, #420]	; (8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fd4:	ee07 3a90 	vmov	s15, r3
 8006fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fdc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fe0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800717c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006fe4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fe8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ff0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ff8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ffc:	e065      	b.n	80070ca <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	ee07 3a90 	vmov	s15, r3
 8007004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007008:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800700c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007010:	4b58      	ldr	r3, [pc, #352]	; (8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007018:	ee07 3a90 	vmov	s15, r3
 800701c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007020:	ed97 6a03 	vldr	s12, [r7, #12]
 8007024:	eddf 5a55 	vldr	s11, [pc, #340]	; 800717c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007028:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800702c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007030:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007034:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800703c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007040:	e043      	b.n	80070ca <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	ee07 3a90 	vmov	s15, r3
 8007048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800704c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007188 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007050:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007054:	4b47      	ldr	r3, [pc, #284]	; (8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800705c:	ee07 3a90 	vmov	s15, r3
 8007060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007064:	ed97 6a03 	vldr	s12, [r7, #12]
 8007068:	eddf 5a44 	vldr	s11, [pc, #272]	; 800717c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800706c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007070:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007074:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007078:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800707c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007080:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007084:	e021      	b.n	80070ca <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	ee07 3a90 	vmov	s15, r3
 800708c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007090:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007184 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007094:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007098:	4b36      	ldr	r3, [pc, #216]	; (8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800709a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070a0:	ee07 3a90 	vmov	s15, r3
 80070a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80070ac:	eddf 5a33 	vldr	s11, [pc, #204]	; 800717c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80070b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070c8:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80070ca:	4b2a      	ldr	r3, [pc, #168]	; (8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80070cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ce:	0a5b      	lsrs	r3, r3, #9
 80070d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070d4:	ee07 3a90 	vmov	s15, r3
 80070d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80070e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070f0:	ee17 2a90 	vmov	r2, s15
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80070f8:	4b1e      	ldr	r3, [pc, #120]	; (8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80070fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fc:	0c1b      	lsrs	r3, r3, #16
 80070fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007102:	ee07 3a90 	vmov	s15, r3
 8007106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800710a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800710e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007112:	edd7 6a07 	vldr	s13, [r7, #28]
 8007116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800711a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800711e:	ee17 2a90 	vmov	r2, s15
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007126:	4b13      	ldr	r3, [pc, #76]	; (8007174 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712a:	0e1b      	lsrs	r3, r3, #24
 800712c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007130:	ee07 3a90 	vmov	s15, r3
 8007134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007138:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800713c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007140:	edd7 6a07 	vldr	s13, [r7, #28]
 8007144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800714c:	ee17 2a90 	vmov	r2, s15
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007154:	e008      	b.n	8007168 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	609a      	str	r2, [r3, #8]
}
 8007168:	bf00      	nop
 800716a:	3724      	adds	r7, #36	; 0x24
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr
 8007174:	58024400 	.word	0x58024400
 8007178:	03d09000 	.word	0x03d09000
 800717c:	46000000 	.word	0x46000000
 8007180:	4c742400 	.word	0x4c742400
 8007184:	4a742400 	.word	0x4a742400
 8007188:	4af42400 	.word	0x4af42400

0800718c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800718c:	b480      	push	{r7}
 800718e:	b089      	sub	sp, #36	; 0x24
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007194:	4b9d      	ldr	r3, [pc, #628]	; (800740c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007198:	f003 0303 	and.w	r3, r3, #3
 800719c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800719e:	4b9b      	ldr	r3, [pc, #620]	; (800740c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80071a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a2:	0d1b      	lsrs	r3, r3, #20
 80071a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80071aa:	4b98      	ldr	r3, [pc, #608]	; (800740c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80071ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ae:	0a1b      	lsrs	r3, r3, #8
 80071b0:	f003 0301 	and.w	r3, r3, #1
 80071b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80071b6:	4b95      	ldr	r3, [pc, #596]	; (800740c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80071b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ba:	08db      	lsrs	r3, r3, #3
 80071bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	fb02 f303 	mul.w	r3, r2, r3
 80071c6:	ee07 3a90 	vmov	s15, r3
 80071ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 810a 	beq.w	80073ee <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d05a      	beq.n	8007296 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d302      	bcc.n	80071ea <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d078      	beq.n	80072da <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80071e8:	e099      	b.n	800731e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071ea:	4b88      	ldr	r3, [pc, #544]	; (800740c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0320 	and.w	r3, r3, #32
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d02d      	beq.n	8007252 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071f6:	4b85      	ldr	r3, [pc, #532]	; (800740c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	08db      	lsrs	r3, r3, #3
 80071fc:	f003 0303 	and.w	r3, r3, #3
 8007200:	4a83      	ldr	r2, [pc, #524]	; (8007410 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007202:	fa22 f303 	lsr.w	r3, r2, r3
 8007206:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	ee07 3a90 	vmov	s15, r3
 8007218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007220:	4b7a      	ldr	r3, [pc, #488]	; (800740c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007228:	ee07 3a90 	vmov	s15, r3
 800722c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007230:	ed97 6a03 	vldr	s12, [r7, #12]
 8007234:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007414 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007238:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800723c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007240:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007244:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800724c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007250:	e087      	b.n	8007362 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	ee07 3a90 	vmov	s15, r3
 8007258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800725c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007418 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007260:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007264:	4b69      	ldr	r3, [pc, #420]	; (800740c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800726c:	ee07 3a90 	vmov	s15, r3
 8007270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007274:	ed97 6a03 	vldr	s12, [r7, #12]
 8007278:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007414 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800727c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007280:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007284:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007288:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800728c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007290:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007294:	e065      	b.n	8007362 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	ee07 3a90 	vmov	s15, r3
 800729c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800741c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80072a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072a8:	4b58      	ldr	r3, [pc, #352]	; (800740c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80072aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072b0:	ee07 3a90 	vmov	s15, r3
 80072b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80072bc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007414 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80072c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072d8:	e043      	b.n	8007362 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	ee07 3a90 	vmov	s15, r3
 80072e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007420 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80072e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ec:	4b47      	ldr	r3, [pc, #284]	; (800740c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80072ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f4:	ee07 3a90 	vmov	s15, r3
 80072f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007300:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007414 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007304:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007308:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800730c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007310:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007318:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800731c:	e021      	b.n	8007362 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	ee07 3a90 	vmov	s15, r3
 8007324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007328:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800741c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800732c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007330:	4b36      	ldr	r3, [pc, #216]	; (800740c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007338:	ee07 3a90 	vmov	s15, r3
 800733c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007340:	ed97 6a03 	vldr	s12, [r7, #12]
 8007344:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007414 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007348:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800734c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007350:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007354:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800735c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007360:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007362:	4b2a      	ldr	r3, [pc, #168]	; (800740c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007366:	0a5b      	lsrs	r3, r3, #9
 8007368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800736c:	ee07 3a90 	vmov	s15, r3
 8007370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007374:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007378:	ee37 7a87 	vadd.f32	s14, s15, s14
 800737c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007388:	ee17 2a90 	vmov	r2, s15
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007390:	4b1e      	ldr	r3, [pc, #120]	; (800740c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007394:	0c1b      	lsrs	r3, r3, #16
 8007396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800739a:	ee07 3a90 	vmov	s15, r3
 800739e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80073ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073b6:	ee17 2a90 	vmov	r2, s15
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80073be:	4b13      	ldr	r3, [pc, #76]	; (800740c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80073c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c2:	0e1b      	lsrs	r3, r3, #24
 80073c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073c8:	ee07 3a90 	vmov	s15, r3
 80073cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80073dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073e4:	ee17 2a90 	vmov	r2, s15
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80073ec:	e008      	b.n	8007400 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	609a      	str	r2, [r3, #8]
}
 8007400:	bf00      	nop
 8007402:	3724      	adds	r7, #36	; 0x24
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	58024400 	.word	0x58024400
 8007410:	03d09000 	.word	0x03d09000
 8007414:	46000000 	.word	0x46000000
 8007418:	4c742400 	.word	0x4c742400
 800741c:	4a742400 	.word	0x4a742400
 8007420:	4af42400 	.word	0x4af42400

08007424 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007432:	4b53      	ldr	r3, [pc, #332]	; (8007580 <RCCEx_PLL2_Config+0x15c>)
 8007434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007436:	f003 0303 	and.w	r3, r3, #3
 800743a:	2b03      	cmp	r3, #3
 800743c:	d101      	bne.n	8007442 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e099      	b.n	8007576 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007442:	4b4f      	ldr	r3, [pc, #316]	; (8007580 <RCCEx_PLL2_Config+0x15c>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a4e      	ldr	r2, [pc, #312]	; (8007580 <RCCEx_PLL2_Config+0x15c>)
 8007448:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800744c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800744e:	f7fc fd5b 	bl	8003f08 <HAL_GetTick>
 8007452:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007454:	e008      	b.n	8007468 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007456:	f7fc fd57 	bl	8003f08 <HAL_GetTick>
 800745a:	4602      	mov	r2, r0
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	2b02      	cmp	r3, #2
 8007462:	d901      	bls.n	8007468 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007464:	2303      	movs	r3, #3
 8007466:	e086      	b.n	8007576 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007468:	4b45      	ldr	r3, [pc, #276]	; (8007580 <RCCEx_PLL2_Config+0x15c>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d1f0      	bne.n	8007456 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007474:	4b42      	ldr	r3, [pc, #264]	; (8007580 <RCCEx_PLL2_Config+0x15c>)
 8007476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007478:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	031b      	lsls	r3, r3, #12
 8007482:	493f      	ldr	r1, [pc, #252]	; (8007580 <RCCEx_PLL2_Config+0x15c>)
 8007484:	4313      	orrs	r3, r2
 8007486:	628b      	str	r3, [r1, #40]	; 0x28
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	3b01      	subs	r3, #1
 800748e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	3b01      	subs	r3, #1
 8007498:	025b      	lsls	r3, r3, #9
 800749a:	b29b      	uxth	r3, r3
 800749c:	431a      	orrs	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	3b01      	subs	r3, #1
 80074a4:	041b      	lsls	r3, r3, #16
 80074a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80074aa:	431a      	orrs	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	3b01      	subs	r3, #1
 80074b2:	061b      	lsls	r3, r3, #24
 80074b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80074b8:	4931      	ldr	r1, [pc, #196]	; (8007580 <RCCEx_PLL2_Config+0x15c>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80074be:	4b30      	ldr	r3, [pc, #192]	; (8007580 <RCCEx_PLL2_Config+0x15c>)
 80074c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	695b      	ldr	r3, [r3, #20]
 80074ca:	492d      	ldr	r1, [pc, #180]	; (8007580 <RCCEx_PLL2_Config+0x15c>)
 80074cc:	4313      	orrs	r3, r2
 80074ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80074d0:	4b2b      	ldr	r3, [pc, #172]	; (8007580 <RCCEx_PLL2_Config+0x15c>)
 80074d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d4:	f023 0220 	bic.w	r2, r3, #32
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	4928      	ldr	r1, [pc, #160]	; (8007580 <RCCEx_PLL2_Config+0x15c>)
 80074de:	4313      	orrs	r3, r2
 80074e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80074e2:	4b27      	ldr	r3, [pc, #156]	; (8007580 <RCCEx_PLL2_Config+0x15c>)
 80074e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e6:	4a26      	ldr	r2, [pc, #152]	; (8007580 <RCCEx_PLL2_Config+0x15c>)
 80074e8:	f023 0310 	bic.w	r3, r3, #16
 80074ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80074ee:	4b24      	ldr	r3, [pc, #144]	; (8007580 <RCCEx_PLL2_Config+0x15c>)
 80074f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074f2:	4b24      	ldr	r3, [pc, #144]	; (8007584 <RCCEx_PLL2_Config+0x160>)
 80074f4:	4013      	ands	r3, r2
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	69d2      	ldr	r2, [r2, #28]
 80074fa:	00d2      	lsls	r2, r2, #3
 80074fc:	4920      	ldr	r1, [pc, #128]	; (8007580 <RCCEx_PLL2_Config+0x15c>)
 80074fe:	4313      	orrs	r3, r2
 8007500:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007502:	4b1f      	ldr	r3, [pc, #124]	; (8007580 <RCCEx_PLL2_Config+0x15c>)
 8007504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007506:	4a1e      	ldr	r2, [pc, #120]	; (8007580 <RCCEx_PLL2_Config+0x15c>)
 8007508:	f043 0310 	orr.w	r3, r3, #16
 800750c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d106      	bne.n	8007522 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007514:	4b1a      	ldr	r3, [pc, #104]	; (8007580 <RCCEx_PLL2_Config+0x15c>)
 8007516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007518:	4a19      	ldr	r2, [pc, #100]	; (8007580 <RCCEx_PLL2_Config+0x15c>)
 800751a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800751e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007520:	e00f      	b.n	8007542 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d106      	bne.n	8007536 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007528:	4b15      	ldr	r3, [pc, #84]	; (8007580 <RCCEx_PLL2_Config+0x15c>)
 800752a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752c:	4a14      	ldr	r2, [pc, #80]	; (8007580 <RCCEx_PLL2_Config+0x15c>)
 800752e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007532:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007534:	e005      	b.n	8007542 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007536:	4b12      	ldr	r3, [pc, #72]	; (8007580 <RCCEx_PLL2_Config+0x15c>)
 8007538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753a:	4a11      	ldr	r2, [pc, #68]	; (8007580 <RCCEx_PLL2_Config+0x15c>)
 800753c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007540:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007542:	4b0f      	ldr	r3, [pc, #60]	; (8007580 <RCCEx_PLL2_Config+0x15c>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a0e      	ldr	r2, [pc, #56]	; (8007580 <RCCEx_PLL2_Config+0x15c>)
 8007548:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800754c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800754e:	f7fc fcdb 	bl	8003f08 <HAL_GetTick>
 8007552:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007554:	e008      	b.n	8007568 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007556:	f7fc fcd7 	bl	8003f08 <HAL_GetTick>
 800755a:	4602      	mov	r2, r0
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	2b02      	cmp	r3, #2
 8007562:	d901      	bls.n	8007568 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007564:	2303      	movs	r3, #3
 8007566:	e006      	b.n	8007576 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007568:	4b05      	ldr	r3, [pc, #20]	; (8007580 <RCCEx_PLL2_Config+0x15c>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007570:	2b00      	cmp	r3, #0
 8007572:	d0f0      	beq.n	8007556 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007574:	7bfb      	ldrb	r3, [r7, #15]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	58024400 	.word	0x58024400
 8007584:	ffff0007 	.word	0xffff0007

08007588 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007596:	4b53      	ldr	r3, [pc, #332]	; (80076e4 <RCCEx_PLL3_Config+0x15c>)
 8007598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759a:	f003 0303 	and.w	r3, r3, #3
 800759e:	2b03      	cmp	r3, #3
 80075a0:	d101      	bne.n	80075a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e099      	b.n	80076da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80075a6:	4b4f      	ldr	r3, [pc, #316]	; (80076e4 <RCCEx_PLL3_Config+0x15c>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a4e      	ldr	r2, [pc, #312]	; (80076e4 <RCCEx_PLL3_Config+0x15c>)
 80075ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075b2:	f7fc fca9 	bl	8003f08 <HAL_GetTick>
 80075b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80075b8:	e008      	b.n	80075cc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80075ba:	f7fc fca5 	bl	8003f08 <HAL_GetTick>
 80075be:	4602      	mov	r2, r0
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d901      	bls.n	80075cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e086      	b.n	80076da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80075cc:	4b45      	ldr	r3, [pc, #276]	; (80076e4 <RCCEx_PLL3_Config+0x15c>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1f0      	bne.n	80075ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80075d8:	4b42      	ldr	r3, [pc, #264]	; (80076e4 <RCCEx_PLL3_Config+0x15c>)
 80075da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	051b      	lsls	r3, r3, #20
 80075e6:	493f      	ldr	r1, [pc, #252]	; (80076e4 <RCCEx_PLL3_Config+0x15c>)
 80075e8:	4313      	orrs	r3, r2
 80075ea:	628b      	str	r3, [r1, #40]	; 0x28
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	3b01      	subs	r3, #1
 80075f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	3b01      	subs	r3, #1
 80075fc:	025b      	lsls	r3, r3, #9
 80075fe:	b29b      	uxth	r3, r3
 8007600:	431a      	orrs	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	3b01      	subs	r3, #1
 8007608:	041b      	lsls	r3, r3, #16
 800760a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800760e:	431a      	orrs	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	3b01      	subs	r3, #1
 8007616:	061b      	lsls	r3, r3, #24
 8007618:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800761c:	4931      	ldr	r1, [pc, #196]	; (80076e4 <RCCEx_PLL3_Config+0x15c>)
 800761e:	4313      	orrs	r3, r2
 8007620:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007622:	4b30      	ldr	r3, [pc, #192]	; (80076e4 <RCCEx_PLL3_Config+0x15c>)
 8007624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007626:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	492d      	ldr	r1, [pc, #180]	; (80076e4 <RCCEx_PLL3_Config+0x15c>)
 8007630:	4313      	orrs	r3, r2
 8007632:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007634:	4b2b      	ldr	r3, [pc, #172]	; (80076e4 <RCCEx_PLL3_Config+0x15c>)
 8007636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007638:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	699b      	ldr	r3, [r3, #24]
 8007640:	4928      	ldr	r1, [pc, #160]	; (80076e4 <RCCEx_PLL3_Config+0x15c>)
 8007642:	4313      	orrs	r3, r2
 8007644:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007646:	4b27      	ldr	r3, [pc, #156]	; (80076e4 <RCCEx_PLL3_Config+0x15c>)
 8007648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764a:	4a26      	ldr	r2, [pc, #152]	; (80076e4 <RCCEx_PLL3_Config+0x15c>)
 800764c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007650:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007652:	4b24      	ldr	r3, [pc, #144]	; (80076e4 <RCCEx_PLL3_Config+0x15c>)
 8007654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007656:	4b24      	ldr	r3, [pc, #144]	; (80076e8 <RCCEx_PLL3_Config+0x160>)
 8007658:	4013      	ands	r3, r2
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	69d2      	ldr	r2, [r2, #28]
 800765e:	00d2      	lsls	r2, r2, #3
 8007660:	4920      	ldr	r1, [pc, #128]	; (80076e4 <RCCEx_PLL3_Config+0x15c>)
 8007662:	4313      	orrs	r3, r2
 8007664:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007666:	4b1f      	ldr	r3, [pc, #124]	; (80076e4 <RCCEx_PLL3_Config+0x15c>)
 8007668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766a:	4a1e      	ldr	r2, [pc, #120]	; (80076e4 <RCCEx_PLL3_Config+0x15c>)
 800766c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007670:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d106      	bne.n	8007686 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007678:	4b1a      	ldr	r3, [pc, #104]	; (80076e4 <RCCEx_PLL3_Config+0x15c>)
 800767a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767c:	4a19      	ldr	r2, [pc, #100]	; (80076e4 <RCCEx_PLL3_Config+0x15c>)
 800767e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007682:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007684:	e00f      	b.n	80076a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d106      	bne.n	800769a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800768c:	4b15      	ldr	r3, [pc, #84]	; (80076e4 <RCCEx_PLL3_Config+0x15c>)
 800768e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007690:	4a14      	ldr	r2, [pc, #80]	; (80076e4 <RCCEx_PLL3_Config+0x15c>)
 8007692:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007696:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007698:	e005      	b.n	80076a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800769a:	4b12      	ldr	r3, [pc, #72]	; (80076e4 <RCCEx_PLL3_Config+0x15c>)
 800769c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769e:	4a11      	ldr	r2, [pc, #68]	; (80076e4 <RCCEx_PLL3_Config+0x15c>)
 80076a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80076a6:	4b0f      	ldr	r3, [pc, #60]	; (80076e4 <RCCEx_PLL3_Config+0x15c>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a0e      	ldr	r2, [pc, #56]	; (80076e4 <RCCEx_PLL3_Config+0x15c>)
 80076ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076b2:	f7fc fc29 	bl	8003f08 <HAL_GetTick>
 80076b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80076b8:	e008      	b.n	80076cc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80076ba:	f7fc fc25 	bl	8003f08 <HAL_GetTick>
 80076be:	4602      	mov	r2, r0
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	d901      	bls.n	80076cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80076c8:	2303      	movs	r3, #3
 80076ca:	e006      	b.n	80076da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80076cc:	4b05      	ldr	r3, [pc, #20]	; (80076e4 <RCCEx_PLL3_Config+0x15c>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d0f0      	beq.n	80076ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80076d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	58024400 	.word	0x58024400
 80076e8:	ffff0007 	.word	0xffff0007

080076ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e042      	b.n	8007784 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007704:	2b00      	cmp	r3, #0
 8007706:	d106      	bne.n	8007716 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f7fc f9c3 	bl	8003a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2224      	movs	r2, #36	; 0x24
 800771a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f022 0201 	bic.w	r2, r2, #1
 800772c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f992 	bl	8007a58 <UART_SetConfig>
 8007734:	4603      	mov	r3, r0
 8007736:	2b01      	cmp	r3, #1
 8007738:	d101      	bne.n	800773e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e022      	b.n	8007784 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007742:	2b00      	cmp	r3, #0
 8007744:	d002      	beq.n	800774c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f002 fb04 	bl	8009d54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	685a      	ldr	r2, [r3, #4]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800775a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	689a      	ldr	r2, [r3, #8]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800776a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f042 0201 	orr.w	r2, r2, #1
 800777a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f002 fb8b 	bl	8009e98 <UART_CheckIdleState>
 8007782:	4603      	mov	r3, r0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3708      	adds	r7, #8
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b08a      	sub	sp, #40	; 0x28
 8007790:	af02      	add	r7, sp, #8
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	603b      	str	r3, [r7, #0]
 8007798:	4613      	mov	r3, r2
 800779a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077a2:	2b20      	cmp	r3, #32
 80077a4:	f040 8083 	bne.w	80078ae <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d002      	beq.n	80077b4 <HAL_UART_Transmit+0x28>
 80077ae:	88fb      	ldrh	r3, [r7, #6]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d101      	bne.n	80077b8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e07b      	b.n	80078b0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d101      	bne.n	80077c6 <HAL_UART_Transmit+0x3a>
 80077c2:	2302      	movs	r3, #2
 80077c4:	e074      	b.n	80078b0 <HAL_UART_Transmit+0x124>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2221      	movs	r2, #33	; 0x21
 80077da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80077de:	f7fc fb93 	bl	8003f08 <HAL_GetTick>
 80077e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	88fa      	ldrh	r2, [r7, #6]
 80077e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	88fa      	ldrh	r2, [r7, #6]
 80077f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077fc:	d108      	bne.n	8007810 <HAL_UART_Transmit+0x84>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d104      	bne.n	8007810 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007806:	2300      	movs	r3, #0
 8007808:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	61bb      	str	r3, [r7, #24]
 800780e:	e003      	b.n	8007818 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007814:	2300      	movs	r3, #0
 8007816:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007818:	e02c      	b.n	8007874 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	2200      	movs	r2, #0
 8007822:	2180      	movs	r1, #128	; 0x80
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f002 fb7f 	bl	8009f28 <UART_WaitOnFlagUntilTimeout>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8007830:	2303      	movs	r3, #3
 8007832:	e03d      	b.n	80078b0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10b      	bne.n	8007852 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	881b      	ldrh	r3, [r3, #0]
 800783e:	461a      	mov	r2, r3
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007848:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	3302      	adds	r3, #2
 800784e:	61bb      	str	r3, [r7, #24]
 8007850:	e007      	b.n	8007862 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	781a      	ldrb	r2, [r3, #0]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	3301      	adds	r3, #1
 8007860:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007868:	b29b      	uxth	r3, r3
 800786a:	3b01      	subs	r3, #1
 800786c:	b29a      	uxth	r2, r3
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800787a:	b29b      	uxth	r3, r3
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1cc      	bne.n	800781a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	2200      	movs	r2, #0
 8007888:	2140      	movs	r1, #64	; 0x40
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f002 fb4c 	bl	8009f28 <UART_WaitOnFlagUntilTimeout>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e00a      	b.n	80078b0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2220      	movs	r2, #32
 800789e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80078aa:	2300      	movs	r3, #0
 80078ac:	e000      	b.n	80078b0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80078ae:	2302      	movs	r3, #2
  }
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3720      	adds	r7, #32
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b08a      	sub	sp, #40	; 0x28
 80078bc:	af02      	add	r7, sp, #8
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	603b      	str	r3, [r7, #0]
 80078c4:	4613      	mov	r3, r2
 80078c6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078ce:	2b20      	cmp	r3, #32
 80078d0:	f040 80bd 	bne.w	8007a4e <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d002      	beq.n	80078e0 <HAL_UART_Receive+0x28>
 80078da:	88fb      	ldrh	r3, [r7, #6]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d101      	bne.n	80078e4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e0b5      	b.n	8007a50 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d101      	bne.n	80078f2 <HAL_UART_Receive+0x3a>
 80078ee:	2302      	movs	r3, #2
 80078f0:	e0ae      	b.n	8007a50 <HAL_UART_Receive+0x198>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2222      	movs	r2, #34	; 0x22
 8007906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800790a:	f7fc fafd 	bl	8003f08 <HAL_GetTick>
 800790e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	88fa      	ldrh	r2, [r7, #6]
 8007914:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	88fa      	ldrh	r2, [r7, #6]
 800791c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007928:	d10e      	bne.n	8007948 <HAL_UART_Receive+0x90>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d105      	bne.n	800793e <HAL_UART_Receive+0x86>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007938:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800793c:	e02d      	b.n	800799a <HAL_UART_Receive+0xe2>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	22ff      	movs	r2, #255	; 0xff
 8007942:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007946:	e028      	b.n	800799a <HAL_UART_Receive+0xe2>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d10d      	bne.n	800796c <HAL_UART_Receive+0xb4>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d104      	bne.n	8007962 <HAL_UART_Receive+0xaa>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	22ff      	movs	r2, #255	; 0xff
 800795c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007960:	e01b      	b.n	800799a <HAL_UART_Receive+0xe2>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	227f      	movs	r2, #127	; 0x7f
 8007966:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800796a:	e016      	b.n	800799a <HAL_UART_Receive+0xe2>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007974:	d10d      	bne.n	8007992 <HAL_UART_Receive+0xda>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d104      	bne.n	8007988 <HAL_UART_Receive+0xd0>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	227f      	movs	r2, #127	; 0x7f
 8007982:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007986:	e008      	b.n	800799a <HAL_UART_Receive+0xe2>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	223f      	movs	r2, #63	; 0x3f
 800798c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007990:	e003      	b.n	800799a <HAL_UART_Receive+0xe2>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80079a0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079aa:	d108      	bne.n	80079be <HAL_UART_Receive+0x106>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d104      	bne.n	80079be <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 80079b4:	2300      	movs	r3, #0
 80079b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	61bb      	str	r3, [r7, #24]
 80079bc:	e003      	b.n	80079c6 <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079c2:	2300      	movs	r3, #0
 80079c4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80079c6:	e032      	b.n	8007a2e <HAL_UART_Receive+0x176>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	2200      	movs	r2, #0
 80079d0:	2120      	movs	r1, #32
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f002 faa8 	bl	8009f28 <UART_WaitOnFlagUntilTimeout>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <HAL_UART_Receive+0x12a>
      {
        return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e036      	b.n	8007a50 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10c      	bne.n	8007a02 <HAL_UART_Receive+0x14a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	8a7b      	ldrh	r3, [r7, #18]
 80079f2:	4013      	ands	r3, r2
 80079f4:	b29a      	uxth	r2, r3
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	3302      	adds	r3, #2
 80079fe:	61bb      	str	r3, [r7, #24]
 8007a00:	e00c      	b.n	8007a1c <HAL_UART_Receive+0x164>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a08:	b2da      	uxtb	r2, r3
 8007a0a:	8a7b      	ldrh	r3, [r7, #18]
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	4013      	ands	r3, r2
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	3b01      	subs	r3, #1
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1c6      	bne.n	80079c8 <HAL_UART_Receive+0x110>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2220      	movs	r2, #32
 8007a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_UNLOCK(huart);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	e000      	b.n	8007a50 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8007a4e:	2302      	movs	r3, #2
  }
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3720      	adds	r7, #32
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a58:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007a5c:	b090      	sub	sp, #64	; 0x40
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007a62:	2300      	movs	r3, #0
 8007a64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a66:	2300      	movs	r3, #0
 8007a68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	689a      	ldr	r2, [r3, #8]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	431a      	orrs	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	695b      	ldr	r3, [r3, #20]
 8007a7e:	431a      	orrs	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	69db      	ldr	r3, [r3, #28]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	4bc1      	ldr	r3, [pc, #772]	; (8007da0 <UART_SetConfig+0x348>)
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	6812      	ldr	r2, [r2, #0]
 8007aa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007aa2:	430b      	orrs	r3, r1
 8007aa4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	68da      	ldr	r2, [r3, #12]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	430a      	orrs	r2, r1
 8007aba:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4ab7      	ldr	r2, [pc, #732]	; (8007da4 <UART_SetConfig+0x34c>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d004      	beq.n	8007ad6 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a1b      	ldr	r3, [r3, #32]
 8007ad0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	689a      	ldr	r2, [r3, #8]
 8007adc:	4bb2      	ldr	r3, [pc, #712]	; (8007da8 <UART_SetConfig+0x350>)
 8007ade:	4013      	ands	r3, r2
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	6812      	ldr	r2, [r2, #0]
 8007ae4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ae6:	430b      	orrs	r3, r1
 8007ae8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af0:	f023 010f 	bic.w	r1, r3, #15
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	430a      	orrs	r2, r1
 8007afe:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4aa9      	ldr	r2, [pc, #676]	; (8007dac <UART_SetConfig+0x354>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d177      	bne.n	8007bfa <UART_SetConfig+0x1a2>
 8007b0a:	4ba9      	ldr	r3, [pc, #676]	; (8007db0 <UART_SetConfig+0x358>)
 8007b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b12:	2b28      	cmp	r3, #40	; 0x28
 8007b14:	d86c      	bhi.n	8007bf0 <UART_SetConfig+0x198>
 8007b16:	a201      	add	r2, pc, #4	; (adr r2, 8007b1c <UART_SetConfig+0xc4>)
 8007b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1c:	08007bc1 	.word	0x08007bc1
 8007b20:	08007bf1 	.word	0x08007bf1
 8007b24:	08007bf1 	.word	0x08007bf1
 8007b28:	08007bf1 	.word	0x08007bf1
 8007b2c:	08007bf1 	.word	0x08007bf1
 8007b30:	08007bf1 	.word	0x08007bf1
 8007b34:	08007bf1 	.word	0x08007bf1
 8007b38:	08007bf1 	.word	0x08007bf1
 8007b3c:	08007bc9 	.word	0x08007bc9
 8007b40:	08007bf1 	.word	0x08007bf1
 8007b44:	08007bf1 	.word	0x08007bf1
 8007b48:	08007bf1 	.word	0x08007bf1
 8007b4c:	08007bf1 	.word	0x08007bf1
 8007b50:	08007bf1 	.word	0x08007bf1
 8007b54:	08007bf1 	.word	0x08007bf1
 8007b58:	08007bf1 	.word	0x08007bf1
 8007b5c:	08007bd1 	.word	0x08007bd1
 8007b60:	08007bf1 	.word	0x08007bf1
 8007b64:	08007bf1 	.word	0x08007bf1
 8007b68:	08007bf1 	.word	0x08007bf1
 8007b6c:	08007bf1 	.word	0x08007bf1
 8007b70:	08007bf1 	.word	0x08007bf1
 8007b74:	08007bf1 	.word	0x08007bf1
 8007b78:	08007bf1 	.word	0x08007bf1
 8007b7c:	08007bd9 	.word	0x08007bd9
 8007b80:	08007bf1 	.word	0x08007bf1
 8007b84:	08007bf1 	.word	0x08007bf1
 8007b88:	08007bf1 	.word	0x08007bf1
 8007b8c:	08007bf1 	.word	0x08007bf1
 8007b90:	08007bf1 	.word	0x08007bf1
 8007b94:	08007bf1 	.word	0x08007bf1
 8007b98:	08007bf1 	.word	0x08007bf1
 8007b9c:	08007be1 	.word	0x08007be1
 8007ba0:	08007bf1 	.word	0x08007bf1
 8007ba4:	08007bf1 	.word	0x08007bf1
 8007ba8:	08007bf1 	.word	0x08007bf1
 8007bac:	08007bf1 	.word	0x08007bf1
 8007bb0:	08007bf1 	.word	0x08007bf1
 8007bb4:	08007bf1 	.word	0x08007bf1
 8007bb8:	08007bf1 	.word	0x08007bf1
 8007bbc:	08007be9 	.word	0x08007be9
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007bc6:	e233      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007bc8:	2304      	movs	r3, #4
 8007bca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007bce:	e22f      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007bd0:	2308      	movs	r3, #8
 8007bd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007bd6:	e22b      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007bd8:	2310      	movs	r3, #16
 8007bda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007bde:	e227      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007be0:	2320      	movs	r3, #32
 8007be2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007be6:	e223      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007be8:	2340      	movs	r3, #64	; 0x40
 8007bea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007bee:	e21f      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007bf0:	2380      	movs	r3, #128	; 0x80
 8007bf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007bf6:	bf00      	nop
 8007bf8:	e21a      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a6d      	ldr	r2, [pc, #436]	; (8007db4 <UART_SetConfig+0x35c>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d132      	bne.n	8007c6a <UART_SetConfig+0x212>
 8007c04:	4b6a      	ldr	r3, [pc, #424]	; (8007db0 <UART_SetConfig+0x358>)
 8007c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c08:	f003 0307 	and.w	r3, r3, #7
 8007c0c:	2b05      	cmp	r3, #5
 8007c0e:	d827      	bhi.n	8007c60 <UART_SetConfig+0x208>
 8007c10:	a201      	add	r2, pc, #4	; (adr r2, 8007c18 <UART_SetConfig+0x1c0>)
 8007c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c16:	bf00      	nop
 8007c18:	08007c31 	.word	0x08007c31
 8007c1c:	08007c39 	.word	0x08007c39
 8007c20:	08007c41 	.word	0x08007c41
 8007c24:	08007c49 	.word	0x08007c49
 8007c28:	08007c51 	.word	0x08007c51
 8007c2c:	08007c59 	.word	0x08007c59
 8007c30:	2300      	movs	r3, #0
 8007c32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c36:	e1fb      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007c38:	2304      	movs	r3, #4
 8007c3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c3e:	e1f7      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007c40:	2308      	movs	r3, #8
 8007c42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c46:	e1f3      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007c48:	2310      	movs	r3, #16
 8007c4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c4e:	e1ef      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007c50:	2320      	movs	r3, #32
 8007c52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c56:	e1eb      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007c58:	2340      	movs	r3, #64	; 0x40
 8007c5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c5e:	e1e7      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007c60:	2380      	movs	r3, #128	; 0x80
 8007c62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c66:	bf00      	nop
 8007c68:	e1e2      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a52      	ldr	r2, [pc, #328]	; (8007db8 <UART_SetConfig+0x360>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d132      	bne.n	8007cda <UART_SetConfig+0x282>
 8007c74:	4b4e      	ldr	r3, [pc, #312]	; (8007db0 <UART_SetConfig+0x358>)
 8007c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c78:	f003 0307 	and.w	r3, r3, #7
 8007c7c:	2b05      	cmp	r3, #5
 8007c7e:	d827      	bhi.n	8007cd0 <UART_SetConfig+0x278>
 8007c80:	a201      	add	r2, pc, #4	; (adr r2, 8007c88 <UART_SetConfig+0x230>)
 8007c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c86:	bf00      	nop
 8007c88:	08007ca1 	.word	0x08007ca1
 8007c8c:	08007ca9 	.word	0x08007ca9
 8007c90:	08007cb1 	.word	0x08007cb1
 8007c94:	08007cb9 	.word	0x08007cb9
 8007c98:	08007cc1 	.word	0x08007cc1
 8007c9c:	08007cc9 	.word	0x08007cc9
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ca6:	e1c3      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007ca8:	2304      	movs	r3, #4
 8007caa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cae:	e1bf      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007cb0:	2308      	movs	r3, #8
 8007cb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cb6:	e1bb      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007cb8:	2310      	movs	r3, #16
 8007cba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cbe:	e1b7      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007cc0:	2320      	movs	r3, #32
 8007cc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cc6:	e1b3      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007cc8:	2340      	movs	r3, #64	; 0x40
 8007cca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cce:	e1af      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007cd0:	2380      	movs	r3, #128	; 0x80
 8007cd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cd6:	bf00      	nop
 8007cd8:	e1aa      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a37      	ldr	r2, [pc, #220]	; (8007dbc <UART_SetConfig+0x364>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d132      	bne.n	8007d4a <UART_SetConfig+0x2f2>
 8007ce4:	4b32      	ldr	r3, [pc, #200]	; (8007db0 <UART_SetConfig+0x358>)
 8007ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ce8:	f003 0307 	and.w	r3, r3, #7
 8007cec:	2b05      	cmp	r3, #5
 8007cee:	d827      	bhi.n	8007d40 <UART_SetConfig+0x2e8>
 8007cf0:	a201      	add	r2, pc, #4	; (adr r2, 8007cf8 <UART_SetConfig+0x2a0>)
 8007cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf6:	bf00      	nop
 8007cf8:	08007d11 	.word	0x08007d11
 8007cfc:	08007d19 	.word	0x08007d19
 8007d00:	08007d21 	.word	0x08007d21
 8007d04:	08007d29 	.word	0x08007d29
 8007d08:	08007d31 	.word	0x08007d31
 8007d0c:	08007d39 	.word	0x08007d39
 8007d10:	2300      	movs	r3, #0
 8007d12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d16:	e18b      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007d18:	2304      	movs	r3, #4
 8007d1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d1e:	e187      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007d20:	2308      	movs	r3, #8
 8007d22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d26:	e183      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007d28:	2310      	movs	r3, #16
 8007d2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d2e:	e17f      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007d30:	2320      	movs	r3, #32
 8007d32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d36:	e17b      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007d38:	2340      	movs	r3, #64	; 0x40
 8007d3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d3e:	e177      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007d40:	2380      	movs	r3, #128	; 0x80
 8007d42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d46:	bf00      	nop
 8007d48:	e172      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a1c      	ldr	r2, [pc, #112]	; (8007dc0 <UART_SetConfig+0x368>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d144      	bne.n	8007dde <UART_SetConfig+0x386>
 8007d54:	4b16      	ldr	r3, [pc, #88]	; (8007db0 <UART_SetConfig+0x358>)
 8007d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d58:	f003 0307 	and.w	r3, r3, #7
 8007d5c:	2b05      	cmp	r3, #5
 8007d5e:	d839      	bhi.n	8007dd4 <UART_SetConfig+0x37c>
 8007d60:	a201      	add	r2, pc, #4	; (adr r2, 8007d68 <UART_SetConfig+0x310>)
 8007d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d66:	bf00      	nop
 8007d68:	08007d81 	.word	0x08007d81
 8007d6c:	08007d89 	.word	0x08007d89
 8007d70:	08007d91 	.word	0x08007d91
 8007d74:	08007d99 	.word	0x08007d99
 8007d78:	08007dc5 	.word	0x08007dc5
 8007d7c:	08007dcd 	.word	0x08007dcd
 8007d80:	2300      	movs	r3, #0
 8007d82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d86:	e153      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007d88:	2304      	movs	r3, #4
 8007d8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d8e:	e14f      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007d90:	2308      	movs	r3, #8
 8007d92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d96:	e14b      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007d98:	2310      	movs	r3, #16
 8007d9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d9e:	e147      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007da0:	cfff69f3 	.word	0xcfff69f3
 8007da4:	58000c00 	.word	0x58000c00
 8007da8:	11fff4ff 	.word	0x11fff4ff
 8007dac:	40011000 	.word	0x40011000
 8007db0:	58024400 	.word	0x58024400
 8007db4:	40004400 	.word	0x40004400
 8007db8:	40004800 	.word	0x40004800
 8007dbc:	40004c00 	.word	0x40004c00
 8007dc0:	40005000 	.word	0x40005000
 8007dc4:	2320      	movs	r3, #32
 8007dc6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007dca:	e131      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007dcc:	2340      	movs	r3, #64	; 0x40
 8007dce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007dd2:	e12d      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007dd4:	2380      	movs	r3, #128	; 0x80
 8007dd6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007dda:	bf00      	nop
 8007ddc:	e128      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4ac3      	ldr	r2, [pc, #780]	; (80080f0 <UART_SetConfig+0x698>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d178      	bne.n	8007eda <UART_SetConfig+0x482>
 8007de8:	4bc2      	ldr	r3, [pc, #776]	; (80080f4 <UART_SetConfig+0x69c>)
 8007dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007df0:	2b28      	cmp	r3, #40	; 0x28
 8007df2:	d86d      	bhi.n	8007ed0 <UART_SetConfig+0x478>
 8007df4:	a201      	add	r2, pc, #4	; (adr r2, 8007dfc <UART_SetConfig+0x3a4>)
 8007df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfa:	bf00      	nop
 8007dfc:	08007ea1 	.word	0x08007ea1
 8007e00:	08007ed1 	.word	0x08007ed1
 8007e04:	08007ed1 	.word	0x08007ed1
 8007e08:	08007ed1 	.word	0x08007ed1
 8007e0c:	08007ed1 	.word	0x08007ed1
 8007e10:	08007ed1 	.word	0x08007ed1
 8007e14:	08007ed1 	.word	0x08007ed1
 8007e18:	08007ed1 	.word	0x08007ed1
 8007e1c:	08007ea9 	.word	0x08007ea9
 8007e20:	08007ed1 	.word	0x08007ed1
 8007e24:	08007ed1 	.word	0x08007ed1
 8007e28:	08007ed1 	.word	0x08007ed1
 8007e2c:	08007ed1 	.word	0x08007ed1
 8007e30:	08007ed1 	.word	0x08007ed1
 8007e34:	08007ed1 	.word	0x08007ed1
 8007e38:	08007ed1 	.word	0x08007ed1
 8007e3c:	08007eb1 	.word	0x08007eb1
 8007e40:	08007ed1 	.word	0x08007ed1
 8007e44:	08007ed1 	.word	0x08007ed1
 8007e48:	08007ed1 	.word	0x08007ed1
 8007e4c:	08007ed1 	.word	0x08007ed1
 8007e50:	08007ed1 	.word	0x08007ed1
 8007e54:	08007ed1 	.word	0x08007ed1
 8007e58:	08007ed1 	.word	0x08007ed1
 8007e5c:	08007eb9 	.word	0x08007eb9
 8007e60:	08007ed1 	.word	0x08007ed1
 8007e64:	08007ed1 	.word	0x08007ed1
 8007e68:	08007ed1 	.word	0x08007ed1
 8007e6c:	08007ed1 	.word	0x08007ed1
 8007e70:	08007ed1 	.word	0x08007ed1
 8007e74:	08007ed1 	.word	0x08007ed1
 8007e78:	08007ed1 	.word	0x08007ed1
 8007e7c:	08007ec1 	.word	0x08007ec1
 8007e80:	08007ed1 	.word	0x08007ed1
 8007e84:	08007ed1 	.word	0x08007ed1
 8007e88:	08007ed1 	.word	0x08007ed1
 8007e8c:	08007ed1 	.word	0x08007ed1
 8007e90:	08007ed1 	.word	0x08007ed1
 8007e94:	08007ed1 	.word	0x08007ed1
 8007e98:	08007ed1 	.word	0x08007ed1
 8007e9c:	08007ec9 	.word	0x08007ec9
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ea6:	e0c3      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007ea8:	2304      	movs	r3, #4
 8007eaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007eae:	e0bf      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007eb0:	2308      	movs	r3, #8
 8007eb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007eb6:	e0bb      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007eb8:	2310      	movs	r3, #16
 8007eba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ebe:	e0b7      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007ec0:	2320      	movs	r3, #32
 8007ec2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ec6:	e0b3      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007ec8:	2340      	movs	r3, #64	; 0x40
 8007eca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ece:	e0af      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007ed0:	2380      	movs	r3, #128	; 0x80
 8007ed2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ed6:	bf00      	nop
 8007ed8:	e0aa      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a86      	ldr	r2, [pc, #536]	; (80080f8 <UART_SetConfig+0x6a0>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d132      	bne.n	8007f4a <UART_SetConfig+0x4f2>
 8007ee4:	4b83      	ldr	r3, [pc, #524]	; (80080f4 <UART_SetConfig+0x69c>)
 8007ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee8:	f003 0307 	and.w	r3, r3, #7
 8007eec:	2b05      	cmp	r3, #5
 8007eee:	d827      	bhi.n	8007f40 <UART_SetConfig+0x4e8>
 8007ef0:	a201      	add	r2, pc, #4	; (adr r2, 8007ef8 <UART_SetConfig+0x4a0>)
 8007ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef6:	bf00      	nop
 8007ef8:	08007f11 	.word	0x08007f11
 8007efc:	08007f19 	.word	0x08007f19
 8007f00:	08007f21 	.word	0x08007f21
 8007f04:	08007f29 	.word	0x08007f29
 8007f08:	08007f31 	.word	0x08007f31
 8007f0c:	08007f39 	.word	0x08007f39
 8007f10:	2300      	movs	r3, #0
 8007f12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f16:	e08b      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007f18:	2304      	movs	r3, #4
 8007f1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f1e:	e087      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007f20:	2308      	movs	r3, #8
 8007f22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f26:	e083      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007f28:	2310      	movs	r3, #16
 8007f2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f2e:	e07f      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007f30:	2320      	movs	r3, #32
 8007f32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f36:	e07b      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007f38:	2340      	movs	r3, #64	; 0x40
 8007f3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f3e:	e077      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007f40:	2380      	movs	r3, #128	; 0x80
 8007f42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f46:	bf00      	nop
 8007f48:	e072      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a6b      	ldr	r2, [pc, #428]	; (80080fc <UART_SetConfig+0x6a4>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d132      	bne.n	8007fba <UART_SetConfig+0x562>
 8007f54:	4b67      	ldr	r3, [pc, #412]	; (80080f4 <UART_SetConfig+0x69c>)
 8007f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f58:	f003 0307 	and.w	r3, r3, #7
 8007f5c:	2b05      	cmp	r3, #5
 8007f5e:	d827      	bhi.n	8007fb0 <UART_SetConfig+0x558>
 8007f60:	a201      	add	r2, pc, #4	; (adr r2, 8007f68 <UART_SetConfig+0x510>)
 8007f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f66:	bf00      	nop
 8007f68:	08007f81 	.word	0x08007f81
 8007f6c:	08007f89 	.word	0x08007f89
 8007f70:	08007f91 	.word	0x08007f91
 8007f74:	08007f99 	.word	0x08007f99
 8007f78:	08007fa1 	.word	0x08007fa1
 8007f7c:	08007fa9 	.word	0x08007fa9
 8007f80:	2300      	movs	r3, #0
 8007f82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f86:	e053      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007f88:	2304      	movs	r3, #4
 8007f8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f8e:	e04f      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007f90:	2308      	movs	r3, #8
 8007f92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f96:	e04b      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007f98:	2310      	movs	r3, #16
 8007f9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f9e:	e047      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007fa0:	2320      	movs	r3, #32
 8007fa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007fa6:	e043      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007fa8:	2340      	movs	r3, #64	; 0x40
 8007faa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007fae:	e03f      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007fb0:	2380      	movs	r3, #128	; 0x80
 8007fb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007fb6:	bf00      	nop
 8007fb8:	e03a      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a50      	ldr	r2, [pc, #320]	; (8008100 <UART_SetConfig+0x6a8>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d132      	bne.n	800802a <UART_SetConfig+0x5d2>
 8007fc4:	4b4b      	ldr	r3, [pc, #300]	; (80080f4 <UART_SetConfig+0x69c>)
 8007fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fc8:	f003 0307 	and.w	r3, r3, #7
 8007fcc:	2b05      	cmp	r3, #5
 8007fce:	d827      	bhi.n	8008020 <UART_SetConfig+0x5c8>
 8007fd0:	a201      	add	r2, pc, #4	; (adr r2, 8007fd8 <UART_SetConfig+0x580>)
 8007fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd6:	bf00      	nop
 8007fd8:	08007ff1 	.word	0x08007ff1
 8007fdc:	08007ff9 	.word	0x08007ff9
 8007fe0:	08008001 	.word	0x08008001
 8007fe4:	08008009 	.word	0x08008009
 8007fe8:	08008011 	.word	0x08008011
 8007fec:	08008019 	.word	0x08008019
 8007ff0:	2302      	movs	r3, #2
 8007ff2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ff6:	e01b      	b.n	8008030 <UART_SetConfig+0x5d8>
 8007ff8:	2304      	movs	r3, #4
 8007ffa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ffe:	e017      	b.n	8008030 <UART_SetConfig+0x5d8>
 8008000:	2308      	movs	r3, #8
 8008002:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008006:	e013      	b.n	8008030 <UART_SetConfig+0x5d8>
 8008008:	2310      	movs	r3, #16
 800800a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800800e:	e00f      	b.n	8008030 <UART_SetConfig+0x5d8>
 8008010:	2320      	movs	r3, #32
 8008012:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008016:	e00b      	b.n	8008030 <UART_SetConfig+0x5d8>
 8008018:	2340      	movs	r3, #64	; 0x40
 800801a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800801e:	e007      	b.n	8008030 <UART_SetConfig+0x5d8>
 8008020:	2380      	movs	r3, #128	; 0x80
 8008022:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008026:	bf00      	nop
 8008028:	e002      	b.n	8008030 <UART_SetConfig+0x5d8>
 800802a:	2380      	movs	r3, #128	; 0x80
 800802c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a32      	ldr	r2, [pc, #200]	; (8008100 <UART_SetConfig+0x6a8>)
 8008036:	4293      	cmp	r3, r2
 8008038:	f040 86f7 	bne.w	8008e2a <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800803c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008040:	2b08      	cmp	r3, #8
 8008042:	f000 80c0 	beq.w	80081c6 <UART_SetConfig+0x76e>
 8008046:	2b08      	cmp	r3, #8
 8008048:	dc04      	bgt.n	8008054 <UART_SetConfig+0x5fc>
 800804a:	2b02      	cmp	r3, #2
 800804c:	d00c      	beq.n	8008068 <UART_SetConfig+0x610>
 800804e:	2b04      	cmp	r3, #4
 8008050:	d065      	beq.n	800811e <UART_SetConfig+0x6c6>
 8008052:	e27a      	b.n	800854a <UART_SetConfig+0xaf2>
 8008054:	2b20      	cmp	r3, #32
 8008056:	f000 81b0 	beq.w	80083ba <UART_SetConfig+0x962>
 800805a:	2b40      	cmp	r3, #64	; 0x40
 800805c:	f000 821e 	beq.w	800849c <UART_SetConfig+0xa44>
 8008060:	2b10      	cmp	r3, #16
 8008062:	f000 8104 	beq.w	800826e <UART_SetConfig+0x816>
 8008066:	e270      	b.n	800854a <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008068:	f7fe ff2e 	bl	8006ec8 <HAL_RCCEx_GetD3PCLK1Freq>
 800806c:	4602      	mov	r2, r0
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008072:	2b00      	cmp	r3, #0
 8008074:	d04e      	beq.n	8008114 <UART_SetConfig+0x6bc>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807a:	2b01      	cmp	r3, #1
 800807c:	d048      	beq.n	8008110 <UART_SetConfig+0x6b8>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008082:	2b02      	cmp	r3, #2
 8008084:	d042      	beq.n	800810c <UART_SetConfig+0x6b4>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808a:	2b03      	cmp	r3, #3
 800808c:	d03c      	beq.n	8008108 <UART_SetConfig+0x6b0>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008092:	2b04      	cmp	r3, #4
 8008094:	d036      	beq.n	8008104 <UART_SetConfig+0x6ac>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809a:	2b05      	cmp	r3, #5
 800809c:	d026      	beq.n	80080ec <UART_SetConfig+0x694>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a2:	2b06      	cmp	r3, #6
 80080a4:	d020      	beq.n	80080e8 <UART_SetConfig+0x690>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080aa:	2b07      	cmp	r3, #7
 80080ac:	d01a      	beq.n	80080e4 <UART_SetConfig+0x68c>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b2:	2b08      	cmp	r3, #8
 80080b4:	d014      	beq.n	80080e0 <UART_SetConfig+0x688>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ba:	2b09      	cmp	r3, #9
 80080bc:	d00e      	beq.n	80080dc <UART_SetConfig+0x684>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c2:	2b0a      	cmp	r3, #10
 80080c4:	d008      	beq.n	80080d8 <UART_SetConfig+0x680>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ca:	2b0b      	cmp	r3, #11
 80080cc:	d102      	bne.n	80080d4 <UART_SetConfig+0x67c>
 80080ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080d2:	e020      	b.n	8008116 <UART_SetConfig+0x6be>
 80080d4:	2301      	movs	r3, #1
 80080d6:	e01e      	b.n	8008116 <UART_SetConfig+0x6be>
 80080d8:	2380      	movs	r3, #128	; 0x80
 80080da:	e01c      	b.n	8008116 <UART_SetConfig+0x6be>
 80080dc:	2340      	movs	r3, #64	; 0x40
 80080de:	e01a      	b.n	8008116 <UART_SetConfig+0x6be>
 80080e0:	2320      	movs	r3, #32
 80080e2:	e018      	b.n	8008116 <UART_SetConfig+0x6be>
 80080e4:	2310      	movs	r3, #16
 80080e6:	e016      	b.n	8008116 <UART_SetConfig+0x6be>
 80080e8:	230c      	movs	r3, #12
 80080ea:	e014      	b.n	8008116 <UART_SetConfig+0x6be>
 80080ec:	230a      	movs	r3, #10
 80080ee:	e012      	b.n	8008116 <UART_SetConfig+0x6be>
 80080f0:	40011400 	.word	0x40011400
 80080f4:	58024400 	.word	0x58024400
 80080f8:	40007800 	.word	0x40007800
 80080fc:	40007c00 	.word	0x40007c00
 8008100:	58000c00 	.word	0x58000c00
 8008104:	2308      	movs	r3, #8
 8008106:	e006      	b.n	8008116 <UART_SetConfig+0x6be>
 8008108:	2306      	movs	r3, #6
 800810a:	e004      	b.n	8008116 <UART_SetConfig+0x6be>
 800810c:	2304      	movs	r3, #4
 800810e:	e002      	b.n	8008116 <UART_SetConfig+0x6be>
 8008110:	2302      	movs	r3, #2
 8008112:	e000      	b.n	8008116 <UART_SetConfig+0x6be>
 8008114:	2301      	movs	r3, #1
 8008116:	fbb2 f3f3 	udiv	r3, r2, r3
 800811a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800811c:	e219      	b.n	8008552 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800811e:	f107 0318 	add.w	r3, r7, #24
 8008122:	4618      	mov	r0, r3
 8008124:	f7fe fee6 	bl	8006ef4 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008128:	69fa      	ldr	r2, [r7, #28]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812e:	2b00      	cmp	r3, #0
 8008130:	d044      	beq.n	80081bc <UART_SetConfig+0x764>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008136:	2b01      	cmp	r3, #1
 8008138:	d03e      	beq.n	80081b8 <UART_SetConfig+0x760>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813e:	2b02      	cmp	r3, #2
 8008140:	d038      	beq.n	80081b4 <UART_SetConfig+0x75c>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008146:	2b03      	cmp	r3, #3
 8008148:	d032      	beq.n	80081b0 <UART_SetConfig+0x758>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814e:	2b04      	cmp	r3, #4
 8008150:	d02c      	beq.n	80081ac <UART_SetConfig+0x754>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008156:	2b05      	cmp	r3, #5
 8008158:	d026      	beq.n	80081a8 <UART_SetConfig+0x750>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815e:	2b06      	cmp	r3, #6
 8008160:	d020      	beq.n	80081a4 <UART_SetConfig+0x74c>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008166:	2b07      	cmp	r3, #7
 8008168:	d01a      	beq.n	80081a0 <UART_SetConfig+0x748>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816e:	2b08      	cmp	r3, #8
 8008170:	d014      	beq.n	800819c <UART_SetConfig+0x744>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008176:	2b09      	cmp	r3, #9
 8008178:	d00e      	beq.n	8008198 <UART_SetConfig+0x740>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817e:	2b0a      	cmp	r3, #10
 8008180:	d008      	beq.n	8008194 <UART_SetConfig+0x73c>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008186:	2b0b      	cmp	r3, #11
 8008188:	d102      	bne.n	8008190 <UART_SetConfig+0x738>
 800818a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800818e:	e016      	b.n	80081be <UART_SetConfig+0x766>
 8008190:	2301      	movs	r3, #1
 8008192:	e014      	b.n	80081be <UART_SetConfig+0x766>
 8008194:	2380      	movs	r3, #128	; 0x80
 8008196:	e012      	b.n	80081be <UART_SetConfig+0x766>
 8008198:	2340      	movs	r3, #64	; 0x40
 800819a:	e010      	b.n	80081be <UART_SetConfig+0x766>
 800819c:	2320      	movs	r3, #32
 800819e:	e00e      	b.n	80081be <UART_SetConfig+0x766>
 80081a0:	2310      	movs	r3, #16
 80081a2:	e00c      	b.n	80081be <UART_SetConfig+0x766>
 80081a4:	230c      	movs	r3, #12
 80081a6:	e00a      	b.n	80081be <UART_SetConfig+0x766>
 80081a8:	230a      	movs	r3, #10
 80081aa:	e008      	b.n	80081be <UART_SetConfig+0x766>
 80081ac:	2308      	movs	r3, #8
 80081ae:	e006      	b.n	80081be <UART_SetConfig+0x766>
 80081b0:	2306      	movs	r3, #6
 80081b2:	e004      	b.n	80081be <UART_SetConfig+0x766>
 80081b4:	2304      	movs	r3, #4
 80081b6:	e002      	b.n	80081be <UART_SetConfig+0x766>
 80081b8:	2302      	movs	r3, #2
 80081ba:	e000      	b.n	80081be <UART_SetConfig+0x766>
 80081bc:	2301      	movs	r3, #1
 80081be:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081c4:	e1c5      	b.n	8008552 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081c6:	f107 030c 	add.w	r3, r7, #12
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7fe ffde 	bl	800718c <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d044      	beq.n	8008264 <UART_SetConfig+0x80c>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d03e      	beq.n	8008260 <UART_SetConfig+0x808>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d038      	beq.n	800825c <UART_SetConfig+0x804>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ee:	2b03      	cmp	r3, #3
 80081f0:	d032      	beq.n	8008258 <UART_SetConfig+0x800>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f6:	2b04      	cmp	r3, #4
 80081f8:	d02c      	beq.n	8008254 <UART_SetConfig+0x7fc>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fe:	2b05      	cmp	r3, #5
 8008200:	d026      	beq.n	8008250 <UART_SetConfig+0x7f8>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	2b06      	cmp	r3, #6
 8008208:	d020      	beq.n	800824c <UART_SetConfig+0x7f4>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820e:	2b07      	cmp	r3, #7
 8008210:	d01a      	beq.n	8008248 <UART_SetConfig+0x7f0>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008216:	2b08      	cmp	r3, #8
 8008218:	d014      	beq.n	8008244 <UART_SetConfig+0x7ec>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821e:	2b09      	cmp	r3, #9
 8008220:	d00e      	beq.n	8008240 <UART_SetConfig+0x7e8>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008226:	2b0a      	cmp	r3, #10
 8008228:	d008      	beq.n	800823c <UART_SetConfig+0x7e4>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822e:	2b0b      	cmp	r3, #11
 8008230:	d102      	bne.n	8008238 <UART_SetConfig+0x7e0>
 8008232:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008236:	e016      	b.n	8008266 <UART_SetConfig+0x80e>
 8008238:	2301      	movs	r3, #1
 800823a:	e014      	b.n	8008266 <UART_SetConfig+0x80e>
 800823c:	2380      	movs	r3, #128	; 0x80
 800823e:	e012      	b.n	8008266 <UART_SetConfig+0x80e>
 8008240:	2340      	movs	r3, #64	; 0x40
 8008242:	e010      	b.n	8008266 <UART_SetConfig+0x80e>
 8008244:	2320      	movs	r3, #32
 8008246:	e00e      	b.n	8008266 <UART_SetConfig+0x80e>
 8008248:	2310      	movs	r3, #16
 800824a:	e00c      	b.n	8008266 <UART_SetConfig+0x80e>
 800824c:	230c      	movs	r3, #12
 800824e:	e00a      	b.n	8008266 <UART_SetConfig+0x80e>
 8008250:	230a      	movs	r3, #10
 8008252:	e008      	b.n	8008266 <UART_SetConfig+0x80e>
 8008254:	2308      	movs	r3, #8
 8008256:	e006      	b.n	8008266 <UART_SetConfig+0x80e>
 8008258:	2306      	movs	r3, #6
 800825a:	e004      	b.n	8008266 <UART_SetConfig+0x80e>
 800825c:	2304      	movs	r3, #4
 800825e:	e002      	b.n	8008266 <UART_SetConfig+0x80e>
 8008260:	2302      	movs	r3, #2
 8008262:	e000      	b.n	8008266 <UART_SetConfig+0x80e>
 8008264:	2301      	movs	r3, #1
 8008266:	fbb2 f3f3 	udiv	r3, r2, r3
 800826a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800826c:	e171      	b.n	8008552 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800826e:	4b7a      	ldr	r3, [pc, #488]	; (8008458 <UART_SetConfig+0xa00>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 0320 	and.w	r3, r3, #32
 8008276:	2b00      	cmp	r3, #0
 8008278:	d054      	beq.n	8008324 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800827a:	4b77      	ldr	r3, [pc, #476]	; (8008458 <UART_SetConfig+0xa00>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	08db      	lsrs	r3, r3, #3
 8008280:	f003 0303 	and.w	r3, r3, #3
 8008284:	4a75      	ldr	r2, [pc, #468]	; (800845c <UART_SetConfig+0xa04>)
 8008286:	40da      	lsrs	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828c:	2b00      	cmp	r3, #0
 800828e:	d044      	beq.n	800831a <UART_SetConfig+0x8c2>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008294:	2b01      	cmp	r3, #1
 8008296:	d03e      	beq.n	8008316 <UART_SetConfig+0x8be>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829c:	2b02      	cmp	r3, #2
 800829e:	d038      	beq.n	8008312 <UART_SetConfig+0x8ba>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a4:	2b03      	cmp	r3, #3
 80082a6:	d032      	beq.n	800830e <UART_SetConfig+0x8b6>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ac:	2b04      	cmp	r3, #4
 80082ae:	d02c      	beq.n	800830a <UART_SetConfig+0x8b2>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b4:	2b05      	cmp	r3, #5
 80082b6:	d026      	beq.n	8008306 <UART_SetConfig+0x8ae>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082bc:	2b06      	cmp	r3, #6
 80082be:	d020      	beq.n	8008302 <UART_SetConfig+0x8aa>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c4:	2b07      	cmp	r3, #7
 80082c6:	d01a      	beq.n	80082fe <UART_SetConfig+0x8a6>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082cc:	2b08      	cmp	r3, #8
 80082ce:	d014      	beq.n	80082fa <UART_SetConfig+0x8a2>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d4:	2b09      	cmp	r3, #9
 80082d6:	d00e      	beq.n	80082f6 <UART_SetConfig+0x89e>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082dc:	2b0a      	cmp	r3, #10
 80082de:	d008      	beq.n	80082f2 <UART_SetConfig+0x89a>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e4:	2b0b      	cmp	r3, #11
 80082e6:	d102      	bne.n	80082ee <UART_SetConfig+0x896>
 80082e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082ec:	e016      	b.n	800831c <UART_SetConfig+0x8c4>
 80082ee:	2301      	movs	r3, #1
 80082f0:	e014      	b.n	800831c <UART_SetConfig+0x8c4>
 80082f2:	2380      	movs	r3, #128	; 0x80
 80082f4:	e012      	b.n	800831c <UART_SetConfig+0x8c4>
 80082f6:	2340      	movs	r3, #64	; 0x40
 80082f8:	e010      	b.n	800831c <UART_SetConfig+0x8c4>
 80082fa:	2320      	movs	r3, #32
 80082fc:	e00e      	b.n	800831c <UART_SetConfig+0x8c4>
 80082fe:	2310      	movs	r3, #16
 8008300:	e00c      	b.n	800831c <UART_SetConfig+0x8c4>
 8008302:	230c      	movs	r3, #12
 8008304:	e00a      	b.n	800831c <UART_SetConfig+0x8c4>
 8008306:	230a      	movs	r3, #10
 8008308:	e008      	b.n	800831c <UART_SetConfig+0x8c4>
 800830a:	2308      	movs	r3, #8
 800830c:	e006      	b.n	800831c <UART_SetConfig+0x8c4>
 800830e:	2306      	movs	r3, #6
 8008310:	e004      	b.n	800831c <UART_SetConfig+0x8c4>
 8008312:	2304      	movs	r3, #4
 8008314:	e002      	b.n	800831c <UART_SetConfig+0x8c4>
 8008316:	2302      	movs	r3, #2
 8008318:	e000      	b.n	800831c <UART_SetConfig+0x8c4>
 800831a:	2301      	movs	r3, #1
 800831c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008320:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8008322:	e116      	b.n	8008552 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008328:	2b00      	cmp	r3, #0
 800832a:	d043      	beq.n	80083b4 <UART_SetConfig+0x95c>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008330:	2b01      	cmp	r3, #1
 8008332:	d03d      	beq.n	80083b0 <UART_SetConfig+0x958>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008338:	2b02      	cmp	r3, #2
 800833a:	d037      	beq.n	80083ac <UART_SetConfig+0x954>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008340:	2b03      	cmp	r3, #3
 8008342:	d031      	beq.n	80083a8 <UART_SetConfig+0x950>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008348:	2b04      	cmp	r3, #4
 800834a:	d02b      	beq.n	80083a4 <UART_SetConfig+0x94c>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008350:	2b05      	cmp	r3, #5
 8008352:	d025      	beq.n	80083a0 <UART_SetConfig+0x948>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008358:	2b06      	cmp	r3, #6
 800835a:	d01f      	beq.n	800839c <UART_SetConfig+0x944>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008360:	2b07      	cmp	r3, #7
 8008362:	d019      	beq.n	8008398 <UART_SetConfig+0x940>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008368:	2b08      	cmp	r3, #8
 800836a:	d013      	beq.n	8008394 <UART_SetConfig+0x93c>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008370:	2b09      	cmp	r3, #9
 8008372:	d00d      	beq.n	8008390 <UART_SetConfig+0x938>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008378:	2b0a      	cmp	r3, #10
 800837a:	d007      	beq.n	800838c <UART_SetConfig+0x934>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008380:	2b0b      	cmp	r3, #11
 8008382:	d101      	bne.n	8008388 <UART_SetConfig+0x930>
 8008384:	4b36      	ldr	r3, [pc, #216]	; (8008460 <UART_SetConfig+0xa08>)
 8008386:	e016      	b.n	80083b6 <UART_SetConfig+0x95e>
 8008388:	4b34      	ldr	r3, [pc, #208]	; (800845c <UART_SetConfig+0xa04>)
 800838a:	e014      	b.n	80083b6 <UART_SetConfig+0x95e>
 800838c:	4b35      	ldr	r3, [pc, #212]	; (8008464 <UART_SetConfig+0xa0c>)
 800838e:	e012      	b.n	80083b6 <UART_SetConfig+0x95e>
 8008390:	4b35      	ldr	r3, [pc, #212]	; (8008468 <UART_SetConfig+0xa10>)
 8008392:	e010      	b.n	80083b6 <UART_SetConfig+0x95e>
 8008394:	4b35      	ldr	r3, [pc, #212]	; (800846c <UART_SetConfig+0xa14>)
 8008396:	e00e      	b.n	80083b6 <UART_SetConfig+0x95e>
 8008398:	4b35      	ldr	r3, [pc, #212]	; (8008470 <UART_SetConfig+0xa18>)
 800839a:	e00c      	b.n	80083b6 <UART_SetConfig+0x95e>
 800839c:	4b35      	ldr	r3, [pc, #212]	; (8008474 <UART_SetConfig+0xa1c>)
 800839e:	e00a      	b.n	80083b6 <UART_SetConfig+0x95e>
 80083a0:	4b35      	ldr	r3, [pc, #212]	; (8008478 <UART_SetConfig+0xa20>)
 80083a2:	e008      	b.n	80083b6 <UART_SetConfig+0x95e>
 80083a4:	4b35      	ldr	r3, [pc, #212]	; (800847c <UART_SetConfig+0xa24>)
 80083a6:	e006      	b.n	80083b6 <UART_SetConfig+0x95e>
 80083a8:	4b35      	ldr	r3, [pc, #212]	; (8008480 <UART_SetConfig+0xa28>)
 80083aa:	e004      	b.n	80083b6 <UART_SetConfig+0x95e>
 80083ac:	4b35      	ldr	r3, [pc, #212]	; (8008484 <UART_SetConfig+0xa2c>)
 80083ae:	e002      	b.n	80083b6 <UART_SetConfig+0x95e>
 80083b0:	4b35      	ldr	r3, [pc, #212]	; (8008488 <UART_SetConfig+0xa30>)
 80083b2:	e000      	b.n	80083b6 <UART_SetConfig+0x95e>
 80083b4:	4b29      	ldr	r3, [pc, #164]	; (800845c <UART_SetConfig+0xa04>)
 80083b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083b8:	e0cb      	b.n	8008552 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d046      	beq.n	8008450 <UART_SetConfig+0x9f8>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d040      	beq.n	800844c <UART_SetConfig+0x9f4>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	d03a      	beq.n	8008448 <UART_SetConfig+0x9f0>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d6:	2b03      	cmp	r3, #3
 80083d8:	d034      	beq.n	8008444 <UART_SetConfig+0x9ec>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083de:	2b04      	cmp	r3, #4
 80083e0:	d02e      	beq.n	8008440 <UART_SetConfig+0x9e8>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e6:	2b05      	cmp	r3, #5
 80083e8:	d028      	beq.n	800843c <UART_SetConfig+0x9e4>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ee:	2b06      	cmp	r3, #6
 80083f0:	d022      	beq.n	8008438 <UART_SetConfig+0x9e0>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f6:	2b07      	cmp	r3, #7
 80083f8:	d01c      	beq.n	8008434 <UART_SetConfig+0x9dc>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fe:	2b08      	cmp	r3, #8
 8008400:	d016      	beq.n	8008430 <UART_SetConfig+0x9d8>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008406:	2b09      	cmp	r3, #9
 8008408:	d00f      	beq.n	800842a <UART_SetConfig+0x9d2>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840e:	2b0a      	cmp	r3, #10
 8008410:	d008      	beq.n	8008424 <UART_SetConfig+0x9cc>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008416:	2b0b      	cmp	r3, #11
 8008418:	d102      	bne.n	8008420 <UART_SetConfig+0x9c8>
 800841a:	f643 5309 	movw	r3, #15625	; 0x3d09
 800841e:	e018      	b.n	8008452 <UART_SetConfig+0x9fa>
 8008420:	4b13      	ldr	r3, [pc, #76]	; (8008470 <UART_SetConfig+0xa18>)
 8008422:	e016      	b.n	8008452 <UART_SetConfig+0x9fa>
 8008424:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008428:	e013      	b.n	8008452 <UART_SetConfig+0x9fa>
 800842a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800842e:	e010      	b.n	8008452 <UART_SetConfig+0x9fa>
 8008430:	4b16      	ldr	r3, [pc, #88]	; (800848c <UART_SetConfig+0xa34>)
 8008432:	e00e      	b.n	8008452 <UART_SetConfig+0x9fa>
 8008434:	4b0a      	ldr	r3, [pc, #40]	; (8008460 <UART_SetConfig+0xa08>)
 8008436:	e00c      	b.n	8008452 <UART_SetConfig+0x9fa>
 8008438:	4b15      	ldr	r3, [pc, #84]	; (8008490 <UART_SetConfig+0xa38>)
 800843a:	e00a      	b.n	8008452 <UART_SetConfig+0x9fa>
 800843c:	4b15      	ldr	r3, [pc, #84]	; (8008494 <UART_SetConfig+0xa3c>)
 800843e:	e008      	b.n	8008452 <UART_SetConfig+0x9fa>
 8008440:	4b08      	ldr	r3, [pc, #32]	; (8008464 <UART_SetConfig+0xa0c>)
 8008442:	e006      	b.n	8008452 <UART_SetConfig+0x9fa>
 8008444:	4b14      	ldr	r3, [pc, #80]	; (8008498 <UART_SetConfig+0xa40>)
 8008446:	e004      	b.n	8008452 <UART_SetConfig+0x9fa>
 8008448:	4b07      	ldr	r3, [pc, #28]	; (8008468 <UART_SetConfig+0xa10>)
 800844a:	e002      	b.n	8008452 <UART_SetConfig+0x9fa>
 800844c:	4b07      	ldr	r3, [pc, #28]	; (800846c <UART_SetConfig+0xa14>)
 800844e:	e000      	b.n	8008452 <UART_SetConfig+0x9fa>
 8008450:	4b07      	ldr	r3, [pc, #28]	; (8008470 <UART_SetConfig+0xa18>)
 8008452:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008454:	e07d      	b.n	8008552 <UART_SetConfig+0xafa>
 8008456:	bf00      	nop
 8008458:	58024400 	.word	0x58024400
 800845c:	03d09000 	.word	0x03d09000
 8008460:	0003d090 	.word	0x0003d090
 8008464:	0007a120 	.word	0x0007a120
 8008468:	000f4240 	.word	0x000f4240
 800846c:	001e8480 	.word	0x001e8480
 8008470:	003d0900 	.word	0x003d0900
 8008474:	00516155 	.word	0x00516155
 8008478:	0061a800 	.word	0x0061a800
 800847c:	007a1200 	.word	0x007a1200
 8008480:	00a2c2aa 	.word	0x00a2c2aa
 8008484:	00f42400 	.word	0x00f42400
 8008488:	01e84800 	.word	0x01e84800
 800848c:	0001e848 	.word	0x0001e848
 8008490:	00051615 	.word	0x00051615
 8008494:	00061a80 	.word	0x00061a80
 8008498:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d04e      	beq.n	8008542 <UART_SetConfig+0xaea>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d047      	beq.n	800853c <UART_SetConfig+0xae4>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d040      	beq.n	8008536 <UART_SetConfig+0xade>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b8:	2b03      	cmp	r3, #3
 80084ba:	d039      	beq.n	8008530 <UART_SetConfig+0xad8>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c0:	2b04      	cmp	r3, #4
 80084c2:	d032      	beq.n	800852a <UART_SetConfig+0xad2>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c8:	2b05      	cmp	r3, #5
 80084ca:	d02b      	beq.n	8008524 <UART_SetConfig+0xacc>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d0:	2b06      	cmp	r3, #6
 80084d2:	d024      	beq.n	800851e <UART_SetConfig+0xac6>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d8:	2b07      	cmp	r3, #7
 80084da:	d01d      	beq.n	8008518 <UART_SetConfig+0xac0>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e0:	2b08      	cmp	r3, #8
 80084e2:	d016      	beq.n	8008512 <UART_SetConfig+0xaba>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e8:	2b09      	cmp	r3, #9
 80084ea:	d00f      	beq.n	800850c <UART_SetConfig+0xab4>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f0:	2b0a      	cmp	r3, #10
 80084f2:	d008      	beq.n	8008506 <UART_SetConfig+0xaae>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f8:	2b0b      	cmp	r3, #11
 80084fa:	d101      	bne.n	8008500 <UART_SetConfig+0xaa8>
 80084fc:	2380      	movs	r3, #128	; 0x80
 80084fe:	e022      	b.n	8008546 <UART_SetConfig+0xaee>
 8008500:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008504:	e01f      	b.n	8008546 <UART_SetConfig+0xaee>
 8008506:	f44f 7380 	mov.w	r3, #256	; 0x100
 800850a:	e01c      	b.n	8008546 <UART_SetConfig+0xaee>
 800850c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008510:	e019      	b.n	8008546 <UART_SetConfig+0xaee>
 8008512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008516:	e016      	b.n	8008546 <UART_SetConfig+0xaee>
 8008518:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800851c:	e013      	b.n	8008546 <UART_SetConfig+0xaee>
 800851e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008522:	e010      	b.n	8008546 <UART_SetConfig+0xaee>
 8008524:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008528:	e00d      	b.n	8008546 <UART_SetConfig+0xaee>
 800852a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800852e:	e00a      	b.n	8008546 <UART_SetConfig+0xaee>
 8008530:	f241 5355 	movw	r3, #5461	; 0x1555
 8008534:	e007      	b.n	8008546 <UART_SetConfig+0xaee>
 8008536:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800853a:	e004      	b.n	8008546 <UART_SetConfig+0xaee>
 800853c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008540:	e001      	b.n	8008546 <UART_SetConfig+0xaee>
 8008542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008546:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008548:	e003      	b.n	8008552 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008550:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8008552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008554:	2b00      	cmp	r3, #0
 8008556:	f001 83e8 	beq.w	8009d2a <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	685a      	ldr	r2, [r3, #4]
 800855e:	4613      	mov	r3, r2
 8008560:	005b      	lsls	r3, r3, #1
 8008562:	4413      	add	r3, r2
 8008564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008566:	429a      	cmp	r2, r3
 8008568:	d305      	bcc.n	8008576 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008572:	429a      	cmp	r2, r3
 8008574:	d904      	bls.n	8008580 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800857c:	f001 bbd5 	b.w	8009d2a <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8008580:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008584:	2b08      	cmp	r3, #8
 8008586:	f000 8154 	beq.w	8008832 <UART_SetConfig+0xdda>
 800858a:	2b08      	cmp	r3, #8
 800858c:	dc06      	bgt.n	800859c <UART_SetConfig+0xb44>
 800858e:	2b02      	cmp	r3, #2
 8008590:	d00f      	beq.n	80085b2 <UART_SetConfig+0xb5a>
 8008592:	2b04      	cmp	r3, #4
 8008594:	f000 80ac 	beq.w	80086f0 <UART_SetConfig+0xc98>
 8008598:	f000 bc30 	b.w	8008dfc <UART_SetConfig+0x13a4>
 800859c:	2b20      	cmp	r3, #32
 800859e:	f000 832d 	beq.w	8008bfc <UART_SetConfig+0x11a4>
 80085a2:	2b40      	cmp	r3, #64	; 0x40
 80085a4:	f000 83a5 	beq.w	8008cf2 <UART_SetConfig+0x129a>
 80085a8:	2b10      	cmp	r3, #16
 80085aa:	f000 81e3 	beq.w	8008974 <UART_SetConfig+0xf1c>
 80085ae:	f000 bc25 	b.w	8008dfc <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80085b2:	f7fe fc89 	bl	8006ec8 <HAL_RCCEx_GetD3PCLK1Freq>
 80085b6:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ba:	4618      	mov	r0, r3
 80085bc:	f04f 0100 	mov.w	r1, #0
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d067      	beq.n	8008698 <UART_SetConfig+0xc40>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d05e      	beq.n	800868e <UART_SetConfig+0xc36>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d055      	beq.n	8008684 <UART_SetConfig+0xc2c>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085dc:	2b03      	cmp	r3, #3
 80085de:	d04c      	beq.n	800867a <UART_SetConfig+0xc22>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e4:	2b04      	cmp	r3, #4
 80085e6:	d043      	beq.n	8008670 <UART_SetConfig+0xc18>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ec:	2b05      	cmp	r3, #5
 80085ee:	d03a      	beq.n	8008666 <UART_SetConfig+0xc0e>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f4:	2b06      	cmp	r3, #6
 80085f6:	d031      	beq.n	800865c <UART_SetConfig+0xc04>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fc:	2b07      	cmp	r3, #7
 80085fe:	d028      	beq.n	8008652 <UART_SetConfig+0xbfa>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008604:	2b08      	cmp	r3, #8
 8008606:	d01f      	beq.n	8008648 <UART_SetConfig+0xbf0>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860c:	2b09      	cmp	r3, #9
 800860e:	d016      	beq.n	800863e <UART_SetConfig+0xbe6>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008614:	2b0a      	cmp	r3, #10
 8008616:	d00d      	beq.n	8008634 <UART_SetConfig+0xbdc>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861c:	2b0b      	cmp	r3, #11
 800861e:	d104      	bne.n	800862a <UART_SetConfig+0xbd2>
 8008620:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008624:	f04f 0400 	mov.w	r4, #0
 8008628:	e03a      	b.n	80086a0 <UART_SetConfig+0xc48>
 800862a:	f04f 0301 	mov.w	r3, #1
 800862e:	f04f 0400 	mov.w	r4, #0
 8008632:	e035      	b.n	80086a0 <UART_SetConfig+0xc48>
 8008634:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008638:	f04f 0400 	mov.w	r4, #0
 800863c:	e030      	b.n	80086a0 <UART_SetConfig+0xc48>
 800863e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008642:	f04f 0400 	mov.w	r4, #0
 8008646:	e02b      	b.n	80086a0 <UART_SetConfig+0xc48>
 8008648:	f04f 0320 	mov.w	r3, #32
 800864c:	f04f 0400 	mov.w	r4, #0
 8008650:	e026      	b.n	80086a0 <UART_SetConfig+0xc48>
 8008652:	f04f 0310 	mov.w	r3, #16
 8008656:	f04f 0400 	mov.w	r4, #0
 800865a:	e021      	b.n	80086a0 <UART_SetConfig+0xc48>
 800865c:	f04f 030c 	mov.w	r3, #12
 8008660:	f04f 0400 	mov.w	r4, #0
 8008664:	e01c      	b.n	80086a0 <UART_SetConfig+0xc48>
 8008666:	f04f 030a 	mov.w	r3, #10
 800866a:	f04f 0400 	mov.w	r4, #0
 800866e:	e017      	b.n	80086a0 <UART_SetConfig+0xc48>
 8008670:	f04f 0308 	mov.w	r3, #8
 8008674:	f04f 0400 	mov.w	r4, #0
 8008678:	e012      	b.n	80086a0 <UART_SetConfig+0xc48>
 800867a:	f04f 0306 	mov.w	r3, #6
 800867e:	f04f 0400 	mov.w	r4, #0
 8008682:	e00d      	b.n	80086a0 <UART_SetConfig+0xc48>
 8008684:	f04f 0304 	mov.w	r3, #4
 8008688:	f04f 0400 	mov.w	r4, #0
 800868c:	e008      	b.n	80086a0 <UART_SetConfig+0xc48>
 800868e:	f04f 0302 	mov.w	r3, #2
 8008692:	f04f 0400 	mov.w	r4, #0
 8008696:	e003      	b.n	80086a0 <UART_SetConfig+0xc48>
 8008698:	f04f 0301 	mov.w	r3, #1
 800869c:	f04f 0400 	mov.w	r4, #0
 80086a0:	461a      	mov	r2, r3
 80086a2:	4623      	mov	r3, r4
 80086a4:	f7f7 ff82 	bl	80005ac <__aeabi_uldivmod>
 80086a8:	4603      	mov	r3, r0
 80086aa:	460c      	mov	r4, r1
 80086ac:	4619      	mov	r1, r3
 80086ae:	4622      	mov	r2, r4
 80086b0:	f04f 0300 	mov.w	r3, #0
 80086b4:	f04f 0400 	mov.w	r4, #0
 80086b8:	0214      	lsls	r4, r2, #8
 80086ba:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80086be:	020b      	lsls	r3, r1, #8
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	6852      	ldr	r2, [r2, #4]
 80086c4:	0852      	lsrs	r2, r2, #1
 80086c6:	4611      	mov	r1, r2
 80086c8:	f04f 0200 	mov.w	r2, #0
 80086cc:	eb13 0b01 	adds.w	fp, r3, r1
 80086d0:	eb44 0c02 	adc.w	ip, r4, r2
 80086d4:	4658      	mov	r0, fp
 80086d6:	4661      	mov	r1, ip
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	f04f 0400 	mov.w	r4, #0
 80086e0:	461a      	mov	r2, r3
 80086e2:	4623      	mov	r3, r4
 80086e4:	f7f7 ff62 	bl	80005ac <__aeabi_uldivmod>
 80086e8:	4603      	mov	r3, r0
 80086ea:	460c      	mov	r4, r1
 80086ec:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80086ee:	e389      	b.n	8008e04 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086f0:	f107 0318 	add.w	r3, r7, #24
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7fe fbfd 	bl	8006ef4 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	4618      	mov	r0, r3
 80086fe:	f04f 0100 	mov.w	r1, #0
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008706:	2b00      	cmp	r3, #0
 8008708:	d067      	beq.n	80087da <UART_SetConfig+0xd82>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870e:	2b01      	cmp	r3, #1
 8008710:	d05e      	beq.n	80087d0 <UART_SetConfig+0xd78>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008716:	2b02      	cmp	r3, #2
 8008718:	d055      	beq.n	80087c6 <UART_SetConfig+0xd6e>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871e:	2b03      	cmp	r3, #3
 8008720:	d04c      	beq.n	80087bc <UART_SetConfig+0xd64>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008726:	2b04      	cmp	r3, #4
 8008728:	d043      	beq.n	80087b2 <UART_SetConfig+0xd5a>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872e:	2b05      	cmp	r3, #5
 8008730:	d03a      	beq.n	80087a8 <UART_SetConfig+0xd50>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008736:	2b06      	cmp	r3, #6
 8008738:	d031      	beq.n	800879e <UART_SetConfig+0xd46>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873e:	2b07      	cmp	r3, #7
 8008740:	d028      	beq.n	8008794 <UART_SetConfig+0xd3c>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008746:	2b08      	cmp	r3, #8
 8008748:	d01f      	beq.n	800878a <UART_SetConfig+0xd32>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874e:	2b09      	cmp	r3, #9
 8008750:	d016      	beq.n	8008780 <UART_SetConfig+0xd28>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008756:	2b0a      	cmp	r3, #10
 8008758:	d00d      	beq.n	8008776 <UART_SetConfig+0xd1e>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875e:	2b0b      	cmp	r3, #11
 8008760:	d104      	bne.n	800876c <UART_SetConfig+0xd14>
 8008762:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008766:	f04f 0400 	mov.w	r4, #0
 800876a:	e03a      	b.n	80087e2 <UART_SetConfig+0xd8a>
 800876c:	f04f 0301 	mov.w	r3, #1
 8008770:	f04f 0400 	mov.w	r4, #0
 8008774:	e035      	b.n	80087e2 <UART_SetConfig+0xd8a>
 8008776:	f04f 0380 	mov.w	r3, #128	; 0x80
 800877a:	f04f 0400 	mov.w	r4, #0
 800877e:	e030      	b.n	80087e2 <UART_SetConfig+0xd8a>
 8008780:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008784:	f04f 0400 	mov.w	r4, #0
 8008788:	e02b      	b.n	80087e2 <UART_SetConfig+0xd8a>
 800878a:	f04f 0320 	mov.w	r3, #32
 800878e:	f04f 0400 	mov.w	r4, #0
 8008792:	e026      	b.n	80087e2 <UART_SetConfig+0xd8a>
 8008794:	f04f 0310 	mov.w	r3, #16
 8008798:	f04f 0400 	mov.w	r4, #0
 800879c:	e021      	b.n	80087e2 <UART_SetConfig+0xd8a>
 800879e:	f04f 030c 	mov.w	r3, #12
 80087a2:	f04f 0400 	mov.w	r4, #0
 80087a6:	e01c      	b.n	80087e2 <UART_SetConfig+0xd8a>
 80087a8:	f04f 030a 	mov.w	r3, #10
 80087ac:	f04f 0400 	mov.w	r4, #0
 80087b0:	e017      	b.n	80087e2 <UART_SetConfig+0xd8a>
 80087b2:	f04f 0308 	mov.w	r3, #8
 80087b6:	f04f 0400 	mov.w	r4, #0
 80087ba:	e012      	b.n	80087e2 <UART_SetConfig+0xd8a>
 80087bc:	f04f 0306 	mov.w	r3, #6
 80087c0:	f04f 0400 	mov.w	r4, #0
 80087c4:	e00d      	b.n	80087e2 <UART_SetConfig+0xd8a>
 80087c6:	f04f 0304 	mov.w	r3, #4
 80087ca:	f04f 0400 	mov.w	r4, #0
 80087ce:	e008      	b.n	80087e2 <UART_SetConfig+0xd8a>
 80087d0:	f04f 0302 	mov.w	r3, #2
 80087d4:	f04f 0400 	mov.w	r4, #0
 80087d8:	e003      	b.n	80087e2 <UART_SetConfig+0xd8a>
 80087da:	f04f 0301 	mov.w	r3, #1
 80087de:	f04f 0400 	mov.w	r4, #0
 80087e2:	461a      	mov	r2, r3
 80087e4:	4623      	mov	r3, r4
 80087e6:	f7f7 fee1 	bl	80005ac <__aeabi_uldivmod>
 80087ea:	4603      	mov	r3, r0
 80087ec:	460c      	mov	r4, r1
 80087ee:	4619      	mov	r1, r3
 80087f0:	4622      	mov	r2, r4
 80087f2:	f04f 0300 	mov.w	r3, #0
 80087f6:	f04f 0400 	mov.w	r4, #0
 80087fa:	0214      	lsls	r4, r2, #8
 80087fc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008800:	020b      	lsls	r3, r1, #8
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	6852      	ldr	r2, [r2, #4]
 8008806:	0852      	lsrs	r2, r2, #1
 8008808:	4611      	mov	r1, r2
 800880a:	f04f 0200 	mov.w	r2, #0
 800880e:	eb13 0b01 	adds.w	fp, r3, r1
 8008812:	eb44 0c02 	adc.w	ip, r4, r2
 8008816:	4658      	mov	r0, fp
 8008818:	4661      	mov	r1, ip
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	f04f 0400 	mov.w	r4, #0
 8008822:	461a      	mov	r2, r3
 8008824:	4623      	mov	r3, r4
 8008826:	f7f7 fec1 	bl	80005ac <__aeabi_uldivmod>
 800882a:	4603      	mov	r3, r0
 800882c:	460c      	mov	r4, r1
 800882e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008830:	e2e8      	b.n	8008e04 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008832:	f107 030c 	add.w	r3, r7, #12
 8008836:	4618      	mov	r0, r3
 8008838:	f7fe fca8 	bl	800718c <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	4618      	mov	r0, r3
 8008840:	f04f 0100 	mov.w	r1, #0
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008848:	2b00      	cmp	r3, #0
 800884a:	d067      	beq.n	800891c <UART_SetConfig+0xec4>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008850:	2b01      	cmp	r3, #1
 8008852:	d05e      	beq.n	8008912 <UART_SetConfig+0xeba>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008858:	2b02      	cmp	r3, #2
 800885a:	d055      	beq.n	8008908 <UART_SetConfig+0xeb0>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008860:	2b03      	cmp	r3, #3
 8008862:	d04c      	beq.n	80088fe <UART_SetConfig+0xea6>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008868:	2b04      	cmp	r3, #4
 800886a:	d043      	beq.n	80088f4 <UART_SetConfig+0xe9c>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008870:	2b05      	cmp	r3, #5
 8008872:	d03a      	beq.n	80088ea <UART_SetConfig+0xe92>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008878:	2b06      	cmp	r3, #6
 800887a:	d031      	beq.n	80088e0 <UART_SetConfig+0xe88>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008880:	2b07      	cmp	r3, #7
 8008882:	d028      	beq.n	80088d6 <UART_SetConfig+0xe7e>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008888:	2b08      	cmp	r3, #8
 800888a:	d01f      	beq.n	80088cc <UART_SetConfig+0xe74>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008890:	2b09      	cmp	r3, #9
 8008892:	d016      	beq.n	80088c2 <UART_SetConfig+0xe6a>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008898:	2b0a      	cmp	r3, #10
 800889a:	d00d      	beq.n	80088b8 <UART_SetConfig+0xe60>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a0:	2b0b      	cmp	r3, #11
 80088a2:	d104      	bne.n	80088ae <UART_SetConfig+0xe56>
 80088a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088a8:	f04f 0400 	mov.w	r4, #0
 80088ac:	e03a      	b.n	8008924 <UART_SetConfig+0xecc>
 80088ae:	f04f 0301 	mov.w	r3, #1
 80088b2:	f04f 0400 	mov.w	r4, #0
 80088b6:	e035      	b.n	8008924 <UART_SetConfig+0xecc>
 80088b8:	f04f 0380 	mov.w	r3, #128	; 0x80
 80088bc:	f04f 0400 	mov.w	r4, #0
 80088c0:	e030      	b.n	8008924 <UART_SetConfig+0xecc>
 80088c2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80088c6:	f04f 0400 	mov.w	r4, #0
 80088ca:	e02b      	b.n	8008924 <UART_SetConfig+0xecc>
 80088cc:	f04f 0320 	mov.w	r3, #32
 80088d0:	f04f 0400 	mov.w	r4, #0
 80088d4:	e026      	b.n	8008924 <UART_SetConfig+0xecc>
 80088d6:	f04f 0310 	mov.w	r3, #16
 80088da:	f04f 0400 	mov.w	r4, #0
 80088de:	e021      	b.n	8008924 <UART_SetConfig+0xecc>
 80088e0:	f04f 030c 	mov.w	r3, #12
 80088e4:	f04f 0400 	mov.w	r4, #0
 80088e8:	e01c      	b.n	8008924 <UART_SetConfig+0xecc>
 80088ea:	f04f 030a 	mov.w	r3, #10
 80088ee:	f04f 0400 	mov.w	r4, #0
 80088f2:	e017      	b.n	8008924 <UART_SetConfig+0xecc>
 80088f4:	f04f 0308 	mov.w	r3, #8
 80088f8:	f04f 0400 	mov.w	r4, #0
 80088fc:	e012      	b.n	8008924 <UART_SetConfig+0xecc>
 80088fe:	f04f 0306 	mov.w	r3, #6
 8008902:	f04f 0400 	mov.w	r4, #0
 8008906:	e00d      	b.n	8008924 <UART_SetConfig+0xecc>
 8008908:	f04f 0304 	mov.w	r3, #4
 800890c:	f04f 0400 	mov.w	r4, #0
 8008910:	e008      	b.n	8008924 <UART_SetConfig+0xecc>
 8008912:	f04f 0302 	mov.w	r3, #2
 8008916:	f04f 0400 	mov.w	r4, #0
 800891a:	e003      	b.n	8008924 <UART_SetConfig+0xecc>
 800891c:	f04f 0301 	mov.w	r3, #1
 8008920:	f04f 0400 	mov.w	r4, #0
 8008924:	461a      	mov	r2, r3
 8008926:	4623      	mov	r3, r4
 8008928:	f7f7 fe40 	bl	80005ac <__aeabi_uldivmod>
 800892c:	4603      	mov	r3, r0
 800892e:	460c      	mov	r4, r1
 8008930:	4619      	mov	r1, r3
 8008932:	4622      	mov	r2, r4
 8008934:	f04f 0300 	mov.w	r3, #0
 8008938:	f04f 0400 	mov.w	r4, #0
 800893c:	0214      	lsls	r4, r2, #8
 800893e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008942:	020b      	lsls	r3, r1, #8
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	6852      	ldr	r2, [r2, #4]
 8008948:	0852      	lsrs	r2, r2, #1
 800894a:	4611      	mov	r1, r2
 800894c:	f04f 0200 	mov.w	r2, #0
 8008950:	eb13 0b01 	adds.w	fp, r3, r1
 8008954:	eb44 0c02 	adc.w	ip, r4, r2
 8008958:	4658      	mov	r0, fp
 800895a:	4661      	mov	r1, ip
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	f04f 0400 	mov.w	r4, #0
 8008964:	461a      	mov	r2, r3
 8008966:	4623      	mov	r3, r4
 8008968:	f7f7 fe20 	bl	80005ac <__aeabi_uldivmod>
 800896c:	4603      	mov	r3, r0
 800896e:	460c      	mov	r4, r1
 8008970:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008972:	e247      	b.n	8008e04 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008974:	4b96      	ldr	r3, [pc, #600]	; (8008bd0 <UART_SetConfig+0x1178>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0320 	and.w	r3, r3, #32
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 80a3 	beq.w	8008ac8 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008982:	4b93      	ldr	r3, [pc, #588]	; (8008bd0 <UART_SetConfig+0x1178>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	08db      	lsrs	r3, r3, #3
 8008988:	f003 0303 	and.w	r3, r3, #3
 800898c:	4a91      	ldr	r2, [pc, #580]	; (8008bd4 <UART_SetConfig+0x117c>)
 800898e:	fa22 f303 	lsr.w	r3, r2, r3
 8008992:	4618      	mov	r0, r3
 8008994:	f04f 0100 	mov.w	r1, #0
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899c:	2b00      	cmp	r3, #0
 800899e:	d067      	beq.n	8008a70 <UART_SetConfig+0x1018>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d05e      	beq.n	8008a66 <UART_SetConfig+0x100e>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d055      	beq.n	8008a5c <UART_SetConfig+0x1004>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b4:	2b03      	cmp	r3, #3
 80089b6:	d04c      	beq.n	8008a52 <UART_SetConfig+0xffa>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089bc:	2b04      	cmp	r3, #4
 80089be:	d043      	beq.n	8008a48 <UART_SetConfig+0xff0>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c4:	2b05      	cmp	r3, #5
 80089c6:	d03a      	beq.n	8008a3e <UART_SetConfig+0xfe6>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089cc:	2b06      	cmp	r3, #6
 80089ce:	d031      	beq.n	8008a34 <UART_SetConfig+0xfdc>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d4:	2b07      	cmp	r3, #7
 80089d6:	d028      	beq.n	8008a2a <UART_SetConfig+0xfd2>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089dc:	2b08      	cmp	r3, #8
 80089de:	d01f      	beq.n	8008a20 <UART_SetConfig+0xfc8>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e4:	2b09      	cmp	r3, #9
 80089e6:	d016      	beq.n	8008a16 <UART_SetConfig+0xfbe>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ec:	2b0a      	cmp	r3, #10
 80089ee:	d00d      	beq.n	8008a0c <UART_SetConfig+0xfb4>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f4:	2b0b      	cmp	r3, #11
 80089f6:	d104      	bne.n	8008a02 <UART_SetConfig+0xfaa>
 80089f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089fc:	f04f 0400 	mov.w	r4, #0
 8008a00:	e03a      	b.n	8008a78 <UART_SetConfig+0x1020>
 8008a02:	f04f 0301 	mov.w	r3, #1
 8008a06:	f04f 0400 	mov.w	r4, #0
 8008a0a:	e035      	b.n	8008a78 <UART_SetConfig+0x1020>
 8008a0c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008a10:	f04f 0400 	mov.w	r4, #0
 8008a14:	e030      	b.n	8008a78 <UART_SetConfig+0x1020>
 8008a16:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008a1a:	f04f 0400 	mov.w	r4, #0
 8008a1e:	e02b      	b.n	8008a78 <UART_SetConfig+0x1020>
 8008a20:	f04f 0320 	mov.w	r3, #32
 8008a24:	f04f 0400 	mov.w	r4, #0
 8008a28:	e026      	b.n	8008a78 <UART_SetConfig+0x1020>
 8008a2a:	f04f 0310 	mov.w	r3, #16
 8008a2e:	f04f 0400 	mov.w	r4, #0
 8008a32:	e021      	b.n	8008a78 <UART_SetConfig+0x1020>
 8008a34:	f04f 030c 	mov.w	r3, #12
 8008a38:	f04f 0400 	mov.w	r4, #0
 8008a3c:	e01c      	b.n	8008a78 <UART_SetConfig+0x1020>
 8008a3e:	f04f 030a 	mov.w	r3, #10
 8008a42:	f04f 0400 	mov.w	r4, #0
 8008a46:	e017      	b.n	8008a78 <UART_SetConfig+0x1020>
 8008a48:	f04f 0308 	mov.w	r3, #8
 8008a4c:	f04f 0400 	mov.w	r4, #0
 8008a50:	e012      	b.n	8008a78 <UART_SetConfig+0x1020>
 8008a52:	f04f 0306 	mov.w	r3, #6
 8008a56:	f04f 0400 	mov.w	r4, #0
 8008a5a:	e00d      	b.n	8008a78 <UART_SetConfig+0x1020>
 8008a5c:	f04f 0304 	mov.w	r3, #4
 8008a60:	f04f 0400 	mov.w	r4, #0
 8008a64:	e008      	b.n	8008a78 <UART_SetConfig+0x1020>
 8008a66:	f04f 0302 	mov.w	r3, #2
 8008a6a:	f04f 0400 	mov.w	r4, #0
 8008a6e:	e003      	b.n	8008a78 <UART_SetConfig+0x1020>
 8008a70:	f04f 0301 	mov.w	r3, #1
 8008a74:	f04f 0400 	mov.w	r4, #0
 8008a78:	461a      	mov	r2, r3
 8008a7a:	4623      	mov	r3, r4
 8008a7c:	f7f7 fd96 	bl	80005ac <__aeabi_uldivmod>
 8008a80:	4603      	mov	r3, r0
 8008a82:	460c      	mov	r4, r1
 8008a84:	4619      	mov	r1, r3
 8008a86:	4622      	mov	r2, r4
 8008a88:	f04f 0300 	mov.w	r3, #0
 8008a8c:	f04f 0400 	mov.w	r4, #0
 8008a90:	0214      	lsls	r4, r2, #8
 8008a92:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008a96:	020b      	lsls	r3, r1, #8
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	6852      	ldr	r2, [r2, #4]
 8008a9c:	0852      	lsrs	r2, r2, #1
 8008a9e:	4611      	mov	r1, r2
 8008aa0:	f04f 0200 	mov.w	r2, #0
 8008aa4:	eb13 0b01 	adds.w	fp, r3, r1
 8008aa8:	eb44 0c02 	adc.w	ip, r4, r2
 8008aac:	4658      	mov	r0, fp
 8008aae:	4661      	mov	r1, ip
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	f04f 0400 	mov.w	r4, #0
 8008ab8:	461a      	mov	r2, r3
 8008aba:	4623      	mov	r3, r4
 8008abc:	f7f7 fd76 	bl	80005ac <__aeabi_uldivmod>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	460c      	mov	r4, r1
 8008ac4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8008ac6:	e19d      	b.n	8008e04 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d05b      	beq.n	8008b88 <UART_SetConfig+0x1130>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d053      	beq.n	8008b80 <UART_SetConfig+0x1128>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d04b      	beq.n	8008b78 <UART_SetConfig+0x1120>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae4:	2b03      	cmp	r3, #3
 8008ae6:	d043      	beq.n	8008b70 <UART_SetConfig+0x1118>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aec:	2b04      	cmp	r3, #4
 8008aee:	d03b      	beq.n	8008b68 <UART_SetConfig+0x1110>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af4:	2b05      	cmp	r3, #5
 8008af6:	d033      	beq.n	8008b60 <UART_SetConfig+0x1108>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afc:	2b06      	cmp	r3, #6
 8008afe:	d02b      	beq.n	8008b58 <UART_SetConfig+0x1100>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b04:	2b07      	cmp	r3, #7
 8008b06:	d023      	beq.n	8008b50 <UART_SetConfig+0x10f8>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0c:	2b08      	cmp	r3, #8
 8008b0e:	d01b      	beq.n	8008b48 <UART_SetConfig+0x10f0>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b14:	2b09      	cmp	r3, #9
 8008b16:	d013      	beq.n	8008b40 <UART_SetConfig+0x10e8>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1c:	2b0a      	cmp	r3, #10
 8008b1e:	d00b      	beq.n	8008b38 <UART_SetConfig+0x10e0>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b24:	2b0b      	cmp	r3, #11
 8008b26:	d103      	bne.n	8008b30 <UART_SetConfig+0x10d8>
 8008b28:	4b2a      	ldr	r3, [pc, #168]	; (8008bd4 <UART_SetConfig+0x117c>)
 8008b2a:	f04f 0400 	mov.w	r4, #0
 8008b2e:	e02e      	b.n	8008b8e <UART_SetConfig+0x1136>
 8008b30:	4b29      	ldr	r3, [pc, #164]	; (8008bd8 <UART_SetConfig+0x1180>)
 8008b32:	f04f 0403 	mov.w	r4, #3
 8008b36:	e02a      	b.n	8008b8e <UART_SetConfig+0x1136>
 8008b38:	4b28      	ldr	r3, [pc, #160]	; (8008bdc <UART_SetConfig+0x1184>)
 8008b3a:	f04f 0400 	mov.w	r4, #0
 8008b3e:	e026      	b.n	8008b8e <UART_SetConfig+0x1136>
 8008b40:	4b27      	ldr	r3, [pc, #156]	; (8008be0 <UART_SetConfig+0x1188>)
 8008b42:	f04f 0400 	mov.w	r4, #0
 8008b46:	e022      	b.n	8008b8e <UART_SetConfig+0x1136>
 8008b48:	4b26      	ldr	r3, [pc, #152]	; (8008be4 <UART_SetConfig+0x118c>)
 8008b4a:	f04f 0400 	mov.w	r4, #0
 8008b4e:	e01e      	b.n	8008b8e <UART_SetConfig+0x1136>
 8008b50:	4b25      	ldr	r3, [pc, #148]	; (8008be8 <UART_SetConfig+0x1190>)
 8008b52:	f04f 0400 	mov.w	r4, #0
 8008b56:	e01a      	b.n	8008b8e <UART_SetConfig+0x1136>
 8008b58:	a419      	add	r4, pc, #100	; (adr r4, 8008bc0 <UART_SetConfig+0x1168>)
 8008b5a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008b5e:	e016      	b.n	8008b8e <UART_SetConfig+0x1136>
 8008b60:	4b22      	ldr	r3, [pc, #136]	; (8008bec <UART_SetConfig+0x1194>)
 8008b62:	f04f 0400 	mov.w	r4, #0
 8008b66:	e012      	b.n	8008b8e <UART_SetConfig+0x1136>
 8008b68:	4b21      	ldr	r3, [pc, #132]	; (8008bf0 <UART_SetConfig+0x1198>)
 8008b6a:	f04f 0400 	mov.w	r4, #0
 8008b6e:	e00e      	b.n	8008b8e <UART_SetConfig+0x1136>
 8008b70:	a415      	add	r4, pc, #84	; (adr r4, 8008bc8 <UART_SetConfig+0x1170>)
 8008b72:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008b76:	e00a      	b.n	8008b8e <UART_SetConfig+0x1136>
 8008b78:	4b1e      	ldr	r3, [pc, #120]	; (8008bf4 <UART_SetConfig+0x119c>)
 8008b7a:	f04f 0400 	mov.w	r4, #0
 8008b7e:	e006      	b.n	8008b8e <UART_SetConfig+0x1136>
 8008b80:	4b1d      	ldr	r3, [pc, #116]	; (8008bf8 <UART_SetConfig+0x11a0>)
 8008b82:	f04f 0401 	mov.w	r4, #1
 8008b86:	e002      	b.n	8008b8e <UART_SetConfig+0x1136>
 8008b88:	4b13      	ldr	r3, [pc, #76]	; (8008bd8 <UART_SetConfig+0x1180>)
 8008b8a:	f04f 0403 	mov.w	r4, #3
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	6852      	ldr	r2, [r2, #4]
 8008b92:	0852      	lsrs	r2, r2, #1
 8008b94:	4611      	mov	r1, r2
 8008b96:	f04f 0200 	mov.w	r2, #0
 8008b9a:	eb13 0b01 	adds.w	fp, r3, r1
 8008b9e:	eb44 0c02 	adc.w	ip, r4, r2
 8008ba2:	4658      	mov	r0, fp
 8008ba4:	4661      	mov	r1, ip
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	f04f 0400 	mov.w	r4, #0
 8008bae:	461a      	mov	r2, r3
 8008bb0:	4623      	mov	r3, r4
 8008bb2:	f7f7 fcfb 	bl	80005ac <__aeabi_uldivmod>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	460c      	mov	r4, r1
 8008bba:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008bbc:	e122      	b.n	8008e04 <UART_SetConfig+0x13ac>
 8008bbe:	bf00      	nop
 8008bc0:	51615500 	.word	0x51615500
 8008bc4:	00000000 	.word	0x00000000
 8008bc8:	a2c2aa00 	.word	0xa2c2aa00
 8008bcc:	00000000 	.word	0x00000000
 8008bd0:	58024400 	.word	0x58024400
 8008bd4:	03d09000 	.word	0x03d09000
 8008bd8:	d0900000 	.word	0xd0900000
 8008bdc:	07a12000 	.word	0x07a12000
 8008be0:	0f424000 	.word	0x0f424000
 8008be4:	1e848000 	.word	0x1e848000
 8008be8:	3d090000 	.word	0x3d090000
 8008bec:	61a80000 	.word	0x61a80000
 8008bf0:	7a120000 	.word	0x7a120000
 8008bf4:	f4240000 	.word	0xf4240000
 8008bf8:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d05b      	beq.n	8008cbc <UART_SetConfig+0x1264>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d053      	beq.n	8008cb4 <UART_SetConfig+0x125c>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d04b      	beq.n	8008cac <UART_SetConfig+0x1254>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c18:	2b03      	cmp	r3, #3
 8008c1a:	d043      	beq.n	8008ca4 <UART_SetConfig+0x124c>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c20:	2b04      	cmp	r3, #4
 8008c22:	d03b      	beq.n	8008c9c <UART_SetConfig+0x1244>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c28:	2b05      	cmp	r3, #5
 8008c2a:	d033      	beq.n	8008c94 <UART_SetConfig+0x123c>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c30:	2b06      	cmp	r3, #6
 8008c32:	d02b      	beq.n	8008c8c <UART_SetConfig+0x1234>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c38:	2b07      	cmp	r3, #7
 8008c3a:	d023      	beq.n	8008c84 <UART_SetConfig+0x122c>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c40:	2b08      	cmp	r3, #8
 8008c42:	d01b      	beq.n	8008c7c <UART_SetConfig+0x1224>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c48:	2b09      	cmp	r3, #9
 8008c4a:	d013      	beq.n	8008c74 <UART_SetConfig+0x121c>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c50:	2b0a      	cmp	r3, #10
 8008c52:	d00b      	beq.n	8008c6c <UART_SetConfig+0x1214>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c58:	2b0b      	cmp	r3, #11
 8008c5a:	d103      	bne.n	8008c64 <UART_SetConfig+0x120c>
 8008c5c:	4bc0      	ldr	r3, [pc, #768]	; (8008f60 <UART_SetConfig+0x1508>)
 8008c5e:	f04f 0400 	mov.w	r4, #0
 8008c62:	e02e      	b.n	8008cc2 <UART_SetConfig+0x126a>
 8008c64:	4bbf      	ldr	r3, [pc, #764]	; (8008f64 <UART_SetConfig+0x150c>)
 8008c66:	f04f 0400 	mov.w	r4, #0
 8008c6a:	e02a      	b.n	8008cc2 <UART_SetConfig+0x126a>
 8008c6c:	4bbe      	ldr	r3, [pc, #760]	; (8008f68 <UART_SetConfig+0x1510>)
 8008c6e:	f04f 0400 	mov.w	r4, #0
 8008c72:	e026      	b.n	8008cc2 <UART_SetConfig+0x126a>
 8008c74:	4bbd      	ldr	r3, [pc, #756]	; (8008f6c <UART_SetConfig+0x1514>)
 8008c76:	f04f 0400 	mov.w	r4, #0
 8008c7a:	e022      	b.n	8008cc2 <UART_SetConfig+0x126a>
 8008c7c:	4bbc      	ldr	r3, [pc, #752]	; (8008f70 <UART_SetConfig+0x1518>)
 8008c7e:	f04f 0400 	mov.w	r4, #0
 8008c82:	e01e      	b.n	8008cc2 <UART_SetConfig+0x126a>
 8008c84:	4bbb      	ldr	r3, [pc, #748]	; (8008f74 <UART_SetConfig+0x151c>)
 8008c86:	f04f 0400 	mov.w	r4, #0
 8008c8a:	e01a      	b.n	8008cc2 <UART_SetConfig+0x126a>
 8008c8c:	a4b0      	add	r4, pc, #704	; (adr r4, 8008f50 <UART_SetConfig+0x14f8>)
 8008c8e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008c92:	e016      	b.n	8008cc2 <UART_SetConfig+0x126a>
 8008c94:	4bb8      	ldr	r3, [pc, #736]	; (8008f78 <UART_SetConfig+0x1520>)
 8008c96:	f04f 0400 	mov.w	r4, #0
 8008c9a:	e012      	b.n	8008cc2 <UART_SetConfig+0x126a>
 8008c9c:	4bb7      	ldr	r3, [pc, #732]	; (8008f7c <UART_SetConfig+0x1524>)
 8008c9e:	f04f 0400 	mov.w	r4, #0
 8008ca2:	e00e      	b.n	8008cc2 <UART_SetConfig+0x126a>
 8008ca4:	a4ac      	add	r4, pc, #688	; (adr r4, 8008f58 <UART_SetConfig+0x1500>)
 8008ca6:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008caa:	e00a      	b.n	8008cc2 <UART_SetConfig+0x126a>
 8008cac:	4bb4      	ldr	r3, [pc, #720]	; (8008f80 <UART_SetConfig+0x1528>)
 8008cae:	f04f 0400 	mov.w	r4, #0
 8008cb2:	e006      	b.n	8008cc2 <UART_SetConfig+0x126a>
 8008cb4:	4bb3      	ldr	r3, [pc, #716]	; (8008f84 <UART_SetConfig+0x152c>)
 8008cb6:	f04f 0400 	mov.w	r4, #0
 8008cba:	e002      	b.n	8008cc2 <UART_SetConfig+0x126a>
 8008cbc:	4ba9      	ldr	r3, [pc, #676]	; (8008f64 <UART_SetConfig+0x150c>)
 8008cbe:	f04f 0400 	mov.w	r4, #0
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	6852      	ldr	r2, [r2, #4]
 8008cc6:	0852      	lsrs	r2, r2, #1
 8008cc8:	4611      	mov	r1, r2
 8008cca:	f04f 0200 	mov.w	r2, #0
 8008cce:	eb13 0b01 	adds.w	fp, r3, r1
 8008cd2:	eb44 0c02 	adc.w	ip, r4, r2
 8008cd6:	4658      	mov	r0, fp
 8008cd8:	4661      	mov	r1, ip
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	f04f 0400 	mov.w	r4, #0
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	4623      	mov	r3, r4
 8008ce6:	f7f7 fc61 	bl	80005ac <__aeabi_uldivmod>
 8008cea:	4603      	mov	r3, r0
 8008cec:	460c      	mov	r4, r1
 8008cee:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008cf0:	e088      	b.n	8008e04 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d064      	beq.n	8008dc4 <UART_SetConfig+0x136c>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d05b      	beq.n	8008dba <UART_SetConfig+0x1362>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d052      	beq.n	8008db0 <UART_SetConfig+0x1358>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0e:	2b03      	cmp	r3, #3
 8008d10:	d04a      	beq.n	8008da8 <UART_SetConfig+0x1350>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d16:	2b04      	cmp	r3, #4
 8008d18:	d041      	beq.n	8008d9e <UART_SetConfig+0x1346>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1e:	2b05      	cmp	r3, #5
 8008d20:	d039      	beq.n	8008d96 <UART_SetConfig+0x133e>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d26:	2b06      	cmp	r3, #6
 8008d28:	d031      	beq.n	8008d8e <UART_SetConfig+0x1336>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2e:	2b07      	cmp	r3, #7
 8008d30:	d028      	beq.n	8008d84 <UART_SetConfig+0x132c>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d36:	2b08      	cmp	r3, #8
 8008d38:	d01f      	beq.n	8008d7a <UART_SetConfig+0x1322>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3e:	2b09      	cmp	r3, #9
 8008d40:	d016      	beq.n	8008d70 <UART_SetConfig+0x1318>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d46:	2b0a      	cmp	r3, #10
 8008d48:	d00d      	beq.n	8008d66 <UART_SetConfig+0x130e>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4e:	2b0b      	cmp	r3, #11
 8008d50:	d104      	bne.n	8008d5c <UART_SetConfig+0x1304>
 8008d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d56:	f04f 0400 	mov.w	r4, #0
 8008d5a:	e037      	b.n	8008dcc <UART_SetConfig+0x1374>
 8008d5c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008d60:	f04f 0400 	mov.w	r4, #0
 8008d64:	e032      	b.n	8008dcc <UART_SetConfig+0x1374>
 8008d66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d6a:	f04f 0400 	mov.w	r4, #0
 8008d6e:	e02d      	b.n	8008dcc <UART_SetConfig+0x1374>
 8008d70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008d74:	f04f 0400 	mov.w	r4, #0
 8008d78:	e028      	b.n	8008dcc <UART_SetConfig+0x1374>
 8008d7a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008d7e:	f04f 0400 	mov.w	r4, #0
 8008d82:	e023      	b.n	8008dcc <UART_SetConfig+0x1374>
 8008d84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008d88:	f04f 0400 	mov.w	r4, #0
 8008d8c:	e01e      	b.n	8008dcc <UART_SetConfig+0x1374>
 8008d8e:	4b7e      	ldr	r3, [pc, #504]	; (8008f88 <UART_SetConfig+0x1530>)
 8008d90:	f04f 0400 	mov.w	r4, #0
 8008d94:	e01a      	b.n	8008dcc <UART_SetConfig+0x1374>
 8008d96:	4b7d      	ldr	r3, [pc, #500]	; (8008f8c <UART_SetConfig+0x1534>)
 8008d98:	f04f 0400 	mov.w	r4, #0
 8008d9c:	e016      	b.n	8008dcc <UART_SetConfig+0x1374>
 8008d9e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008da2:	f04f 0400 	mov.w	r4, #0
 8008da6:	e011      	b.n	8008dcc <UART_SetConfig+0x1374>
 8008da8:	4b79      	ldr	r3, [pc, #484]	; (8008f90 <UART_SetConfig+0x1538>)
 8008daa:	f04f 0400 	mov.w	r4, #0
 8008dae:	e00d      	b.n	8008dcc <UART_SetConfig+0x1374>
 8008db0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008db4:	f04f 0400 	mov.w	r4, #0
 8008db8:	e008      	b.n	8008dcc <UART_SetConfig+0x1374>
 8008dba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008dbe:	f04f 0400 	mov.w	r4, #0
 8008dc2:	e003      	b.n	8008dcc <UART_SetConfig+0x1374>
 8008dc4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008dc8:	f04f 0400 	mov.w	r4, #0
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	6852      	ldr	r2, [r2, #4]
 8008dd0:	0852      	lsrs	r2, r2, #1
 8008dd2:	4611      	mov	r1, r2
 8008dd4:	f04f 0200 	mov.w	r2, #0
 8008dd8:	eb13 0b01 	adds.w	fp, r3, r1
 8008ddc:	eb44 0c02 	adc.w	ip, r4, r2
 8008de0:	4658      	mov	r0, fp
 8008de2:	4661      	mov	r1, ip
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	f04f 0400 	mov.w	r4, #0
 8008dec:	461a      	mov	r2, r3
 8008dee:	4623      	mov	r3, r4
 8008df0:	f7f7 fbdc 	bl	80005ac <__aeabi_uldivmod>
 8008df4:	4603      	mov	r3, r0
 8008df6:	460c      	mov	r4, r1
 8008df8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008dfa:	e003      	b.n	8008e04 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8008e02:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e0a:	d309      	bcc.n	8008e20 <UART_SetConfig+0x13c8>
 8008e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e12:	d205      	bcs.n	8008e20 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e1a:	60da      	str	r2, [r3, #12]
 8008e1c:	f000 bf85 	b.w	8009d2a <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8008e20:	2301      	movs	r3, #1
 8008e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e26:	f000 bf80 	b.w	8009d2a <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	69db      	ldr	r3, [r3, #28]
 8008e2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e32:	f040 83da 	bne.w	80095ea <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8008e36:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008e3a:	2b40      	cmp	r3, #64	; 0x40
 8008e3c:	f200 83b3 	bhi.w	80095a6 <UART_SetConfig+0x1b4e>
 8008e40:	a201      	add	r2, pc, #4	; (adr r2, 8008e48 <UART_SetConfig+0x13f0>)
 8008e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e46:	bf00      	nop
 8008e48:	08008f95 	.word	0x08008f95
 8008e4c:	0800904d 	.word	0x0800904d
 8008e50:	080095a7 	.word	0x080095a7
 8008e54:	080095a7 	.word	0x080095a7
 8008e58:	08009105 	.word	0x08009105
 8008e5c:	080095a7 	.word	0x080095a7
 8008e60:	080095a7 	.word	0x080095a7
 8008e64:	080095a7 	.word	0x080095a7
 8008e68:	080091c1 	.word	0x080091c1
 8008e6c:	080095a7 	.word	0x080095a7
 8008e70:	080095a7 	.word	0x080095a7
 8008e74:	080095a7 	.word	0x080095a7
 8008e78:	080095a7 	.word	0x080095a7
 8008e7c:	080095a7 	.word	0x080095a7
 8008e80:	080095a7 	.word	0x080095a7
 8008e84:	080095a7 	.word	0x080095a7
 8008e88:	0800927d 	.word	0x0800927d
 8008e8c:	080095a7 	.word	0x080095a7
 8008e90:	080095a7 	.word	0x080095a7
 8008e94:	080095a7 	.word	0x080095a7
 8008e98:	080095a7 	.word	0x080095a7
 8008e9c:	080095a7 	.word	0x080095a7
 8008ea0:	080095a7 	.word	0x080095a7
 8008ea4:	080095a7 	.word	0x080095a7
 8008ea8:	080095a7 	.word	0x080095a7
 8008eac:	080095a7 	.word	0x080095a7
 8008eb0:	080095a7 	.word	0x080095a7
 8008eb4:	080095a7 	.word	0x080095a7
 8008eb8:	080095a7 	.word	0x080095a7
 8008ebc:	080095a7 	.word	0x080095a7
 8008ec0:	080095a7 	.word	0x080095a7
 8008ec4:	080095a7 	.word	0x080095a7
 8008ec8:	080093ef 	.word	0x080093ef
 8008ecc:	080095a7 	.word	0x080095a7
 8008ed0:	080095a7 	.word	0x080095a7
 8008ed4:	080095a7 	.word	0x080095a7
 8008ed8:	080095a7 	.word	0x080095a7
 8008edc:	080095a7 	.word	0x080095a7
 8008ee0:	080095a7 	.word	0x080095a7
 8008ee4:	080095a7 	.word	0x080095a7
 8008ee8:	080095a7 	.word	0x080095a7
 8008eec:	080095a7 	.word	0x080095a7
 8008ef0:	080095a7 	.word	0x080095a7
 8008ef4:	080095a7 	.word	0x080095a7
 8008ef8:	080095a7 	.word	0x080095a7
 8008efc:	080095a7 	.word	0x080095a7
 8008f00:	080095a7 	.word	0x080095a7
 8008f04:	080095a7 	.word	0x080095a7
 8008f08:	080095a7 	.word	0x080095a7
 8008f0c:	080095a7 	.word	0x080095a7
 8008f10:	080095a7 	.word	0x080095a7
 8008f14:	080095a7 	.word	0x080095a7
 8008f18:	080095a7 	.word	0x080095a7
 8008f1c:	080095a7 	.word	0x080095a7
 8008f20:	080095a7 	.word	0x080095a7
 8008f24:	080095a7 	.word	0x080095a7
 8008f28:	080095a7 	.word	0x080095a7
 8008f2c:	080095a7 	.word	0x080095a7
 8008f30:	080095a7 	.word	0x080095a7
 8008f34:	080095a7 	.word	0x080095a7
 8008f38:	080095a7 	.word	0x080095a7
 8008f3c:	080095a7 	.word	0x080095a7
 8008f40:	080095a7 	.word	0x080095a7
 8008f44:	080095a7 	.word	0x080095a7
 8008f48:	080094e5 	.word	0x080094e5
 8008f4c:	f3af 8000 	nop.w
 8008f50:	05161500 	.word	0x05161500
 8008f54:	00000000 	.word	0x00000000
 8008f58:	0a2c2a00 	.word	0x0a2c2a00
 8008f5c:	00000000 	.word	0x00000000
 8008f60:	003d0900 	.word	0x003d0900
 8008f64:	3d090000 	.word	0x3d090000
 8008f68:	007a1200 	.word	0x007a1200
 8008f6c:	00f42400 	.word	0x00f42400
 8008f70:	01e84800 	.word	0x01e84800
 8008f74:	03d09000 	.word	0x03d09000
 8008f78:	061a8000 	.word	0x061a8000
 8008f7c:	07a12000 	.word	0x07a12000
 8008f80:	0f424000 	.word	0x0f424000
 8008f84:	1e848000 	.word	0x1e848000
 8008f88:	000aaa00 	.word	0x000aaa00
 8008f8c:	000ccc00 	.word	0x000ccc00
 8008f90:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f94:	f7fd f88e 	bl	80060b4 <HAL_RCC_GetPCLK1Freq>
 8008f98:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d044      	beq.n	800902c <UART_SetConfig+0x15d4>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d03e      	beq.n	8009028 <UART_SetConfig+0x15d0>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d038      	beq.n	8009024 <UART_SetConfig+0x15cc>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb6:	2b03      	cmp	r3, #3
 8008fb8:	d032      	beq.n	8009020 <UART_SetConfig+0x15c8>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbe:	2b04      	cmp	r3, #4
 8008fc0:	d02c      	beq.n	800901c <UART_SetConfig+0x15c4>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc6:	2b05      	cmp	r3, #5
 8008fc8:	d026      	beq.n	8009018 <UART_SetConfig+0x15c0>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fce:	2b06      	cmp	r3, #6
 8008fd0:	d020      	beq.n	8009014 <UART_SetConfig+0x15bc>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd6:	2b07      	cmp	r3, #7
 8008fd8:	d01a      	beq.n	8009010 <UART_SetConfig+0x15b8>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fde:	2b08      	cmp	r3, #8
 8008fe0:	d014      	beq.n	800900c <UART_SetConfig+0x15b4>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe6:	2b09      	cmp	r3, #9
 8008fe8:	d00e      	beq.n	8009008 <UART_SetConfig+0x15b0>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fee:	2b0a      	cmp	r3, #10
 8008ff0:	d008      	beq.n	8009004 <UART_SetConfig+0x15ac>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff6:	2b0b      	cmp	r3, #11
 8008ff8:	d102      	bne.n	8009000 <UART_SetConfig+0x15a8>
 8008ffa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ffe:	e016      	b.n	800902e <UART_SetConfig+0x15d6>
 8009000:	2301      	movs	r3, #1
 8009002:	e014      	b.n	800902e <UART_SetConfig+0x15d6>
 8009004:	2380      	movs	r3, #128	; 0x80
 8009006:	e012      	b.n	800902e <UART_SetConfig+0x15d6>
 8009008:	2340      	movs	r3, #64	; 0x40
 800900a:	e010      	b.n	800902e <UART_SetConfig+0x15d6>
 800900c:	2320      	movs	r3, #32
 800900e:	e00e      	b.n	800902e <UART_SetConfig+0x15d6>
 8009010:	2310      	movs	r3, #16
 8009012:	e00c      	b.n	800902e <UART_SetConfig+0x15d6>
 8009014:	230c      	movs	r3, #12
 8009016:	e00a      	b.n	800902e <UART_SetConfig+0x15d6>
 8009018:	230a      	movs	r3, #10
 800901a:	e008      	b.n	800902e <UART_SetConfig+0x15d6>
 800901c:	2308      	movs	r3, #8
 800901e:	e006      	b.n	800902e <UART_SetConfig+0x15d6>
 8009020:	2306      	movs	r3, #6
 8009022:	e004      	b.n	800902e <UART_SetConfig+0x15d6>
 8009024:	2304      	movs	r3, #4
 8009026:	e002      	b.n	800902e <UART_SetConfig+0x15d6>
 8009028:	2302      	movs	r3, #2
 800902a:	e000      	b.n	800902e <UART_SetConfig+0x15d6>
 800902c:	2301      	movs	r3, #1
 800902e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009030:	fbb2 f3f3 	udiv	r3, r2, r3
 8009034:	005a      	lsls	r2, r3, #1
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	085b      	lsrs	r3, r3, #1
 800903c:	441a      	add	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	fbb2 f3f3 	udiv	r3, r2, r3
 8009046:	b29b      	uxth	r3, r3
 8009048:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800904a:	e2b0      	b.n	80095ae <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800904c:	f7fd f848 	bl	80060e0 <HAL_RCC_GetPCLK2Freq>
 8009050:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009056:	2b00      	cmp	r3, #0
 8009058:	d044      	beq.n	80090e4 <UART_SetConfig+0x168c>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905e:	2b01      	cmp	r3, #1
 8009060:	d03e      	beq.n	80090e0 <UART_SetConfig+0x1688>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009066:	2b02      	cmp	r3, #2
 8009068:	d038      	beq.n	80090dc <UART_SetConfig+0x1684>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906e:	2b03      	cmp	r3, #3
 8009070:	d032      	beq.n	80090d8 <UART_SetConfig+0x1680>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009076:	2b04      	cmp	r3, #4
 8009078:	d02c      	beq.n	80090d4 <UART_SetConfig+0x167c>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907e:	2b05      	cmp	r3, #5
 8009080:	d026      	beq.n	80090d0 <UART_SetConfig+0x1678>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009086:	2b06      	cmp	r3, #6
 8009088:	d020      	beq.n	80090cc <UART_SetConfig+0x1674>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908e:	2b07      	cmp	r3, #7
 8009090:	d01a      	beq.n	80090c8 <UART_SetConfig+0x1670>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009096:	2b08      	cmp	r3, #8
 8009098:	d014      	beq.n	80090c4 <UART_SetConfig+0x166c>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909e:	2b09      	cmp	r3, #9
 80090a0:	d00e      	beq.n	80090c0 <UART_SetConfig+0x1668>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a6:	2b0a      	cmp	r3, #10
 80090a8:	d008      	beq.n	80090bc <UART_SetConfig+0x1664>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ae:	2b0b      	cmp	r3, #11
 80090b0:	d102      	bne.n	80090b8 <UART_SetConfig+0x1660>
 80090b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090b6:	e016      	b.n	80090e6 <UART_SetConfig+0x168e>
 80090b8:	2301      	movs	r3, #1
 80090ba:	e014      	b.n	80090e6 <UART_SetConfig+0x168e>
 80090bc:	2380      	movs	r3, #128	; 0x80
 80090be:	e012      	b.n	80090e6 <UART_SetConfig+0x168e>
 80090c0:	2340      	movs	r3, #64	; 0x40
 80090c2:	e010      	b.n	80090e6 <UART_SetConfig+0x168e>
 80090c4:	2320      	movs	r3, #32
 80090c6:	e00e      	b.n	80090e6 <UART_SetConfig+0x168e>
 80090c8:	2310      	movs	r3, #16
 80090ca:	e00c      	b.n	80090e6 <UART_SetConfig+0x168e>
 80090cc:	230c      	movs	r3, #12
 80090ce:	e00a      	b.n	80090e6 <UART_SetConfig+0x168e>
 80090d0:	230a      	movs	r3, #10
 80090d2:	e008      	b.n	80090e6 <UART_SetConfig+0x168e>
 80090d4:	2308      	movs	r3, #8
 80090d6:	e006      	b.n	80090e6 <UART_SetConfig+0x168e>
 80090d8:	2306      	movs	r3, #6
 80090da:	e004      	b.n	80090e6 <UART_SetConfig+0x168e>
 80090dc:	2304      	movs	r3, #4
 80090de:	e002      	b.n	80090e6 <UART_SetConfig+0x168e>
 80090e0:	2302      	movs	r3, #2
 80090e2:	e000      	b.n	80090e6 <UART_SetConfig+0x168e>
 80090e4:	2301      	movs	r3, #1
 80090e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ec:	005a      	lsls	r2, r3, #1
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	085b      	lsrs	r3, r3, #1
 80090f4:	441a      	add	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80090fe:	b29b      	uxth	r3, r3
 8009100:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009102:	e254      	b.n	80095ae <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009104:	f107 0318 	add.w	r3, r7, #24
 8009108:	4618      	mov	r0, r3
 800910a:	f7fd fef3 	bl	8006ef4 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800910e:	69fa      	ldr	r2, [r7, #28]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009114:	2b00      	cmp	r3, #0
 8009116:	d044      	beq.n	80091a2 <UART_SetConfig+0x174a>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911c:	2b01      	cmp	r3, #1
 800911e:	d03e      	beq.n	800919e <UART_SetConfig+0x1746>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009124:	2b02      	cmp	r3, #2
 8009126:	d038      	beq.n	800919a <UART_SetConfig+0x1742>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912c:	2b03      	cmp	r3, #3
 800912e:	d032      	beq.n	8009196 <UART_SetConfig+0x173e>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009134:	2b04      	cmp	r3, #4
 8009136:	d02c      	beq.n	8009192 <UART_SetConfig+0x173a>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913c:	2b05      	cmp	r3, #5
 800913e:	d026      	beq.n	800918e <UART_SetConfig+0x1736>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009144:	2b06      	cmp	r3, #6
 8009146:	d020      	beq.n	800918a <UART_SetConfig+0x1732>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914c:	2b07      	cmp	r3, #7
 800914e:	d01a      	beq.n	8009186 <UART_SetConfig+0x172e>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009154:	2b08      	cmp	r3, #8
 8009156:	d014      	beq.n	8009182 <UART_SetConfig+0x172a>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915c:	2b09      	cmp	r3, #9
 800915e:	d00e      	beq.n	800917e <UART_SetConfig+0x1726>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009164:	2b0a      	cmp	r3, #10
 8009166:	d008      	beq.n	800917a <UART_SetConfig+0x1722>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916c:	2b0b      	cmp	r3, #11
 800916e:	d102      	bne.n	8009176 <UART_SetConfig+0x171e>
 8009170:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009174:	e016      	b.n	80091a4 <UART_SetConfig+0x174c>
 8009176:	2301      	movs	r3, #1
 8009178:	e014      	b.n	80091a4 <UART_SetConfig+0x174c>
 800917a:	2380      	movs	r3, #128	; 0x80
 800917c:	e012      	b.n	80091a4 <UART_SetConfig+0x174c>
 800917e:	2340      	movs	r3, #64	; 0x40
 8009180:	e010      	b.n	80091a4 <UART_SetConfig+0x174c>
 8009182:	2320      	movs	r3, #32
 8009184:	e00e      	b.n	80091a4 <UART_SetConfig+0x174c>
 8009186:	2310      	movs	r3, #16
 8009188:	e00c      	b.n	80091a4 <UART_SetConfig+0x174c>
 800918a:	230c      	movs	r3, #12
 800918c:	e00a      	b.n	80091a4 <UART_SetConfig+0x174c>
 800918e:	230a      	movs	r3, #10
 8009190:	e008      	b.n	80091a4 <UART_SetConfig+0x174c>
 8009192:	2308      	movs	r3, #8
 8009194:	e006      	b.n	80091a4 <UART_SetConfig+0x174c>
 8009196:	2306      	movs	r3, #6
 8009198:	e004      	b.n	80091a4 <UART_SetConfig+0x174c>
 800919a:	2304      	movs	r3, #4
 800919c:	e002      	b.n	80091a4 <UART_SetConfig+0x174c>
 800919e:	2302      	movs	r3, #2
 80091a0:	e000      	b.n	80091a4 <UART_SetConfig+0x174c>
 80091a2:	2301      	movs	r3, #1
 80091a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80091a8:	005a      	lsls	r2, r3, #1
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	085b      	lsrs	r3, r3, #1
 80091b0:	441a      	add	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80091be:	e1f6      	b.n	80095ae <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091c0:	f107 030c 	add.w	r3, r7, #12
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7fd ffe1 	bl	800718c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091ca:	693a      	ldr	r2, [r7, #16]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d044      	beq.n	800925e <UART_SetConfig+0x1806>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d03e      	beq.n	800925a <UART_SetConfig+0x1802>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	d038      	beq.n	8009256 <UART_SetConfig+0x17fe>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e8:	2b03      	cmp	r3, #3
 80091ea:	d032      	beq.n	8009252 <UART_SetConfig+0x17fa>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f0:	2b04      	cmp	r3, #4
 80091f2:	d02c      	beq.n	800924e <UART_SetConfig+0x17f6>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f8:	2b05      	cmp	r3, #5
 80091fa:	d026      	beq.n	800924a <UART_SetConfig+0x17f2>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009200:	2b06      	cmp	r3, #6
 8009202:	d020      	beq.n	8009246 <UART_SetConfig+0x17ee>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009208:	2b07      	cmp	r3, #7
 800920a:	d01a      	beq.n	8009242 <UART_SetConfig+0x17ea>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009210:	2b08      	cmp	r3, #8
 8009212:	d014      	beq.n	800923e <UART_SetConfig+0x17e6>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009218:	2b09      	cmp	r3, #9
 800921a:	d00e      	beq.n	800923a <UART_SetConfig+0x17e2>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009220:	2b0a      	cmp	r3, #10
 8009222:	d008      	beq.n	8009236 <UART_SetConfig+0x17de>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009228:	2b0b      	cmp	r3, #11
 800922a:	d102      	bne.n	8009232 <UART_SetConfig+0x17da>
 800922c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009230:	e016      	b.n	8009260 <UART_SetConfig+0x1808>
 8009232:	2301      	movs	r3, #1
 8009234:	e014      	b.n	8009260 <UART_SetConfig+0x1808>
 8009236:	2380      	movs	r3, #128	; 0x80
 8009238:	e012      	b.n	8009260 <UART_SetConfig+0x1808>
 800923a:	2340      	movs	r3, #64	; 0x40
 800923c:	e010      	b.n	8009260 <UART_SetConfig+0x1808>
 800923e:	2320      	movs	r3, #32
 8009240:	e00e      	b.n	8009260 <UART_SetConfig+0x1808>
 8009242:	2310      	movs	r3, #16
 8009244:	e00c      	b.n	8009260 <UART_SetConfig+0x1808>
 8009246:	230c      	movs	r3, #12
 8009248:	e00a      	b.n	8009260 <UART_SetConfig+0x1808>
 800924a:	230a      	movs	r3, #10
 800924c:	e008      	b.n	8009260 <UART_SetConfig+0x1808>
 800924e:	2308      	movs	r3, #8
 8009250:	e006      	b.n	8009260 <UART_SetConfig+0x1808>
 8009252:	2306      	movs	r3, #6
 8009254:	e004      	b.n	8009260 <UART_SetConfig+0x1808>
 8009256:	2304      	movs	r3, #4
 8009258:	e002      	b.n	8009260 <UART_SetConfig+0x1808>
 800925a:	2302      	movs	r3, #2
 800925c:	e000      	b.n	8009260 <UART_SetConfig+0x1808>
 800925e:	2301      	movs	r3, #1
 8009260:	fbb2 f3f3 	udiv	r3, r2, r3
 8009264:	005a      	lsls	r2, r3, #1
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	085b      	lsrs	r3, r3, #1
 800926c:	441a      	add	r2, r3
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	fbb2 f3f3 	udiv	r3, r2, r3
 8009276:	b29b      	uxth	r3, r3
 8009278:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800927a:	e198      	b.n	80095ae <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800927c:	4b87      	ldr	r3, [pc, #540]	; (800949c <UART_SetConfig+0x1a44>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f003 0320 	and.w	r3, r3, #32
 8009284:	2b00      	cmp	r3, #0
 8009286:	d05e      	beq.n	8009346 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009288:	4b84      	ldr	r3, [pc, #528]	; (800949c <UART_SetConfig+0x1a44>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	08db      	lsrs	r3, r3, #3
 800928e:	f003 0303 	and.w	r3, r3, #3
 8009292:	4a83      	ldr	r2, [pc, #524]	; (80094a0 <UART_SetConfig+0x1a48>)
 8009294:	40da      	lsrs	r2, r3
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929a:	2b00      	cmp	r3, #0
 800929c:	d044      	beq.n	8009328 <UART_SetConfig+0x18d0>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d03e      	beq.n	8009324 <UART_SetConfig+0x18cc>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d038      	beq.n	8009320 <UART_SetConfig+0x18c8>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b2:	2b03      	cmp	r3, #3
 80092b4:	d032      	beq.n	800931c <UART_SetConfig+0x18c4>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ba:	2b04      	cmp	r3, #4
 80092bc:	d02c      	beq.n	8009318 <UART_SetConfig+0x18c0>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c2:	2b05      	cmp	r3, #5
 80092c4:	d026      	beq.n	8009314 <UART_SetConfig+0x18bc>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ca:	2b06      	cmp	r3, #6
 80092cc:	d020      	beq.n	8009310 <UART_SetConfig+0x18b8>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d2:	2b07      	cmp	r3, #7
 80092d4:	d01a      	beq.n	800930c <UART_SetConfig+0x18b4>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092da:	2b08      	cmp	r3, #8
 80092dc:	d014      	beq.n	8009308 <UART_SetConfig+0x18b0>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e2:	2b09      	cmp	r3, #9
 80092e4:	d00e      	beq.n	8009304 <UART_SetConfig+0x18ac>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ea:	2b0a      	cmp	r3, #10
 80092ec:	d008      	beq.n	8009300 <UART_SetConfig+0x18a8>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f2:	2b0b      	cmp	r3, #11
 80092f4:	d102      	bne.n	80092fc <UART_SetConfig+0x18a4>
 80092f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092fa:	e016      	b.n	800932a <UART_SetConfig+0x18d2>
 80092fc:	2301      	movs	r3, #1
 80092fe:	e014      	b.n	800932a <UART_SetConfig+0x18d2>
 8009300:	2380      	movs	r3, #128	; 0x80
 8009302:	e012      	b.n	800932a <UART_SetConfig+0x18d2>
 8009304:	2340      	movs	r3, #64	; 0x40
 8009306:	e010      	b.n	800932a <UART_SetConfig+0x18d2>
 8009308:	2320      	movs	r3, #32
 800930a:	e00e      	b.n	800932a <UART_SetConfig+0x18d2>
 800930c:	2310      	movs	r3, #16
 800930e:	e00c      	b.n	800932a <UART_SetConfig+0x18d2>
 8009310:	230c      	movs	r3, #12
 8009312:	e00a      	b.n	800932a <UART_SetConfig+0x18d2>
 8009314:	230a      	movs	r3, #10
 8009316:	e008      	b.n	800932a <UART_SetConfig+0x18d2>
 8009318:	2308      	movs	r3, #8
 800931a:	e006      	b.n	800932a <UART_SetConfig+0x18d2>
 800931c:	2306      	movs	r3, #6
 800931e:	e004      	b.n	800932a <UART_SetConfig+0x18d2>
 8009320:	2304      	movs	r3, #4
 8009322:	e002      	b.n	800932a <UART_SetConfig+0x18d2>
 8009324:	2302      	movs	r3, #2
 8009326:	e000      	b.n	800932a <UART_SetConfig+0x18d2>
 8009328:	2301      	movs	r3, #1
 800932a:	fbb2 f3f3 	udiv	r3, r2, r3
 800932e:	005a      	lsls	r2, r3, #1
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	085b      	lsrs	r3, r3, #1
 8009336:	441a      	add	r2, r3
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009340:	b29b      	uxth	r3, r3
 8009342:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8009344:	e133      	b.n	80095ae <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934a:	2b00      	cmp	r3, #0
 800934c:	d043      	beq.n	80093d6 <UART_SetConfig+0x197e>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009352:	2b01      	cmp	r3, #1
 8009354:	d03d      	beq.n	80093d2 <UART_SetConfig+0x197a>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935a:	2b02      	cmp	r3, #2
 800935c:	d037      	beq.n	80093ce <UART_SetConfig+0x1976>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009362:	2b03      	cmp	r3, #3
 8009364:	d031      	beq.n	80093ca <UART_SetConfig+0x1972>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936a:	2b04      	cmp	r3, #4
 800936c:	d02b      	beq.n	80093c6 <UART_SetConfig+0x196e>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009372:	2b05      	cmp	r3, #5
 8009374:	d025      	beq.n	80093c2 <UART_SetConfig+0x196a>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937a:	2b06      	cmp	r3, #6
 800937c:	d01f      	beq.n	80093be <UART_SetConfig+0x1966>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009382:	2b07      	cmp	r3, #7
 8009384:	d019      	beq.n	80093ba <UART_SetConfig+0x1962>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938a:	2b08      	cmp	r3, #8
 800938c:	d013      	beq.n	80093b6 <UART_SetConfig+0x195e>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009392:	2b09      	cmp	r3, #9
 8009394:	d00d      	beq.n	80093b2 <UART_SetConfig+0x195a>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939a:	2b0a      	cmp	r3, #10
 800939c:	d007      	beq.n	80093ae <UART_SetConfig+0x1956>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a2:	2b0b      	cmp	r3, #11
 80093a4:	d101      	bne.n	80093aa <UART_SetConfig+0x1952>
 80093a6:	4b3f      	ldr	r3, [pc, #252]	; (80094a4 <UART_SetConfig+0x1a4c>)
 80093a8:	e016      	b.n	80093d8 <UART_SetConfig+0x1980>
 80093aa:	4b3f      	ldr	r3, [pc, #252]	; (80094a8 <UART_SetConfig+0x1a50>)
 80093ac:	e014      	b.n	80093d8 <UART_SetConfig+0x1980>
 80093ae:	4b3f      	ldr	r3, [pc, #252]	; (80094ac <UART_SetConfig+0x1a54>)
 80093b0:	e012      	b.n	80093d8 <UART_SetConfig+0x1980>
 80093b2:	4b3f      	ldr	r3, [pc, #252]	; (80094b0 <UART_SetConfig+0x1a58>)
 80093b4:	e010      	b.n	80093d8 <UART_SetConfig+0x1980>
 80093b6:	4b3f      	ldr	r3, [pc, #252]	; (80094b4 <UART_SetConfig+0x1a5c>)
 80093b8:	e00e      	b.n	80093d8 <UART_SetConfig+0x1980>
 80093ba:	4b3f      	ldr	r3, [pc, #252]	; (80094b8 <UART_SetConfig+0x1a60>)
 80093bc:	e00c      	b.n	80093d8 <UART_SetConfig+0x1980>
 80093be:	4b3f      	ldr	r3, [pc, #252]	; (80094bc <UART_SetConfig+0x1a64>)
 80093c0:	e00a      	b.n	80093d8 <UART_SetConfig+0x1980>
 80093c2:	4b3f      	ldr	r3, [pc, #252]	; (80094c0 <UART_SetConfig+0x1a68>)
 80093c4:	e008      	b.n	80093d8 <UART_SetConfig+0x1980>
 80093c6:	4b3f      	ldr	r3, [pc, #252]	; (80094c4 <UART_SetConfig+0x1a6c>)
 80093c8:	e006      	b.n	80093d8 <UART_SetConfig+0x1980>
 80093ca:	4b3f      	ldr	r3, [pc, #252]	; (80094c8 <UART_SetConfig+0x1a70>)
 80093cc:	e004      	b.n	80093d8 <UART_SetConfig+0x1980>
 80093ce:	4b3f      	ldr	r3, [pc, #252]	; (80094cc <UART_SetConfig+0x1a74>)
 80093d0:	e002      	b.n	80093d8 <UART_SetConfig+0x1980>
 80093d2:	4b33      	ldr	r3, [pc, #204]	; (80094a0 <UART_SetConfig+0x1a48>)
 80093d4:	e000      	b.n	80093d8 <UART_SetConfig+0x1980>
 80093d6:	4b34      	ldr	r3, [pc, #208]	; (80094a8 <UART_SetConfig+0x1a50>)
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	6852      	ldr	r2, [r2, #4]
 80093dc:	0852      	lsrs	r2, r2, #1
 80093de:	441a      	add	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80093ec:	e0df      	b.n	80095ae <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d045      	beq.n	8009482 <UART_SetConfig+0x1a2a>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d03f      	beq.n	800947e <UART_SetConfig+0x1a26>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009402:	2b02      	cmp	r3, #2
 8009404:	d039      	beq.n	800947a <UART_SetConfig+0x1a22>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940a:	2b03      	cmp	r3, #3
 800940c:	d033      	beq.n	8009476 <UART_SetConfig+0x1a1e>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009412:	2b04      	cmp	r3, #4
 8009414:	d02d      	beq.n	8009472 <UART_SetConfig+0x1a1a>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941a:	2b05      	cmp	r3, #5
 800941c:	d027      	beq.n	800946e <UART_SetConfig+0x1a16>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009422:	2b06      	cmp	r3, #6
 8009424:	d021      	beq.n	800946a <UART_SetConfig+0x1a12>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942a:	2b07      	cmp	r3, #7
 800942c:	d01b      	beq.n	8009466 <UART_SetConfig+0x1a0e>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009432:	2b08      	cmp	r3, #8
 8009434:	d015      	beq.n	8009462 <UART_SetConfig+0x1a0a>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943a:	2b09      	cmp	r3, #9
 800943c:	d00f      	beq.n	800945e <UART_SetConfig+0x1a06>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009442:	2b0a      	cmp	r3, #10
 8009444:	d008      	beq.n	8009458 <UART_SetConfig+0x1a00>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944a:	2b0b      	cmp	r3, #11
 800944c:	d102      	bne.n	8009454 <UART_SetConfig+0x19fc>
 800944e:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009452:	e017      	b.n	8009484 <UART_SetConfig+0x1a2c>
 8009454:	4b18      	ldr	r3, [pc, #96]	; (80094b8 <UART_SetConfig+0x1a60>)
 8009456:	e015      	b.n	8009484 <UART_SetConfig+0x1a2c>
 8009458:	f24f 4324 	movw	r3, #62500	; 0xf424
 800945c:	e012      	b.n	8009484 <UART_SetConfig+0x1a2c>
 800945e:	4b1c      	ldr	r3, [pc, #112]	; (80094d0 <UART_SetConfig+0x1a78>)
 8009460:	e010      	b.n	8009484 <UART_SetConfig+0x1a2c>
 8009462:	4b1c      	ldr	r3, [pc, #112]	; (80094d4 <UART_SetConfig+0x1a7c>)
 8009464:	e00e      	b.n	8009484 <UART_SetConfig+0x1a2c>
 8009466:	4b0f      	ldr	r3, [pc, #60]	; (80094a4 <UART_SetConfig+0x1a4c>)
 8009468:	e00c      	b.n	8009484 <UART_SetConfig+0x1a2c>
 800946a:	4b1b      	ldr	r3, [pc, #108]	; (80094d8 <UART_SetConfig+0x1a80>)
 800946c:	e00a      	b.n	8009484 <UART_SetConfig+0x1a2c>
 800946e:	4b1b      	ldr	r3, [pc, #108]	; (80094dc <UART_SetConfig+0x1a84>)
 8009470:	e008      	b.n	8009484 <UART_SetConfig+0x1a2c>
 8009472:	4b0e      	ldr	r3, [pc, #56]	; (80094ac <UART_SetConfig+0x1a54>)
 8009474:	e006      	b.n	8009484 <UART_SetConfig+0x1a2c>
 8009476:	4b1a      	ldr	r3, [pc, #104]	; (80094e0 <UART_SetConfig+0x1a88>)
 8009478:	e004      	b.n	8009484 <UART_SetConfig+0x1a2c>
 800947a:	4b0d      	ldr	r3, [pc, #52]	; (80094b0 <UART_SetConfig+0x1a58>)
 800947c:	e002      	b.n	8009484 <UART_SetConfig+0x1a2c>
 800947e:	4b0d      	ldr	r3, [pc, #52]	; (80094b4 <UART_SetConfig+0x1a5c>)
 8009480:	e000      	b.n	8009484 <UART_SetConfig+0x1a2c>
 8009482:	4b0d      	ldr	r3, [pc, #52]	; (80094b8 <UART_SetConfig+0x1a60>)
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	6852      	ldr	r2, [r2, #4]
 8009488:	0852      	lsrs	r2, r2, #1
 800948a:	441a      	add	r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	fbb2 f3f3 	udiv	r3, r2, r3
 8009494:	b29b      	uxth	r3, r3
 8009496:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009498:	e089      	b.n	80095ae <UART_SetConfig+0x1b56>
 800949a:	bf00      	nop
 800949c:	58024400 	.word	0x58024400
 80094a0:	03d09000 	.word	0x03d09000
 80094a4:	0007a120 	.word	0x0007a120
 80094a8:	07a12000 	.word	0x07a12000
 80094ac:	000f4240 	.word	0x000f4240
 80094b0:	001e8480 	.word	0x001e8480
 80094b4:	003d0900 	.word	0x003d0900
 80094b8:	007a1200 	.word	0x007a1200
 80094bc:	00a2c2aa 	.word	0x00a2c2aa
 80094c0:	00c35000 	.word	0x00c35000
 80094c4:	00f42400 	.word	0x00f42400
 80094c8:	01458554 	.word	0x01458554
 80094cc:	01e84800 	.word	0x01e84800
 80094d0:	0001e848 	.word	0x0001e848
 80094d4:	0003d090 	.word	0x0003d090
 80094d8:	000a2c2a 	.word	0x000a2c2a
 80094dc:	000c3500 	.word	0x000c3500
 80094e0:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d04f      	beq.n	800958c <UART_SetConfig+0x1b34>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d048      	beq.n	8009586 <UART_SetConfig+0x1b2e>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f8:	2b02      	cmp	r3, #2
 80094fa:	d041      	beq.n	8009580 <UART_SetConfig+0x1b28>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009500:	2b03      	cmp	r3, #3
 8009502:	d03a      	beq.n	800957a <UART_SetConfig+0x1b22>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009508:	2b04      	cmp	r3, #4
 800950a:	d033      	beq.n	8009574 <UART_SetConfig+0x1b1c>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009510:	2b05      	cmp	r3, #5
 8009512:	d02c      	beq.n	800956e <UART_SetConfig+0x1b16>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009518:	2b06      	cmp	r3, #6
 800951a:	d025      	beq.n	8009568 <UART_SetConfig+0x1b10>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009520:	2b07      	cmp	r3, #7
 8009522:	d01e      	beq.n	8009562 <UART_SetConfig+0x1b0a>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009528:	2b08      	cmp	r3, #8
 800952a:	d017      	beq.n	800955c <UART_SetConfig+0x1b04>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009530:	2b09      	cmp	r3, #9
 8009532:	d010      	beq.n	8009556 <UART_SetConfig+0x1afe>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009538:	2b0a      	cmp	r3, #10
 800953a:	d009      	beq.n	8009550 <UART_SetConfig+0x1af8>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009540:	2b0b      	cmp	r3, #11
 8009542:	d102      	bne.n	800954a <UART_SetConfig+0x1af2>
 8009544:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009548:	e022      	b.n	8009590 <UART_SetConfig+0x1b38>
 800954a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800954e:	e01f      	b.n	8009590 <UART_SetConfig+0x1b38>
 8009550:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009554:	e01c      	b.n	8009590 <UART_SetConfig+0x1b38>
 8009556:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800955a:	e019      	b.n	8009590 <UART_SetConfig+0x1b38>
 800955c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009560:	e016      	b.n	8009590 <UART_SetConfig+0x1b38>
 8009562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009566:	e013      	b.n	8009590 <UART_SetConfig+0x1b38>
 8009568:	f241 5354 	movw	r3, #5460	; 0x1554
 800956c:	e010      	b.n	8009590 <UART_SetConfig+0x1b38>
 800956e:	f641 1398 	movw	r3, #6552	; 0x1998
 8009572:	e00d      	b.n	8009590 <UART_SetConfig+0x1b38>
 8009574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009578:	e00a      	b.n	8009590 <UART_SetConfig+0x1b38>
 800957a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800957e:	e007      	b.n	8009590 <UART_SetConfig+0x1b38>
 8009580:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009584:	e004      	b.n	8009590 <UART_SetConfig+0x1b38>
 8009586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800958a:	e001      	b.n	8009590 <UART_SetConfig+0x1b38>
 800958c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	6852      	ldr	r2, [r2, #4]
 8009594:	0852      	lsrs	r2, r2, #1
 8009596:	441a      	add	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	fbb2 f3f3 	udiv	r3, r2, r3
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80095a4:	e003      	b.n	80095ae <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80095ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095b0:	2b0f      	cmp	r3, #15
 80095b2:	d916      	bls.n	80095e2 <UART_SetConfig+0x1b8a>
 80095b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095ba:	d212      	bcs.n	80095e2 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80095bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095be:	b29b      	uxth	r3, r3
 80095c0:	f023 030f 	bic.w	r3, r3, #15
 80095c4:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80095c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c8:	085b      	lsrs	r3, r3, #1
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	f003 0307 	and.w	r3, r3, #7
 80095d0:	b29a      	uxth	r2, r3
 80095d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80095d4:	4313      	orrs	r3, r2
 80095d6:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80095de:	60da      	str	r2, [r3, #12]
 80095e0:	e3a3      	b.n	8009d2a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095e8:	e39f      	b.n	8009d2a <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 80095ea:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80095ee:	2b40      	cmp	r3, #64	; 0x40
 80095f0:	f200 8388 	bhi.w	8009d04 <UART_SetConfig+0x22ac>
 80095f4:	a201      	add	r2, pc, #4	; (adr r2, 80095fc <UART_SetConfig+0x1ba4>)
 80095f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095fa:	bf00      	nop
 80095fc:	08009701 	.word	0x08009701
 8009600:	080097b7 	.word	0x080097b7
 8009604:	08009d05 	.word	0x08009d05
 8009608:	08009d05 	.word	0x08009d05
 800960c:	0800986d 	.word	0x0800986d
 8009610:	08009d05 	.word	0x08009d05
 8009614:	08009d05 	.word	0x08009d05
 8009618:	08009d05 	.word	0x08009d05
 800961c:	08009927 	.word	0x08009927
 8009620:	08009d05 	.word	0x08009d05
 8009624:	08009d05 	.word	0x08009d05
 8009628:	08009d05 	.word	0x08009d05
 800962c:	08009d05 	.word	0x08009d05
 8009630:	08009d05 	.word	0x08009d05
 8009634:	08009d05 	.word	0x08009d05
 8009638:	08009d05 	.word	0x08009d05
 800963c:	080099e1 	.word	0x080099e1
 8009640:	08009d05 	.word	0x08009d05
 8009644:	08009d05 	.word	0x08009d05
 8009648:	08009d05 	.word	0x08009d05
 800964c:	08009d05 	.word	0x08009d05
 8009650:	08009d05 	.word	0x08009d05
 8009654:	08009d05 	.word	0x08009d05
 8009658:	08009d05 	.word	0x08009d05
 800965c:	08009d05 	.word	0x08009d05
 8009660:	08009d05 	.word	0x08009d05
 8009664:	08009d05 	.word	0x08009d05
 8009668:	08009d05 	.word	0x08009d05
 800966c:	08009d05 	.word	0x08009d05
 8009670:	08009d05 	.word	0x08009d05
 8009674:	08009d05 	.word	0x08009d05
 8009678:	08009d05 	.word	0x08009d05
 800967c:	08009b51 	.word	0x08009b51
 8009680:	08009d05 	.word	0x08009d05
 8009684:	08009d05 	.word	0x08009d05
 8009688:	08009d05 	.word	0x08009d05
 800968c:	08009d05 	.word	0x08009d05
 8009690:	08009d05 	.word	0x08009d05
 8009694:	08009d05 	.word	0x08009d05
 8009698:	08009d05 	.word	0x08009d05
 800969c:	08009d05 	.word	0x08009d05
 80096a0:	08009d05 	.word	0x08009d05
 80096a4:	08009d05 	.word	0x08009d05
 80096a8:	08009d05 	.word	0x08009d05
 80096ac:	08009d05 	.word	0x08009d05
 80096b0:	08009d05 	.word	0x08009d05
 80096b4:	08009d05 	.word	0x08009d05
 80096b8:	08009d05 	.word	0x08009d05
 80096bc:	08009d05 	.word	0x08009d05
 80096c0:	08009d05 	.word	0x08009d05
 80096c4:	08009d05 	.word	0x08009d05
 80096c8:	08009d05 	.word	0x08009d05
 80096cc:	08009d05 	.word	0x08009d05
 80096d0:	08009d05 	.word	0x08009d05
 80096d4:	08009d05 	.word	0x08009d05
 80096d8:	08009d05 	.word	0x08009d05
 80096dc:	08009d05 	.word	0x08009d05
 80096e0:	08009d05 	.word	0x08009d05
 80096e4:	08009d05 	.word	0x08009d05
 80096e8:	08009d05 	.word	0x08009d05
 80096ec:	08009d05 	.word	0x08009d05
 80096f0:	08009d05 	.word	0x08009d05
 80096f4:	08009d05 	.word	0x08009d05
 80096f8:	08009d05 	.word	0x08009d05
 80096fc:	08009c45 	.word	0x08009c45
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009700:	f7fc fcd8 	bl	80060b4 <HAL_RCC_GetPCLK1Freq>
 8009704:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970a:	2b00      	cmp	r3, #0
 800970c:	d044      	beq.n	8009798 <UART_SetConfig+0x1d40>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009712:	2b01      	cmp	r3, #1
 8009714:	d03e      	beq.n	8009794 <UART_SetConfig+0x1d3c>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971a:	2b02      	cmp	r3, #2
 800971c:	d038      	beq.n	8009790 <UART_SetConfig+0x1d38>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009722:	2b03      	cmp	r3, #3
 8009724:	d032      	beq.n	800978c <UART_SetConfig+0x1d34>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972a:	2b04      	cmp	r3, #4
 800972c:	d02c      	beq.n	8009788 <UART_SetConfig+0x1d30>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009732:	2b05      	cmp	r3, #5
 8009734:	d026      	beq.n	8009784 <UART_SetConfig+0x1d2c>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973a:	2b06      	cmp	r3, #6
 800973c:	d020      	beq.n	8009780 <UART_SetConfig+0x1d28>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009742:	2b07      	cmp	r3, #7
 8009744:	d01a      	beq.n	800977c <UART_SetConfig+0x1d24>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974a:	2b08      	cmp	r3, #8
 800974c:	d014      	beq.n	8009778 <UART_SetConfig+0x1d20>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009752:	2b09      	cmp	r3, #9
 8009754:	d00e      	beq.n	8009774 <UART_SetConfig+0x1d1c>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975a:	2b0a      	cmp	r3, #10
 800975c:	d008      	beq.n	8009770 <UART_SetConfig+0x1d18>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009762:	2b0b      	cmp	r3, #11
 8009764:	d102      	bne.n	800976c <UART_SetConfig+0x1d14>
 8009766:	f44f 7380 	mov.w	r3, #256	; 0x100
 800976a:	e016      	b.n	800979a <UART_SetConfig+0x1d42>
 800976c:	2301      	movs	r3, #1
 800976e:	e014      	b.n	800979a <UART_SetConfig+0x1d42>
 8009770:	2380      	movs	r3, #128	; 0x80
 8009772:	e012      	b.n	800979a <UART_SetConfig+0x1d42>
 8009774:	2340      	movs	r3, #64	; 0x40
 8009776:	e010      	b.n	800979a <UART_SetConfig+0x1d42>
 8009778:	2320      	movs	r3, #32
 800977a:	e00e      	b.n	800979a <UART_SetConfig+0x1d42>
 800977c:	2310      	movs	r3, #16
 800977e:	e00c      	b.n	800979a <UART_SetConfig+0x1d42>
 8009780:	230c      	movs	r3, #12
 8009782:	e00a      	b.n	800979a <UART_SetConfig+0x1d42>
 8009784:	230a      	movs	r3, #10
 8009786:	e008      	b.n	800979a <UART_SetConfig+0x1d42>
 8009788:	2308      	movs	r3, #8
 800978a:	e006      	b.n	800979a <UART_SetConfig+0x1d42>
 800978c:	2306      	movs	r3, #6
 800978e:	e004      	b.n	800979a <UART_SetConfig+0x1d42>
 8009790:	2304      	movs	r3, #4
 8009792:	e002      	b.n	800979a <UART_SetConfig+0x1d42>
 8009794:	2302      	movs	r3, #2
 8009796:	e000      	b.n	800979a <UART_SetConfig+0x1d42>
 8009798:	2301      	movs	r3, #1
 800979a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800979c:	fbb2 f2f3 	udiv	r2, r2, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	085b      	lsrs	r3, r3, #1
 80097a6:	441a      	add	r2, r3
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80097b4:	e2aa      	b.n	8009d0c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097b6:	f7fc fc93 	bl	80060e0 <HAL_RCC_GetPCLK2Freq>
 80097ba:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d044      	beq.n	800984e <UART_SetConfig+0x1df6>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d03e      	beq.n	800984a <UART_SetConfig+0x1df2>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	d038      	beq.n	8009846 <UART_SetConfig+0x1dee>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d8:	2b03      	cmp	r3, #3
 80097da:	d032      	beq.n	8009842 <UART_SetConfig+0x1dea>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e0:	2b04      	cmp	r3, #4
 80097e2:	d02c      	beq.n	800983e <UART_SetConfig+0x1de6>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e8:	2b05      	cmp	r3, #5
 80097ea:	d026      	beq.n	800983a <UART_SetConfig+0x1de2>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f0:	2b06      	cmp	r3, #6
 80097f2:	d020      	beq.n	8009836 <UART_SetConfig+0x1dde>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f8:	2b07      	cmp	r3, #7
 80097fa:	d01a      	beq.n	8009832 <UART_SetConfig+0x1dda>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009800:	2b08      	cmp	r3, #8
 8009802:	d014      	beq.n	800982e <UART_SetConfig+0x1dd6>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009808:	2b09      	cmp	r3, #9
 800980a:	d00e      	beq.n	800982a <UART_SetConfig+0x1dd2>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009810:	2b0a      	cmp	r3, #10
 8009812:	d008      	beq.n	8009826 <UART_SetConfig+0x1dce>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009818:	2b0b      	cmp	r3, #11
 800981a:	d102      	bne.n	8009822 <UART_SetConfig+0x1dca>
 800981c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009820:	e016      	b.n	8009850 <UART_SetConfig+0x1df8>
 8009822:	2301      	movs	r3, #1
 8009824:	e014      	b.n	8009850 <UART_SetConfig+0x1df8>
 8009826:	2380      	movs	r3, #128	; 0x80
 8009828:	e012      	b.n	8009850 <UART_SetConfig+0x1df8>
 800982a:	2340      	movs	r3, #64	; 0x40
 800982c:	e010      	b.n	8009850 <UART_SetConfig+0x1df8>
 800982e:	2320      	movs	r3, #32
 8009830:	e00e      	b.n	8009850 <UART_SetConfig+0x1df8>
 8009832:	2310      	movs	r3, #16
 8009834:	e00c      	b.n	8009850 <UART_SetConfig+0x1df8>
 8009836:	230c      	movs	r3, #12
 8009838:	e00a      	b.n	8009850 <UART_SetConfig+0x1df8>
 800983a:	230a      	movs	r3, #10
 800983c:	e008      	b.n	8009850 <UART_SetConfig+0x1df8>
 800983e:	2308      	movs	r3, #8
 8009840:	e006      	b.n	8009850 <UART_SetConfig+0x1df8>
 8009842:	2306      	movs	r3, #6
 8009844:	e004      	b.n	8009850 <UART_SetConfig+0x1df8>
 8009846:	2304      	movs	r3, #4
 8009848:	e002      	b.n	8009850 <UART_SetConfig+0x1df8>
 800984a:	2302      	movs	r3, #2
 800984c:	e000      	b.n	8009850 <UART_SetConfig+0x1df8>
 800984e:	2301      	movs	r3, #1
 8009850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009852:	fbb2 f2f3 	udiv	r2, r2, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	085b      	lsrs	r3, r3, #1
 800985c:	441a      	add	r2, r3
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	fbb2 f3f3 	udiv	r3, r2, r3
 8009866:	b29b      	uxth	r3, r3
 8009868:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800986a:	e24f      	b.n	8009d0c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800986c:	f107 0318 	add.w	r3, r7, #24
 8009870:	4618      	mov	r0, r3
 8009872:	f7fd fb3f 	bl	8006ef4 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009876:	69fa      	ldr	r2, [r7, #28]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987c:	2b00      	cmp	r3, #0
 800987e:	d044      	beq.n	800990a <UART_SetConfig+0x1eb2>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009884:	2b01      	cmp	r3, #1
 8009886:	d03e      	beq.n	8009906 <UART_SetConfig+0x1eae>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988c:	2b02      	cmp	r3, #2
 800988e:	d038      	beq.n	8009902 <UART_SetConfig+0x1eaa>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009894:	2b03      	cmp	r3, #3
 8009896:	d032      	beq.n	80098fe <UART_SetConfig+0x1ea6>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989c:	2b04      	cmp	r3, #4
 800989e:	d02c      	beq.n	80098fa <UART_SetConfig+0x1ea2>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a4:	2b05      	cmp	r3, #5
 80098a6:	d026      	beq.n	80098f6 <UART_SetConfig+0x1e9e>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ac:	2b06      	cmp	r3, #6
 80098ae:	d020      	beq.n	80098f2 <UART_SetConfig+0x1e9a>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b4:	2b07      	cmp	r3, #7
 80098b6:	d01a      	beq.n	80098ee <UART_SetConfig+0x1e96>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098bc:	2b08      	cmp	r3, #8
 80098be:	d014      	beq.n	80098ea <UART_SetConfig+0x1e92>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c4:	2b09      	cmp	r3, #9
 80098c6:	d00e      	beq.n	80098e6 <UART_SetConfig+0x1e8e>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098cc:	2b0a      	cmp	r3, #10
 80098ce:	d008      	beq.n	80098e2 <UART_SetConfig+0x1e8a>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d4:	2b0b      	cmp	r3, #11
 80098d6:	d102      	bne.n	80098de <UART_SetConfig+0x1e86>
 80098d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098dc:	e016      	b.n	800990c <UART_SetConfig+0x1eb4>
 80098de:	2301      	movs	r3, #1
 80098e0:	e014      	b.n	800990c <UART_SetConfig+0x1eb4>
 80098e2:	2380      	movs	r3, #128	; 0x80
 80098e4:	e012      	b.n	800990c <UART_SetConfig+0x1eb4>
 80098e6:	2340      	movs	r3, #64	; 0x40
 80098e8:	e010      	b.n	800990c <UART_SetConfig+0x1eb4>
 80098ea:	2320      	movs	r3, #32
 80098ec:	e00e      	b.n	800990c <UART_SetConfig+0x1eb4>
 80098ee:	2310      	movs	r3, #16
 80098f0:	e00c      	b.n	800990c <UART_SetConfig+0x1eb4>
 80098f2:	230c      	movs	r3, #12
 80098f4:	e00a      	b.n	800990c <UART_SetConfig+0x1eb4>
 80098f6:	230a      	movs	r3, #10
 80098f8:	e008      	b.n	800990c <UART_SetConfig+0x1eb4>
 80098fa:	2308      	movs	r3, #8
 80098fc:	e006      	b.n	800990c <UART_SetConfig+0x1eb4>
 80098fe:	2306      	movs	r3, #6
 8009900:	e004      	b.n	800990c <UART_SetConfig+0x1eb4>
 8009902:	2304      	movs	r3, #4
 8009904:	e002      	b.n	800990c <UART_SetConfig+0x1eb4>
 8009906:	2302      	movs	r3, #2
 8009908:	e000      	b.n	800990c <UART_SetConfig+0x1eb4>
 800990a:	2301      	movs	r3, #1
 800990c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	085b      	lsrs	r3, r3, #1
 8009916:	441a      	add	r2, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009920:	b29b      	uxth	r3, r3
 8009922:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009924:	e1f2      	b.n	8009d0c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009926:	f107 030c 	add.w	r3, r7, #12
 800992a:	4618      	mov	r0, r3
 800992c:	f7fd fc2e 	bl	800718c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009930:	693a      	ldr	r2, [r7, #16]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009936:	2b00      	cmp	r3, #0
 8009938:	d044      	beq.n	80099c4 <UART_SetConfig+0x1f6c>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993e:	2b01      	cmp	r3, #1
 8009940:	d03e      	beq.n	80099c0 <UART_SetConfig+0x1f68>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009946:	2b02      	cmp	r3, #2
 8009948:	d038      	beq.n	80099bc <UART_SetConfig+0x1f64>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994e:	2b03      	cmp	r3, #3
 8009950:	d032      	beq.n	80099b8 <UART_SetConfig+0x1f60>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009956:	2b04      	cmp	r3, #4
 8009958:	d02c      	beq.n	80099b4 <UART_SetConfig+0x1f5c>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995e:	2b05      	cmp	r3, #5
 8009960:	d026      	beq.n	80099b0 <UART_SetConfig+0x1f58>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009966:	2b06      	cmp	r3, #6
 8009968:	d020      	beq.n	80099ac <UART_SetConfig+0x1f54>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996e:	2b07      	cmp	r3, #7
 8009970:	d01a      	beq.n	80099a8 <UART_SetConfig+0x1f50>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009976:	2b08      	cmp	r3, #8
 8009978:	d014      	beq.n	80099a4 <UART_SetConfig+0x1f4c>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997e:	2b09      	cmp	r3, #9
 8009980:	d00e      	beq.n	80099a0 <UART_SetConfig+0x1f48>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009986:	2b0a      	cmp	r3, #10
 8009988:	d008      	beq.n	800999c <UART_SetConfig+0x1f44>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998e:	2b0b      	cmp	r3, #11
 8009990:	d102      	bne.n	8009998 <UART_SetConfig+0x1f40>
 8009992:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009996:	e016      	b.n	80099c6 <UART_SetConfig+0x1f6e>
 8009998:	2301      	movs	r3, #1
 800999a:	e014      	b.n	80099c6 <UART_SetConfig+0x1f6e>
 800999c:	2380      	movs	r3, #128	; 0x80
 800999e:	e012      	b.n	80099c6 <UART_SetConfig+0x1f6e>
 80099a0:	2340      	movs	r3, #64	; 0x40
 80099a2:	e010      	b.n	80099c6 <UART_SetConfig+0x1f6e>
 80099a4:	2320      	movs	r3, #32
 80099a6:	e00e      	b.n	80099c6 <UART_SetConfig+0x1f6e>
 80099a8:	2310      	movs	r3, #16
 80099aa:	e00c      	b.n	80099c6 <UART_SetConfig+0x1f6e>
 80099ac:	230c      	movs	r3, #12
 80099ae:	e00a      	b.n	80099c6 <UART_SetConfig+0x1f6e>
 80099b0:	230a      	movs	r3, #10
 80099b2:	e008      	b.n	80099c6 <UART_SetConfig+0x1f6e>
 80099b4:	2308      	movs	r3, #8
 80099b6:	e006      	b.n	80099c6 <UART_SetConfig+0x1f6e>
 80099b8:	2306      	movs	r3, #6
 80099ba:	e004      	b.n	80099c6 <UART_SetConfig+0x1f6e>
 80099bc:	2304      	movs	r3, #4
 80099be:	e002      	b.n	80099c6 <UART_SetConfig+0x1f6e>
 80099c0:	2302      	movs	r3, #2
 80099c2:	e000      	b.n	80099c6 <UART_SetConfig+0x1f6e>
 80099c4:	2301      	movs	r3, #1
 80099c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	085b      	lsrs	r3, r3, #1
 80099d0:	441a      	add	r2, r3
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80099da:	b29b      	uxth	r3, r3
 80099dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80099de:	e195      	b.n	8009d0c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099e0:	4b87      	ldr	r3, [pc, #540]	; (8009c00 <UART_SetConfig+0x21a8>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f003 0320 	and.w	r3, r3, #32
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d05d      	beq.n	8009aa8 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099ec:	4b84      	ldr	r3, [pc, #528]	; (8009c00 <UART_SetConfig+0x21a8>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	08db      	lsrs	r3, r3, #3
 80099f2:	f003 0303 	and.w	r3, r3, #3
 80099f6:	4a83      	ldr	r2, [pc, #524]	; (8009c04 <UART_SetConfig+0x21ac>)
 80099f8:	40da      	lsrs	r2, r3
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d044      	beq.n	8009a8c <UART_SetConfig+0x2034>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d03e      	beq.n	8009a88 <UART_SetConfig+0x2030>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d038      	beq.n	8009a84 <UART_SetConfig+0x202c>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a16:	2b03      	cmp	r3, #3
 8009a18:	d032      	beq.n	8009a80 <UART_SetConfig+0x2028>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1e:	2b04      	cmp	r3, #4
 8009a20:	d02c      	beq.n	8009a7c <UART_SetConfig+0x2024>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a26:	2b05      	cmp	r3, #5
 8009a28:	d026      	beq.n	8009a78 <UART_SetConfig+0x2020>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2e:	2b06      	cmp	r3, #6
 8009a30:	d020      	beq.n	8009a74 <UART_SetConfig+0x201c>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a36:	2b07      	cmp	r3, #7
 8009a38:	d01a      	beq.n	8009a70 <UART_SetConfig+0x2018>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3e:	2b08      	cmp	r3, #8
 8009a40:	d014      	beq.n	8009a6c <UART_SetConfig+0x2014>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a46:	2b09      	cmp	r3, #9
 8009a48:	d00e      	beq.n	8009a68 <UART_SetConfig+0x2010>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4e:	2b0a      	cmp	r3, #10
 8009a50:	d008      	beq.n	8009a64 <UART_SetConfig+0x200c>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a56:	2b0b      	cmp	r3, #11
 8009a58:	d102      	bne.n	8009a60 <UART_SetConfig+0x2008>
 8009a5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a5e:	e016      	b.n	8009a8e <UART_SetConfig+0x2036>
 8009a60:	2301      	movs	r3, #1
 8009a62:	e014      	b.n	8009a8e <UART_SetConfig+0x2036>
 8009a64:	2380      	movs	r3, #128	; 0x80
 8009a66:	e012      	b.n	8009a8e <UART_SetConfig+0x2036>
 8009a68:	2340      	movs	r3, #64	; 0x40
 8009a6a:	e010      	b.n	8009a8e <UART_SetConfig+0x2036>
 8009a6c:	2320      	movs	r3, #32
 8009a6e:	e00e      	b.n	8009a8e <UART_SetConfig+0x2036>
 8009a70:	2310      	movs	r3, #16
 8009a72:	e00c      	b.n	8009a8e <UART_SetConfig+0x2036>
 8009a74:	230c      	movs	r3, #12
 8009a76:	e00a      	b.n	8009a8e <UART_SetConfig+0x2036>
 8009a78:	230a      	movs	r3, #10
 8009a7a:	e008      	b.n	8009a8e <UART_SetConfig+0x2036>
 8009a7c:	2308      	movs	r3, #8
 8009a7e:	e006      	b.n	8009a8e <UART_SetConfig+0x2036>
 8009a80:	2306      	movs	r3, #6
 8009a82:	e004      	b.n	8009a8e <UART_SetConfig+0x2036>
 8009a84:	2304      	movs	r3, #4
 8009a86:	e002      	b.n	8009a8e <UART_SetConfig+0x2036>
 8009a88:	2302      	movs	r3, #2
 8009a8a:	e000      	b.n	8009a8e <UART_SetConfig+0x2036>
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	085b      	lsrs	r3, r3, #1
 8009a98:	441a      	add	r2, r3
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8009aa6:	e131      	b.n	8009d0c <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d043      	beq.n	8009b38 <UART_SetConfig+0x20e0>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d03d      	beq.n	8009b34 <UART_SetConfig+0x20dc>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	d037      	beq.n	8009b30 <UART_SetConfig+0x20d8>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac4:	2b03      	cmp	r3, #3
 8009ac6:	d031      	beq.n	8009b2c <UART_SetConfig+0x20d4>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009acc:	2b04      	cmp	r3, #4
 8009ace:	d02b      	beq.n	8009b28 <UART_SetConfig+0x20d0>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad4:	2b05      	cmp	r3, #5
 8009ad6:	d025      	beq.n	8009b24 <UART_SetConfig+0x20cc>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009adc:	2b06      	cmp	r3, #6
 8009ade:	d01f      	beq.n	8009b20 <UART_SetConfig+0x20c8>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae4:	2b07      	cmp	r3, #7
 8009ae6:	d019      	beq.n	8009b1c <UART_SetConfig+0x20c4>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aec:	2b08      	cmp	r3, #8
 8009aee:	d013      	beq.n	8009b18 <UART_SetConfig+0x20c0>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af4:	2b09      	cmp	r3, #9
 8009af6:	d00d      	beq.n	8009b14 <UART_SetConfig+0x20bc>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afc:	2b0a      	cmp	r3, #10
 8009afe:	d007      	beq.n	8009b10 <UART_SetConfig+0x20b8>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b04:	2b0b      	cmp	r3, #11
 8009b06:	d101      	bne.n	8009b0c <UART_SetConfig+0x20b4>
 8009b08:	4b3f      	ldr	r3, [pc, #252]	; (8009c08 <UART_SetConfig+0x21b0>)
 8009b0a:	e016      	b.n	8009b3a <UART_SetConfig+0x20e2>
 8009b0c:	4b3d      	ldr	r3, [pc, #244]	; (8009c04 <UART_SetConfig+0x21ac>)
 8009b0e:	e014      	b.n	8009b3a <UART_SetConfig+0x20e2>
 8009b10:	4b3e      	ldr	r3, [pc, #248]	; (8009c0c <UART_SetConfig+0x21b4>)
 8009b12:	e012      	b.n	8009b3a <UART_SetConfig+0x20e2>
 8009b14:	4b3e      	ldr	r3, [pc, #248]	; (8009c10 <UART_SetConfig+0x21b8>)
 8009b16:	e010      	b.n	8009b3a <UART_SetConfig+0x20e2>
 8009b18:	4b3e      	ldr	r3, [pc, #248]	; (8009c14 <UART_SetConfig+0x21bc>)
 8009b1a:	e00e      	b.n	8009b3a <UART_SetConfig+0x20e2>
 8009b1c:	4b3e      	ldr	r3, [pc, #248]	; (8009c18 <UART_SetConfig+0x21c0>)
 8009b1e:	e00c      	b.n	8009b3a <UART_SetConfig+0x20e2>
 8009b20:	4b3e      	ldr	r3, [pc, #248]	; (8009c1c <UART_SetConfig+0x21c4>)
 8009b22:	e00a      	b.n	8009b3a <UART_SetConfig+0x20e2>
 8009b24:	4b3e      	ldr	r3, [pc, #248]	; (8009c20 <UART_SetConfig+0x21c8>)
 8009b26:	e008      	b.n	8009b3a <UART_SetConfig+0x20e2>
 8009b28:	4b3e      	ldr	r3, [pc, #248]	; (8009c24 <UART_SetConfig+0x21cc>)
 8009b2a:	e006      	b.n	8009b3a <UART_SetConfig+0x20e2>
 8009b2c:	4b3e      	ldr	r3, [pc, #248]	; (8009c28 <UART_SetConfig+0x21d0>)
 8009b2e:	e004      	b.n	8009b3a <UART_SetConfig+0x20e2>
 8009b30:	4b3e      	ldr	r3, [pc, #248]	; (8009c2c <UART_SetConfig+0x21d4>)
 8009b32:	e002      	b.n	8009b3a <UART_SetConfig+0x20e2>
 8009b34:	4b3e      	ldr	r3, [pc, #248]	; (8009c30 <UART_SetConfig+0x21d8>)
 8009b36:	e000      	b.n	8009b3a <UART_SetConfig+0x20e2>
 8009b38:	4b32      	ldr	r3, [pc, #200]	; (8009c04 <UART_SetConfig+0x21ac>)
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	6852      	ldr	r2, [r2, #4]
 8009b3e:	0852      	lsrs	r2, r2, #1
 8009b40:	441a      	add	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b4e:	e0dd      	b.n	8009d0c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d046      	beq.n	8009be6 <UART_SetConfig+0x218e>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d040      	beq.n	8009be2 <UART_SetConfig+0x218a>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b64:	2b02      	cmp	r3, #2
 8009b66:	d03a      	beq.n	8009bde <UART_SetConfig+0x2186>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6c:	2b03      	cmp	r3, #3
 8009b6e:	d034      	beq.n	8009bda <UART_SetConfig+0x2182>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b74:	2b04      	cmp	r3, #4
 8009b76:	d02e      	beq.n	8009bd6 <UART_SetConfig+0x217e>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7c:	2b05      	cmp	r3, #5
 8009b7e:	d028      	beq.n	8009bd2 <UART_SetConfig+0x217a>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b84:	2b06      	cmp	r3, #6
 8009b86:	d022      	beq.n	8009bce <UART_SetConfig+0x2176>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8c:	2b07      	cmp	r3, #7
 8009b8e:	d01c      	beq.n	8009bca <UART_SetConfig+0x2172>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b94:	2b08      	cmp	r3, #8
 8009b96:	d016      	beq.n	8009bc6 <UART_SetConfig+0x216e>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9c:	2b09      	cmp	r3, #9
 8009b9e:	d00f      	beq.n	8009bc0 <UART_SetConfig+0x2168>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba4:	2b0a      	cmp	r3, #10
 8009ba6:	d008      	beq.n	8009bba <UART_SetConfig+0x2162>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bac:	2b0b      	cmp	r3, #11
 8009bae:	d102      	bne.n	8009bb6 <UART_SetConfig+0x215e>
 8009bb0:	f643 5309 	movw	r3, #15625	; 0x3d09
 8009bb4:	e018      	b.n	8009be8 <UART_SetConfig+0x2190>
 8009bb6:	4b18      	ldr	r3, [pc, #96]	; (8009c18 <UART_SetConfig+0x21c0>)
 8009bb8:	e016      	b.n	8009be8 <UART_SetConfig+0x2190>
 8009bba:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009bbe:	e013      	b.n	8009be8 <UART_SetConfig+0x2190>
 8009bc0:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009bc4:	e010      	b.n	8009be8 <UART_SetConfig+0x2190>
 8009bc6:	4b1b      	ldr	r3, [pc, #108]	; (8009c34 <UART_SetConfig+0x21dc>)
 8009bc8:	e00e      	b.n	8009be8 <UART_SetConfig+0x2190>
 8009bca:	4b0f      	ldr	r3, [pc, #60]	; (8009c08 <UART_SetConfig+0x21b0>)
 8009bcc:	e00c      	b.n	8009be8 <UART_SetConfig+0x2190>
 8009bce:	4b1a      	ldr	r3, [pc, #104]	; (8009c38 <UART_SetConfig+0x21e0>)
 8009bd0:	e00a      	b.n	8009be8 <UART_SetConfig+0x2190>
 8009bd2:	4b1a      	ldr	r3, [pc, #104]	; (8009c3c <UART_SetConfig+0x21e4>)
 8009bd4:	e008      	b.n	8009be8 <UART_SetConfig+0x2190>
 8009bd6:	4b0d      	ldr	r3, [pc, #52]	; (8009c0c <UART_SetConfig+0x21b4>)
 8009bd8:	e006      	b.n	8009be8 <UART_SetConfig+0x2190>
 8009bda:	4b19      	ldr	r3, [pc, #100]	; (8009c40 <UART_SetConfig+0x21e8>)
 8009bdc:	e004      	b.n	8009be8 <UART_SetConfig+0x2190>
 8009bde:	4b0c      	ldr	r3, [pc, #48]	; (8009c10 <UART_SetConfig+0x21b8>)
 8009be0:	e002      	b.n	8009be8 <UART_SetConfig+0x2190>
 8009be2:	4b0c      	ldr	r3, [pc, #48]	; (8009c14 <UART_SetConfig+0x21bc>)
 8009be4:	e000      	b.n	8009be8 <UART_SetConfig+0x2190>
 8009be6:	4b0c      	ldr	r3, [pc, #48]	; (8009c18 <UART_SetConfig+0x21c0>)
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	6852      	ldr	r2, [r2, #4]
 8009bec:	0852      	lsrs	r2, r2, #1
 8009bee:	441a      	add	r2, r3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009bfc:	e086      	b.n	8009d0c <UART_SetConfig+0x22b4>
 8009bfe:	bf00      	nop
 8009c00:	58024400 	.word	0x58024400
 8009c04:	03d09000 	.word	0x03d09000
 8009c08:	0003d090 	.word	0x0003d090
 8009c0c:	0007a120 	.word	0x0007a120
 8009c10:	000f4240 	.word	0x000f4240
 8009c14:	001e8480 	.word	0x001e8480
 8009c18:	003d0900 	.word	0x003d0900
 8009c1c:	00516155 	.word	0x00516155
 8009c20:	0061a800 	.word	0x0061a800
 8009c24:	007a1200 	.word	0x007a1200
 8009c28:	00a2c2aa 	.word	0x00a2c2aa
 8009c2c:	00f42400 	.word	0x00f42400
 8009c30:	01e84800 	.word	0x01e84800
 8009c34:	0001e848 	.word	0x0001e848
 8009c38:	00051615 	.word	0x00051615
 8009c3c:	00061a80 	.word	0x00061a80
 8009c40:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d04e      	beq.n	8009cea <UART_SetConfig+0x2292>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d047      	beq.n	8009ce4 <UART_SetConfig+0x228c>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d040      	beq.n	8009cde <UART_SetConfig+0x2286>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c60:	2b03      	cmp	r3, #3
 8009c62:	d039      	beq.n	8009cd8 <UART_SetConfig+0x2280>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c68:	2b04      	cmp	r3, #4
 8009c6a:	d032      	beq.n	8009cd2 <UART_SetConfig+0x227a>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c70:	2b05      	cmp	r3, #5
 8009c72:	d02b      	beq.n	8009ccc <UART_SetConfig+0x2274>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c78:	2b06      	cmp	r3, #6
 8009c7a:	d024      	beq.n	8009cc6 <UART_SetConfig+0x226e>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c80:	2b07      	cmp	r3, #7
 8009c82:	d01d      	beq.n	8009cc0 <UART_SetConfig+0x2268>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c88:	2b08      	cmp	r3, #8
 8009c8a:	d016      	beq.n	8009cba <UART_SetConfig+0x2262>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c90:	2b09      	cmp	r3, #9
 8009c92:	d00f      	beq.n	8009cb4 <UART_SetConfig+0x225c>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c98:	2b0a      	cmp	r3, #10
 8009c9a:	d008      	beq.n	8009cae <UART_SetConfig+0x2256>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca0:	2b0b      	cmp	r3, #11
 8009ca2:	d101      	bne.n	8009ca8 <UART_SetConfig+0x2250>
 8009ca4:	2380      	movs	r3, #128	; 0x80
 8009ca6:	e022      	b.n	8009cee <UART_SetConfig+0x2296>
 8009ca8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cac:	e01f      	b.n	8009cee <UART_SetConfig+0x2296>
 8009cae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cb2:	e01c      	b.n	8009cee <UART_SetConfig+0x2296>
 8009cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cb8:	e019      	b.n	8009cee <UART_SetConfig+0x2296>
 8009cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cbe:	e016      	b.n	8009cee <UART_SetConfig+0x2296>
 8009cc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009cc4:	e013      	b.n	8009cee <UART_SetConfig+0x2296>
 8009cc6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009cca:	e010      	b.n	8009cee <UART_SetConfig+0x2296>
 8009ccc:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009cd0:	e00d      	b.n	8009cee <UART_SetConfig+0x2296>
 8009cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cd6:	e00a      	b.n	8009cee <UART_SetConfig+0x2296>
 8009cd8:	f241 5355 	movw	r3, #5461	; 0x1555
 8009cdc:	e007      	b.n	8009cee <UART_SetConfig+0x2296>
 8009cde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ce2:	e004      	b.n	8009cee <UART_SetConfig+0x2296>
 8009ce4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009ce8:	e001      	b.n	8009cee <UART_SetConfig+0x2296>
 8009cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	6852      	ldr	r2, [r2, #4]
 8009cf2:	0852      	lsrs	r2, r2, #1
 8009cf4:	441a      	add	r2, r3
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009d02:	e003      	b.n	8009d0c <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009d0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d0e:	2b0f      	cmp	r3, #15
 8009d10:	d908      	bls.n	8009d24 <UART_SetConfig+0x22cc>
 8009d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d18:	d204      	bcs.n	8009d24 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d20:	60da      	str	r2, [r3, #12]
 8009d22:	e002      	b.n	8009d2a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2201      	movs	r2, #1
 8009d36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009d46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3740      	adds	r7, #64	; 0x40
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08009d54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d60:	f003 0301 	and.w	r3, r3, #1
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d00a      	beq.n	8009d7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	430a      	orrs	r2, r1
 8009d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d82:	f003 0302 	and.w	r3, r3, #2
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00a      	beq.n	8009da0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	430a      	orrs	r2, r1
 8009d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009da4:	f003 0304 	and.w	r3, r3, #4
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d00a      	beq.n	8009dc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	430a      	orrs	r2, r1
 8009dc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dc6:	f003 0308 	and.w	r3, r3, #8
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00a      	beq.n	8009de4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	430a      	orrs	r2, r1
 8009de2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de8:	f003 0310 	and.w	r3, r3, #16
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d00a      	beq.n	8009e06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	430a      	orrs	r2, r1
 8009e04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e0a:	f003 0320 	and.w	r3, r3, #32
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d00a      	beq.n	8009e28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	430a      	orrs	r2, r1
 8009e26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d01a      	beq.n	8009e6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	430a      	orrs	r2, r1
 8009e48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e52:	d10a      	bne.n	8009e6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	430a      	orrs	r2, r1
 8009e68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d00a      	beq.n	8009e8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	430a      	orrs	r2, r1
 8009e8a:	605a      	str	r2, [r3, #4]
  }
}
 8009e8c:	bf00      	nop
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b086      	sub	sp, #24
 8009e9c:	af02      	add	r7, sp, #8
 8009e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009ea8:	f7fa f82e 	bl	8003f08 <HAL_GetTick>
 8009eac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f003 0308 	and.w	r3, r3, #8
 8009eb8:	2b08      	cmp	r3, #8
 8009eba:	d10e      	bne.n	8009eda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ebc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 f82c 	bl	8009f28 <UART_WaitOnFlagUntilTimeout>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d001      	beq.n	8009eda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ed6:	2303      	movs	r3, #3
 8009ed8:	e022      	b.n	8009f20 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f003 0304 	and.w	r3, r3, #4
 8009ee4:	2b04      	cmp	r3, #4
 8009ee6:	d10e      	bne.n	8009f06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ee8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009eec:	9300      	str	r3, [sp, #0]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 f816 	bl	8009f28 <UART_WaitOnFlagUntilTimeout>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d001      	beq.n	8009f06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f02:	2303      	movs	r3, #3
 8009f04:	e00c      	b.n	8009f20 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2220      	movs	r2, #32
 8009f0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2220      	movs	r2, #32
 8009f12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009f1e:	2300      	movs	r3, #0
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3710      	adds	r7, #16
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	603b      	str	r3, [r7, #0]
 8009f34:	4613      	mov	r3, r2
 8009f36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f38:	e062      	b.n	800a000 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f40:	d05e      	beq.n	800a000 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f42:	f7f9 ffe1 	bl	8003f08 <HAL_GetTick>
 8009f46:	4602      	mov	r2, r0
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	1ad3      	subs	r3, r2, r3
 8009f4c:	69ba      	ldr	r2, [r7, #24]
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d302      	bcc.n	8009f58 <UART_WaitOnFlagUntilTimeout+0x30>
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d11d      	bne.n	8009f94 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009f66:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	689a      	ldr	r2, [r3, #8]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f022 0201 	bic.w	r2, r2, #1
 8009f76:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2220      	movs	r2, #32
 8009f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2220      	movs	r2, #32
 8009f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009f90:	2303      	movs	r3, #3
 8009f92:	e045      	b.n	800a020 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f003 0304 	and.w	r3, r3, #4
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d02e      	beq.n	800a000 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	69db      	ldr	r3, [r3, #28]
 8009fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fb0:	d126      	bne.n	800a000 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009fba:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009fca:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	689a      	ldr	r2, [r3, #8]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f022 0201 	bic.w	r2, r2, #1
 8009fda:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2220      	movs	r2, #32
 8009fe0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2220      	movs	r2, #32
 8009fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2220      	movs	r2, #32
 8009ff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8009ffc:	2303      	movs	r3, #3
 8009ffe:	e00f      	b.n	800a020 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	69da      	ldr	r2, [r3, #28]
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	4013      	ands	r3, r2
 800a00a:	68ba      	ldr	r2, [r7, #8]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	bf0c      	ite	eq
 800a010:	2301      	moveq	r3, #1
 800a012:	2300      	movne	r3, #0
 800a014:	b2db      	uxtb	r3, r3
 800a016:	461a      	mov	r2, r3
 800a018:	79fb      	ldrb	r3, [r7, #7]
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d08d      	beq.n	8009f3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a01e:	2300      	movs	r3, #0
}
 800a020:	4618      	mov	r0, r3
 800a022:	3710      	adds	r7, #16
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a036:	2b01      	cmp	r3, #1
 800a038:	d101      	bne.n	800a03e <HAL_UARTEx_DisableFifoMode+0x16>
 800a03a:	2302      	movs	r3, #2
 800a03c:	e027      	b.n	800a08e <HAL_UARTEx_DisableFifoMode+0x66>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2201      	movs	r2, #1
 800a042:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2224      	movs	r2, #36	; 0x24
 800a04a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f022 0201 	bic.w	r2, r2, #1
 800a064:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a06c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2200      	movs	r2, #0
 800a072:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2220      	movs	r2, #32
 800a080:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3714      	adds	r7, #20
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr

0800a09a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b084      	sub	sp, #16
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
 800a0a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d101      	bne.n	800a0b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a0ae:	2302      	movs	r3, #2
 800a0b0:	e02d      	b.n	800a10e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2224      	movs	r2, #36	; 0x24
 800a0be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f022 0201 	bic.w	r2, r2, #1
 800a0d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	683a      	ldr	r2, [r7, #0]
 800a0ea:	430a      	orrs	r2, r1
 800a0ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 f850 	bl	800a194 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	68fa      	ldr	r2, [r7, #12]
 800a0fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2220      	movs	r2, #32
 800a100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b084      	sub	sp, #16
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
 800a11e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a126:	2b01      	cmp	r3, #1
 800a128:	d101      	bne.n	800a12e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a12a:	2302      	movs	r3, #2
 800a12c:	e02d      	b.n	800a18a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2201      	movs	r2, #1
 800a132:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2224      	movs	r2, #36	; 0x24
 800a13a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f022 0201 	bic.w	r2, r2, #1
 800a154:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	430a      	orrs	r2, r1
 800a168:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 f812 	bl	800a194 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2220      	movs	r2, #32
 800a17c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a188:	2300      	movs	r3, #0
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
	...

0800a194 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a194:	b480      	push	{r7}
 800a196:	b089      	sub	sp, #36	; 0x24
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a19c:	4a2f      	ldr	r2, [pc, #188]	; (800a25c <UARTEx_SetNbDataToProcess+0xc8>)
 800a19e:	f107 0314 	add.w	r3, r7, #20
 800a1a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a1a6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a1aa:	4a2d      	ldr	r2, [pc, #180]	; (800a260 <UARTEx_SetNbDataToProcess+0xcc>)
 800a1ac:	f107 030c 	add.w	r3, r7, #12
 800a1b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a1b4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d108      	bne.n	800a1d2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a1d0:	e03d      	b.n	800a24e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a1d2:	2308      	movs	r3, #8
 800a1d4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a1d6:	2308      	movs	r3, #8
 800a1d8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	0e5b      	lsrs	r3, r3, #25
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	f003 0307 	and.w	r3, r3, #7
 800a1e8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	0f5b      	lsrs	r3, r3, #29
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	f003 0307 	and.w	r3, r3, #7
 800a1f8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a1fa:	7fbb      	ldrb	r3, [r7, #30]
 800a1fc:	7f3a      	ldrb	r2, [r7, #28]
 800a1fe:	f107 0120 	add.w	r1, r7, #32
 800a202:	440a      	add	r2, r1
 800a204:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a208:	fb02 f303 	mul.w	r3, r2, r3
 800a20c:	7f3a      	ldrb	r2, [r7, #28]
 800a20e:	f107 0120 	add.w	r1, r7, #32
 800a212:	440a      	add	r2, r1
 800a214:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a218:	fb93 f3f2 	sdiv	r3, r3, r2
 800a21c:	b29a      	uxth	r2, r3
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a224:	7ffb      	ldrb	r3, [r7, #31]
 800a226:	7f7a      	ldrb	r2, [r7, #29]
 800a228:	f107 0120 	add.w	r1, r7, #32
 800a22c:	440a      	add	r2, r1
 800a22e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a232:	fb02 f303 	mul.w	r3, r2, r3
 800a236:	7f7a      	ldrb	r2, [r7, #29]
 800a238:	f107 0120 	add.w	r1, r7, #32
 800a23c:	440a      	add	r2, r1
 800a23e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a242:	fb93 f3f2 	sdiv	r3, r3, r2
 800a246:	b29a      	uxth	r2, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a24e:	bf00      	nop
 800a250:	3724      	adds	r7, #36	; 0x24
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	0800ecf4 	.word	0x0800ecf4
 800a260:	0800ecfc 	.word	0x0800ecfc

0800a264 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a264:	b084      	sub	sp, #16
 800a266:	b580      	push	{r7, lr}
 800a268:	b084      	sub	sp, #16
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
 800a26e:	f107 001c 	add.w	r0, r7, #28
 800a272:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d120      	bne.n	800a2be <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a280:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	68da      	ldr	r2, [r3, #12]
 800a28c:	4b25      	ldr	r3, [pc, #148]	; (800a324 <USB_CoreInit+0xc0>)
 800a28e:	4013      	ands	r3, r2
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a2a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d105      	bne.n	800a2b2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 fa4c 	bl	800a750 <USB_CoreReset>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	73fb      	strb	r3, [r7, #15]
 800a2bc:	e01a      	b.n	800a2f4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 fa40 	bl	800a750 <USB_CoreReset>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a2d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d106      	bne.n	800a2e8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	639a      	str	r2, [r3, #56]	; 0x38
 800a2e6:	e005      	b.n	800a2f4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d10b      	bne.n	800a312 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	689b      	ldr	r3, [r3, #8]
 800a2fe:	f043 0206 	orr.w	r2, r3, #6
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	689b      	ldr	r3, [r3, #8]
 800a30a:	f043 0220 	orr.w	r2, r3, #32
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a312:	7bfb      	ldrb	r3, [r7, #15]
}
 800a314:	4618      	mov	r0, r3
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a31e:	b004      	add	sp, #16
 800a320:	4770      	bx	lr
 800a322:	bf00      	nop
 800a324:	ffbdffbf 	.word	0xffbdffbf

0800a328 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	f023 0201 	bic.w	r2, r3, #1
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a33c:	2300      	movs	r3, #0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	370c      	adds	r7, #12
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr

0800a34a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b082      	sub	sp, #8
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
 800a352:	460b      	mov	r3, r1
 800a354:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a362:	78fb      	ldrb	r3, [r7, #3]
 800a364:	2b01      	cmp	r3, #1
 800a366:	d106      	bne.n	800a376 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	68db      	ldr	r3, [r3, #12]
 800a36c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	60da      	str	r2, [r3, #12]
 800a374:	e00b      	b.n	800a38e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a376:	78fb      	ldrb	r3, [r7, #3]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d106      	bne.n	800a38a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	60da      	str	r2, [r3, #12]
 800a388:	e001      	b.n	800a38e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	e003      	b.n	800a396 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a38e:	2032      	movs	r0, #50	; 0x32
 800a390:	f7f9 fdc6 	bl	8003f20 <HAL_Delay>

  return HAL_OK;
 800a394:	2300      	movs	r3, #0
}
 800a396:	4618      	mov	r0, r3
 800a398:	3708      	adds	r7, #8
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
	...

0800a3a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a3a0:	b084      	sub	sp, #16
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b086      	sub	sp, #24
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
 800a3aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a3ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	613b      	str	r3, [r7, #16]
 800a3be:	e009      	b.n	800a3d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	3340      	adds	r3, #64	; 0x40
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	4413      	add	r3, r2
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	613b      	str	r3, [r7, #16]
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	2b0e      	cmp	r3, #14
 800a3d8:	d9f2      	bls.n	800a3c0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a3da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d11c      	bne.n	800a41a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	68fa      	ldr	r2, [r7, #12]
 800a3ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a3ee:	f043 0302 	orr.w	r3, r3, #2
 800a3f2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	601a      	str	r2, [r3, #0]
 800a418:	e005      	b.n	800a426 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a41e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a42c:	461a      	mov	r2, r3
 800a42e:	2300      	movs	r3, #0
 800a430:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a438:	4619      	mov	r1, r3
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a440:	461a      	mov	r2, r3
 800a442:	680b      	ldr	r3, [r1, #0]
 800a444:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d10c      	bne.n	800a466 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d104      	bne.n	800a45c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a452:	2100      	movs	r1, #0
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 f949 	bl	800a6ec <USB_SetDevSpeed>
 800a45a:	e008      	b.n	800a46e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a45c:	2101      	movs	r1, #1
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 f944 	bl	800a6ec <USB_SetDevSpeed>
 800a464:	e003      	b.n	800a46e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a466:	2103      	movs	r1, #3
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 f93f 	bl	800a6ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a46e:	2110      	movs	r1, #16
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 f8f3 	bl	800a65c <USB_FlushTxFifo>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d001      	beq.n	800a480 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a47c:	2301      	movs	r3, #1
 800a47e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 f911 	bl	800a6a8 <USB_FlushRxFifo>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d001      	beq.n	800a490 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a496:	461a      	mov	r2, r3
 800a498:	2300      	movs	r3, #0
 800a49a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	613b      	str	r3, [r7, #16]
 800a4b8:	e043      	b.n	800a542 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	015a      	lsls	r2, r3, #5
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4d0:	d118      	bne.n	800a504 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d10a      	bne.n	800a4ee <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	015a      	lsls	r2, r3, #5
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	4413      	add	r3, r2
 800a4e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a4ea:	6013      	str	r3, [r2, #0]
 800a4ec:	e013      	b.n	800a516 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	015a      	lsls	r2, r3, #5
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a500:	6013      	str	r3, [r2, #0]
 800a502:	e008      	b.n	800a516 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	015a      	lsls	r2, r3, #5
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	4413      	add	r3, r2
 800a50c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a510:	461a      	mov	r2, r3
 800a512:	2300      	movs	r3, #0
 800a514:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	015a      	lsls	r2, r3, #5
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	4413      	add	r3, r2
 800a51e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a522:	461a      	mov	r2, r3
 800a524:	2300      	movs	r3, #0
 800a526:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	015a      	lsls	r2, r3, #5
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	4413      	add	r3, r2
 800a530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a534:	461a      	mov	r2, r3
 800a536:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a53a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	3301      	adds	r3, #1
 800a540:	613b      	str	r3, [r7, #16]
 800a542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a544:	693a      	ldr	r2, [r7, #16]
 800a546:	429a      	cmp	r2, r3
 800a548:	d3b7      	bcc.n	800a4ba <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a54a:	2300      	movs	r3, #0
 800a54c:	613b      	str	r3, [r7, #16]
 800a54e:	e043      	b.n	800a5d8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	015a      	lsls	r2, r3, #5
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	4413      	add	r3, r2
 800a558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a562:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a566:	d118      	bne.n	800a59a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d10a      	bne.n	800a584 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	015a      	lsls	r2, r3, #5
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	4413      	add	r3, r2
 800a576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a57a:	461a      	mov	r2, r3
 800a57c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a580:	6013      	str	r3, [r2, #0]
 800a582:	e013      	b.n	800a5ac <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	015a      	lsls	r2, r3, #5
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	4413      	add	r3, r2
 800a58c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a590:	461a      	mov	r2, r3
 800a592:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a596:	6013      	str	r3, [r2, #0]
 800a598:	e008      	b.n	800a5ac <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	015a      	lsls	r2, r3, #5
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	015a      	lsls	r2, r3, #5
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	015a      	lsls	r2, r3, #5
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a5d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	613b      	str	r3, [r7, #16]
 800a5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5da:	693a      	ldr	r2, [r7, #16]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d3b7      	bcc.n	800a550 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5e6:	691b      	ldr	r3, [r3, #16]
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a600:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a604:	2b00      	cmp	r3, #0
 800a606:	d105      	bne.n	800a614 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	699b      	ldr	r3, [r3, #24]
 800a60c:	f043 0210 	orr.w	r2, r3, #16
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	699a      	ldr	r2, [r3, #24]
 800a618:	4b0e      	ldr	r3, [pc, #56]	; (800a654 <USB_DevInit+0x2b4>)
 800a61a:	4313      	orrs	r3, r2
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a622:	2b00      	cmp	r3, #0
 800a624:	d005      	beq.n	800a632 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	699b      	ldr	r3, [r3, #24]
 800a62a:	f043 0208 	orr.w	r2, r3, #8
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a634:	2b01      	cmp	r3, #1
 800a636:	d105      	bne.n	800a644 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	699a      	ldr	r2, [r3, #24]
 800a63c:	4b06      	ldr	r3, [pc, #24]	; (800a658 <USB_DevInit+0x2b8>)
 800a63e:	4313      	orrs	r3, r2
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a644:	7dfb      	ldrb	r3, [r7, #23]
}
 800a646:	4618      	mov	r0, r3
 800a648:	3718      	adds	r7, #24
 800a64a:	46bd      	mov	sp, r7
 800a64c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a650:	b004      	add	sp, #16
 800a652:	4770      	bx	lr
 800a654:	803c3800 	.word	0x803c3800
 800a658:	40000004 	.word	0x40000004

0800a65c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b085      	sub	sp, #20
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a666:	2300      	movs	r3, #0
 800a668:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	019b      	lsls	r3, r3, #6
 800a66e:	f043 0220 	orr.w	r2, r3, #32
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	3301      	adds	r3, #1
 800a67a:	60fb      	str	r3, [r7, #12]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	4a09      	ldr	r2, [pc, #36]	; (800a6a4 <USB_FlushTxFifo+0x48>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d901      	bls.n	800a688 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a684:	2303      	movs	r3, #3
 800a686:	e006      	b.n	800a696 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	691b      	ldr	r3, [r3, #16]
 800a68c:	f003 0320 	and.w	r3, r3, #32
 800a690:	2b20      	cmp	r3, #32
 800a692:	d0f0      	beq.n	800a676 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	3714      	adds	r7, #20
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr
 800a6a2:	bf00      	nop
 800a6a4:	00030d40 	.word	0x00030d40

0800a6a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b085      	sub	sp, #20
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2210      	movs	r2, #16
 800a6b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	3301      	adds	r3, #1
 800a6be:	60fb      	str	r3, [r7, #12]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	4a09      	ldr	r2, [pc, #36]	; (800a6e8 <USB_FlushRxFifo+0x40>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d901      	bls.n	800a6cc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a6c8:	2303      	movs	r3, #3
 800a6ca:	e006      	b.n	800a6da <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	691b      	ldr	r3, [r3, #16]
 800a6d0:	f003 0310 	and.w	r3, r3, #16
 800a6d4:	2b10      	cmp	r3, #16
 800a6d6:	d0f0      	beq.n	800a6ba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3714      	adds	r7, #20
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	00030d40 	.word	0x00030d40

0800a6ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b085      	sub	sp, #20
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	78fb      	ldrb	r3, [r7, #3]
 800a706:	68f9      	ldr	r1, [r7, #12]
 800a708:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a70c:	4313      	orrs	r3, r2
 800a70e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3714      	adds	r7, #20
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr

0800a71e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b084      	sub	sp, #16
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a738:	f043 0302 	orr.w	r3, r3, #2
 800a73c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800a73e:	2003      	movs	r0, #3
 800a740:	f7f9 fbee 	bl	8003f20 <HAL_Delay>

  return HAL_OK;
 800a744:	2300      	movs	r3, #0
}
 800a746:	4618      	mov	r0, r3
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
	...

0800a750 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a750:	b480      	push	{r7}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a758:	2300      	movs	r3, #0
 800a75a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	3301      	adds	r3, #1
 800a760:	60fb      	str	r3, [r7, #12]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	4a13      	ldr	r2, [pc, #76]	; (800a7b4 <USB_CoreReset+0x64>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d901      	bls.n	800a76e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a76a:	2303      	movs	r3, #3
 800a76c:	e01b      	b.n	800a7a6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	691b      	ldr	r3, [r3, #16]
 800a772:	2b00      	cmp	r3, #0
 800a774:	daf2      	bge.n	800a75c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a776:	2300      	movs	r3, #0
 800a778:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	691b      	ldr	r3, [r3, #16]
 800a77e:	f043 0201 	orr.w	r2, r3, #1
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	3301      	adds	r3, #1
 800a78a:	60fb      	str	r3, [r7, #12]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	4a09      	ldr	r2, [pc, #36]	; (800a7b4 <USB_CoreReset+0x64>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d901      	bls.n	800a798 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a794:	2303      	movs	r3, #3
 800a796:	e006      	b.n	800a7a6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	691b      	ldr	r3, [r3, #16]
 800a79c:	f003 0301 	and.w	r3, r3, #1
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d0f0      	beq.n	800a786 <USB_CoreReset+0x36>

  return HAL_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3714      	adds	r7, #20
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr
 800a7b2:	bf00      	nop
 800a7b4:	00030d40 	.word	0x00030d40

0800a7b8 <_platform_observer_node_exec_cb>:
 800a7b8:	2a00      	cmp	r2, #0
 800a7ba:	d043      	beq.n	800a844 <_platform_observer_node_exec_cb+0x8c>
 800a7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7be:	6817      	ldr	r7, [r2, #0]
 800a7c0:	b085      	sub	sp, #20
 800a7c2:	2f00      	cmp	r7, #0
 800a7c4:	d044      	beq.n	800a850 <_platform_observer_node_exec_cb+0x98>
 800a7c6:	8996      	ldrh	r6, [r2, #12]
 800a7c8:	b356      	cbz	r6, 800a820 <_platform_observer_node_exec_cb+0x68>
 800a7ca:	89d3      	ldrh	r3, [r2, #14]
 800a7cc:	f240 2c02 	movw	ip, #514	; 0x202
 800a7d0:	f240 2501 	movw	r5, #513	; 0x201
 800a7d4:	4614      	mov	r4, r2
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	42b3      	cmp	r3, r6
 800a7da:	460b      	mov	r3, r1
 800a7dc:	bf0f      	iteee	eq
 800a7de:	f44f 7e01 	moveq.w	lr, #516	; 0x204
 800a7e2:	f04f 0e04 	movne.w	lr, #4
 800a7e6:	f04f 0c02 	movne.w	ip, #2
 800a7ea:	2501      	movne	r5, #1
 800a7ec:	bb10      	cbnz	r0, 800a834 <_platform_observer_node_exec_cb+0x7c>
 800a7ee:	6892      	ldr	r2, [r2, #8]
 800a7f0:	07d1      	lsls	r1, r2, #31
 800a7f2:	d510      	bpl.n	800a816 <_platform_observer_node_exec_cb+0x5e>
 800a7f4:	f8b3 c002 	ldrh.w	ip, [r3, #2]
 800a7f8:	4629      	mov	r1, r5
 800a7fa:	9002      	str	r0, [sp, #8]
 800a7fc:	466a      	mov	r2, sp
 800a7fe:	8818      	ldrh	r0, [r3, #0]
 800a800:	695b      	ldr	r3, [r3, #20]
 800a802:	f8ad 6000 	strh.w	r6, [sp]
 800a806:	f8ad 0002 	strh.w	r0, [sp, #2]
 800a80a:	9303      	str	r3, [sp, #12]
 800a80c:	f8ad c004 	strh.w	ip, [sp, #4]
 800a810:	6860      	ldr	r0, [r4, #4]
 800a812:	47b8      	blx	r7
 800a814:	89a6      	ldrh	r6, [r4, #12]
 800a816:	1c73      	adds	r3, r6, #1
 800a818:	2000      	movs	r0, #0
 800a81a:	81a3      	strh	r3, [r4, #12]
 800a81c:	b005      	add	sp, #20
 800a81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a820:	f44f 7e82 	mov.w	lr, #260	; 0x104
 800a824:	f44f 7c81 	mov.w	ip, #258	; 0x102
 800a828:	f240 1501 	movw	r5, #257	; 0x101
 800a82c:	4614      	mov	r4, r2
 800a82e:	460b      	mov	r3, r1
 800a830:	2800      	cmp	r0, #0
 800a832:	d0dc      	beq.n	800a7ee <_platform_observer_node_exec_cb+0x36>
 800a834:	2801      	cmp	r0, #1
 800a836:	d007      	beq.n	800a848 <_platform_observer_node_exec_cb+0x90>
 800a838:	2802      	cmp	r0, #2
 800a83a:	d00c      	beq.n	800a856 <_platform_observer_node_exec_cb+0x9e>
 800a83c:	2803      	cmp	r0, #3
 800a83e:	d020      	beq.n	800a882 <_platform_observer_node_exec_cb+0xca>
 800a840:	2000      	movs	r0, #0
 800a842:	e7eb      	b.n	800a81c <_platform_observer_node_exec_cb+0x64>
 800a844:	2001      	movs	r0, #1
 800a846:	4770      	bx	lr
 800a848:	2000      	movs	r0, #0
 800a84a:	6121      	str	r1, [r4, #16]
 800a84c:	8190      	strh	r0, [r2, #12]
 800a84e:	e7e5      	b.n	800a81c <_platform_observer_node_exec_cb+0x64>
 800a850:	2001      	movs	r0, #1
 800a852:	b005      	add	sp, #20
 800a854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a856:	6892      	ldr	r2, [r2, #8]
 800a858:	6121      	str	r1, [r4, #16]
 800a85a:	0792      	lsls	r2, r2, #30
 800a85c:	d5f0      	bpl.n	800a840 <_platform_observer_node_exec_cb+0x88>
 800a85e:	884a      	ldrh	r2, [r1, #2]
 800a860:	2500      	movs	r5, #0
 800a862:	f8ad 6000 	strh.w	r6, [sp]
 800a866:	4661      	mov	r1, ip
 800a868:	f8ad 2004 	strh.w	r2, [sp, #4]
 800a86c:	881a      	ldrh	r2, [r3, #0]
 800a86e:	695b      	ldr	r3, [r3, #20]
 800a870:	f8ad 2002 	strh.w	r2, [sp, #2]
 800a874:	466a      	mov	r2, sp
 800a876:	6860      	ldr	r0, [r4, #4]
 800a878:	e9cd 5302 	strd	r5, r3, [sp, #8]
 800a87c:	47b8      	blx	r7
 800a87e:	4628      	mov	r0, r5
 800a880:	e7cc      	b.n	800a81c <_platform_observer_node_exec_cb+0x64>
 800a882:	6893      	ldr	r3, [r2, #8]
 800a884:	075b      	lsls	r3, r3, #29
 800a886:	d5c6      	bpl.n	800a816 <_platform_observer_node_exec_cb+0x5e>
 800a888:	6913      	ldr	r3, [r2, #16]
 800a88a:	2000      	movs	r0, #0
 800a88c:	f8ad 6000 	strh.w	r6, [sp]
 800a890:	4671      	mov	r1, lr
 800a892:	885d      	ldrh	r5, [r3, #2]
 800a894:	466a      	mov	r2, sp
 800a896:	f8ad 5004 	strh.w	r5, [sp, #4]
 800a89a:	881d      	ldrh	r5, [r3, #0]
 800a89c:	f8ad 5002 	strh.w	r5, [sp, #2]
 800a8a0:	695b      	ldr	r3, [r3, #20]
 800a8a2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a8a6:	6860      	ldr	r0, [r4, #4]
 800a8a8:	47b8      	blx	r7
 800a8aa:	89a6      	ldrh	r6, [r4, #12]
 800a8ac:	e7b3      	b.n	800a816 <_platform_observer_node_exec_cb+0x5e>
 800a8ae:	bf00      	nop

0800a8b0 <ai_platform_runtime_get_revision>:
 800a8b0:	4a1c      	ldr	r2, [pc, #112]	; (800a924 <ai_platform_runtime_get_revision+0x74>)
 800a8b2:	491d      	ldr	r1, [pc, #116]	; (800a928 <ai_platform_runtime_get_revision+0x78>)
 800a8b4:	6813      	ldr	r3, [r2, #0]
 800a8b6:	f023 0301 	bic.w	r3, r3, #1
 800a8ba:	6013      	str	r3, [r2, #0]
 800a8bc:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800a8c0:	680b      	ldr	r3, [r1, #0]
 800a8c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a8c6:	189a      	adds	r2, r3, r2
 800a8c8:	2a01      	cmp	r2, #1
 800a8ca:	d90c      	bls.n	800a8e6 <ai_platform_runtime_get_revision+0x36>
 800a8cc:	f240 4249 	movw	r2, #1097	; 0x449
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d008      	beq.n	800a8e6 <ai_platform_runtime_get_revision+0x36>
 800a8d4:	4b15      	ldr	r3, [pc, #84]	; (800a92c <ai_platform_runtime_get_revision+0x7c>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a8dc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800a8e0:	d010      	beq.n	800a904 <ai_platform_runtime_get_revision+0x54>
 800a8e2:	4813      	ldr	r0, [pc, #76]	; (800a930 <ai_platform_runtime_get_revision+0x80>)
 800a8e4:	4770      	bx	lr
 800a8e6:	4b13      	ldr	r3, [pc, #76]	; (800a934 <ai_platform_runtime_get_revision+0x84>)
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	601a      	str	r2, [r3, #0]
 800a8ee:	680b      	ldr	r3, [r1, #0]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d1fc      	bne.n	800a8ee <ai_platform_runtime_get_revision+0x3e>
 800a8f4:	4b10      	ldr	r3, [pc, #64]	; (800a938 <ai_platform_runtime_get_revision+0x88>)
 800a8f6:	4911      	ldr	r1, [pc, #68]	; (800a93c <ai_platform_runtime_get_revision+0x8c>)
 800a8f8:	4a11      	ldr	r2, [pc, #68]	; (800a940 <ai_platform_runtime_get_revision+0x90>)
 800a8fa:	6019      	str	r1, [r3, #0]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d0ef      	beq.n	800a8e2 <ai_platform_runtime_get_revision+0x32>
 800a902:	e7fe      	b.n	800a902 <ai_platform_runtime_get_revision+0x52>
 800a904:	4b0f      	ldr	r3, [pc, #60]	; (800a944 <ai_platform_runtime_get_revision+0x94>)
 800a906:	2201      	movs	r2, #1
 800a908:	4619      	mov	r1, r3
 800a90a:	601a      	str	r2, [r3, #0]
 800a90c:	680b      	ldr	r3, [r1, #0]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d1fc      	bne.n	800a90c <ai_platform_runtime_get_revision+0x5c>
 800a912:	4b0d      	ldr	r3, [pc, #52]	; (800a948 <ai_platform_runtime_get_revision+0x98>)
 800a914:	4909      	ldr	r1, [pc, #36]	; (800a93c <ai_platform_runtime_get_revision+0x8c>)
 800a916:	4a0a      	ldr	r2, [pc, #40]	; (800a940 <ai_platform_runtime_get_revision+0x90>)
 800a918:	6019      	str	r1, [r3, #0]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d0e0      	beq.n	800a8e2 <ai_platform_runtime_get_revision+0x32>
 800a920:	e7fe      	b.n	800a920 <ai_platform_runtime_get_revision+0x70>
 800a922:	bf00      	nop
 800a924:	e0002000 	.word	0xe0002000
 800a928:	e0042000 	.word	0xe0042000
 800a92c:	5c001000 	.word	0x5c001000
 800a930:	0800ee18 	.word	0x0800ee18
 800a934:	40023008 	.word	0x40023008
 800a938:	40023000 	.word	0x40023000
 800a93c:	f407a5c2 	.word	0xf407a5c2
 800a940:	b5e8b5cd 	.word	0xb5e8b5cd
 800a944:	58024c08 	.word	0x58024c08
 800a948:	58024c00 	.word	0x58024c00

0800a94c <ai_platform_runtime_get_version>:
 800a94c:	4a26      	ldr	r2, [pc, #152]	; (800a9e8 <ai_platform_runtime_get_version+0x9c>)
 800a94e:	4927      	ldr	r1, [pc, #156]	; (800a9ec <ai_platform_runtime_get_version+0xa0>)
 800a950:	6813      	ldr	r3, [r2, #0]
 800a952:	f023 0301 	bic.w	r3, r3, #1
 800a956:	6013      	str	r3, [r2, #0]
 800a958:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800a95c:	680b      	ldr	r3, [r1, #0]
 800a95e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a962:	189a      	adds	r2, r3, r2
 800a964:	2a01      	cmp	r2, #1
 800a966:	d921      	bls.n	800a9ac <ai_platform_runtime_get_version+0x60>
 800a968:	f240 4249 	movw	r2, #1097	; 0x449
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d01d      	beq.n	800a9ac <ai_platform_runtime_get_version+0x60>
 800a970:	4b1f      	ldr	r3, [pc, #124]	; (800a9f0 <ai_platform_runtime_get_version+0xa4>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a978:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800a97c:	d025      	beq.n	800a9ca <ai_platform_runtime_get_version+0x7e>
 800a97e:	4b1d      	ldr	r3, [pc, #116]	; (800a9f4 <ai_platform_runtime_get_version+0xa8>)
 800a980:	2000      	movs	r0, #0
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	b410      	push	{r4}
 800a986:	b2dc      	uxtb	r4, r3
 800a988:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800a98c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800a990:	0e1b      	lsrs	r3, r3, #24
 800a992:	f364 0007 	bfi	r0, r4, #0, #8
 800a996:	b083      	sub	sp, #12
 800a998:	f361 200f 	bfi	r0, r1, #8, #8
 800a99c:	f362 4017 	bfi	r0, r2, #16, #8
 800a9a0:	f363 601f 	bfi	r0, r3, #24, #8
 800a9a4:	b003      	add	sp, #12
 800a9a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9aa:	4770      	bx	lr
 800a9ac:	4b12      	ldr	r3, [pc, #72]	; (800a9f8 <ai_platform_runtime_get_version+0xac>)
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	601a      	str	r2, [r3, #0]
 800a9b4:	680b      	ldr	r3, [r1, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d1fc      	bne.n	800a9b4 <ai_platform_runtime_get_version+0x68>
 800a9ba:	4b10      	ldr	r3, [pc, #64]	; (800a9fc <ai_platform_runtime_get_version+0xb0>)
 800a9bc:	4910      	ldr	r1, [pc, #64]	; (800aa00 <ai_platform_runtime_get_version+0xb4>)
 800a9be:	4a11      	ldr	r2, [pc, #68]	; (800aa04 <ai_platform_runtime_get_version+0xb8>)
 800a9c0:	6019      	str	r1, [r3, #0]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d0da      	beq.n	800a97e <ai_platform_runtime_get_version+0x32>
 800a9c8:	e7fe      	b.n	800a9c8 <ai_platform_runtime_get_version+0x7c>
 800a9ca:	4b0f      	ldr	r3, [pc, #60]	; (800aa08 <ai_platform_runtime_get_version+0xbc>)
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	601a      	str	r2, [r3, #0]
 800a9d2:	680b      	ldr	r3, [r1, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d1fc      	bne.n	800a9d2 <ai_platform_runtime_get_version+0x86>
 800a9d8:	4b0c      	ldr	r3, [pc, #48]	; (800aa0c <ai_platform_runtime_get_version+0xc0>)
 800a9da:	4909      	ldr	r1, [pc, #36]	; (800aa00 <ai_platform_runtime_get_version+0xb4>)
 800a9dc:	4a09      	ldr	r2, [pc, #36]	; (800aa04 <ai_platform_runtime_get_version+0xb8>)
 800a9de:	6019      	str	r1, [r3, #0]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d0cb      	beq.n	800a97e <ai_platform_runtime_get_version+0x32>
 800a9e6:	e7fe      	b.n	800a9e6 <ai_platform_runtime_get_version+0x9a>
 800a9e8:	e0002000 	.word	0xe0002000
 800a9ec:	e0042000 	.word	0xe0042000
 800a9f0:	5c001000 	.word	0x5c001000
 800a9f4:	0800edc8 	.word	0x0800edc8
 800a9f8:	40023008 	.word	0x40023008
 800a9fc:	40023000 	.word	0x40023000
 800aa00:	f407a5c2 	.word	0xf407a5c2
 800aa04:	b5e8b5cd 	.word	0xb5e8b5cd
 800aa08:	58024c08 	.word	0x58024c08
 800aa0c:	58024c00 	.word	0x58024c00

0800aa10 <ai_platform_api_get_version>:
 800aa10:	4a26      	ldr	r2, [pc, #152]	; (800aaac <ai_platform_api_get_version+0x9c>)
 800aa12:	4927      	ldr	r1, [pc, #156]	; (800aab0 <ai_platform_api_get_version+0xa0>)
 800aa14:	6813      	ldr	r3, [r2, #0]
 800aa16:	f023 0301 	bic.w	r3, r3, #1
 800aa1a:	6013      	str	r3, [r2, #0]
 800aa1c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800aa20:	680b      	ldr	r3, [r1, #0]
 800aa22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa26:	189a      	adds	r2, r3, r2
 800aa28:	2a01      	cmp	r2, #1
 800aa2a:	d921      	bls.n	800aa70 <ai_platform_api_get_version+0x60>
 800aa2c:	f240 4249 	movw	r2, #1097	; 0x449
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d01d      	beq.n	800aa70 <ai_platform_api_get_version+0x60>
 800aa34:	4b1f      	ldr	r3, [pc, #124]	; (800aab4 <ai_platform_api_get_version+0xa4>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa3c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800aa40:	d025      	beq.n	800aa8e <ai_platform_api_get_version+0x7e>
 800aa42:	4b1d      	ldr	r3, [pc, #116]	; (800aab8 <ai_platform_api_get_version+0xa8>)
 800aa44:	2000      	movs	r0, #0
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	b410      	push	{r4}
 800aa4a:	b2dc      	uxtb	r4, r3
 800aa4c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800aa50:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800aa54:	0e1b      	lsrs	r3, r3, #24
 800aa56:	f364 0007 	bfi	r0, r4, #0, #8
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	f361 200f 	bfi	r0, r1, #8, #8
 800aa60:	f362 4017 	bfi	r0, r2, #16, #8
 800aa64:	f363 601f 	bfi	r0, r3, #24, #8
 800aa68:	b003      	add	sp, #12
 800aa6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa6e:	4770      	bx	lr
 800aa70:	4b12      	ldr	r3, [pc, #72]	; (800aabc <ai_platform_api_get_version+0xac>)
 800aa72:	2201      	movs	r2, #1
 800aa74:	4619      	mov	r1, r3
 800aa76:	601a      	str	r2, [r3, #0]
 800aa78:	680b      	ldr	r3, [r1, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d1fc      	bne.n	800aa78 <ai_platform_api_get_version+0x68>
 800aa7e:	4b10      	ldr	r3, [pc, #64]	; (800aac0 <ai_platform_api_get_version+0xb0>)
 800aa80:	4910      	ldr	r1, [pc, #64]	; (800aac4 <ai_platform_api_get_version+0xb4>)
 800aa82:	4a11      	ldr	r2, [pc, #68]	; (800aac8 <ai_platform_api_get_version+0xb8>)
 800aa84:	6019      	str	r1, [r3, #0]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d0da      	beq.n	800aa42 <ai_platform_api_get_version+0x32>
 800aa8c:	e7fe      	b.n	800aa8c <ai_platform_api_get_version+0x7c>
 800aa8e:	4b0f      	ldr	r3, [pc, #60]	; (800aacc <ai_platform_api_get_version+0xbc>)
 800aa90:	2201      	movs	r2, #1
 800aa92:	4619      	mov	r1, r3
 800aa94:	601a      	str	r2, [r3, #0]
 800aa96:	680b      	ldr	r3, [r1, #0]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d1fc      	bne.n	800aa96 <ai_platform_api_get_version+0x86>
 800aa9c:	4b0c      	ldr	r3, [pc, #48]	; (800aad0 <ai_platform_api_get_version+0xc0>)
 800aa9e:	4909      	ldr	r1, [pc, #36]	; (800aac4 <ai_platform_api_get_version+0xb4>)
 800aaa0:	4a09      	ldr	r2, [pc, #36]	; (800aac8 <ai_platform_api_get_version+0xb8>)
 800aaa2:	6019      	str	r1, [r3, #0]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d0cb      	beq.n	800aa42 <ai_platform_api_get_version+0x32>
 800aaaa:	e7fe      	b.n	800aaaa <ai_platform_api_get_version+0x9a>
 800aaac:	e0002000 	.word	0xe0002000
 800aab0:	e0042000 	.word	0xe0042000
 800aab4:	5c001000 	.word	0x5c001000
 800aab8:	0800edcc 	.word	0x0800edcc
 800aabc:	40023008 	.word	0x40023008
 800aac0:	40023000 	.word	0x40023000
 800aac4:	f407a5c2 	.word	0xf407a5c2
 800aac8:	b5e8b5cd 	.word	0xb5e8b5cd
 800aacc:	58024c08 	.word	0x58024c08
 800aad0:	58024c00 	.word	0x58024c00

0800aad4 <ai_platform_interface_api_get_version>:
 800aad4:	4a26      	ldr	r2, [pc, #152]	; (800ab70 <ai_platform_interface_api_get_version+0x9c>)
 800aad6:	4927      	ldr	r1, [pc, #156]	; (800ab74 <ai_platform_interface_api_get_version+0xa0>)
 800aad8:	6813      	ldr	r3, [r2, #0]
 800aada:	f023 0301 	bic.w	r3, r3, #1
 800aade:	6013      	str	r3, [r2, #0]
 800aae0:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800aae4:	680b      	ldr	r3, [r1, #0]
 800aae6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aaea:	189a      	adds	r2, r3, r2
 800aaec:	2a01      	cmp	r2, #1
 800aaee:	d921      	bls.n	800ab34 <ai_platform_interface_api_get_version+0x60>
 800aaf0:	f240 4249 	movw	r2, #1097	; 0x449
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d01d      	beq.n	800ab34 <ai_platform_interface_api_get_version+0x60>
 800aaf8:	4b1f      	ldr	r3, [pc, #124]	; (800ab78 <ai_platform_interface_api_get_version+0xa4>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ab00:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ab04:	d025      	beq.n	800ab52 <ai_platform_interface_api_get_version+0x7e>
 800ab06:	4b1d      	ldr	r3, [pc, #116]	; (800ab7c <ai_platform_interface_api_get_version+0xa8>)
 800ab08:	2000      	movs	r0, #0
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	b410      	push	{r4}
 800ab0e:	b2dc      	uxtb	r4, r3
 800ab10:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ab14:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ab18:	0e1b      	lsrs	r3, r3, #24
 800ab1a:	f364 0007 	bfi	r0, r4, #0, #8
 800ab1e:	b083      	sub	sp, #12
 800ab20:	f361 200f 	bfi	r0, r1, #8, #8
 800ab24:	f362 4017 	bfi	r0, r2, #16, #8
 800ab28:	f363 601f 	bfi	r0, r3, #24, #8
 800ab2c:	b003      	add	sp, #12
 800ab2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab32:	4770      	bx	lr
 800ab34:	4b12      	ldr	r3, [pc, #72]	; (800ab80 <ai_platform_interface_api_get_version+0xac>)
 800ab36:	2201      	movs	r2, #1
 800ab38:	4619      	mov	r1, r3
 800ab3a:	601a      	str	r2, [r3, #0]
 800ab3c:	680b      	ldr	r3, [r1, #0]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d1fc      	bne.n	800ab3c <ai_platform_interface_api_get_version+0x68>
 800ab42:	4b10      	ldr	r3, [pc, #64]	; (800ab84 <ai_platform_interface_api_get_version+0xb0>)
 800ab44:	4910      	ldr	r1, [pc, #64]	; (800ab88 <ai_platform_interface_api_get_version+0xb4>)
 800ab46:	4a11      	ldr	r2, [pc, #68]	; (800ab8c <ai_platform_interface_api_get_version+0xb8>)
 800ab48:	6019      	str	r1, [r3, #0]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d0da      	beq.n	800ab06 <ai_platform_interface_api_get_version+0x32>
 800ab50:	e7fe      	b.n	800ab50 <ai_platform_interface_api_get_version+0x7c>
 800ab52:	4b0f      	ldr	r3, [pc, #60]	; (800ab90 <ai_platform_interface_api_get_version+0xbc>)
 800ab54:	2201      	movs	r2, #1
 800ab56:	4619      	mov	r1, r3
 800ab58:	601a      	str	r2, [r3, #0]
 800ab5a:	680b      	ldr	r3, [r1, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d1fc      	bne.n	800ab5a <ai_platform_interface_api_get_version+0x86>
 800ab60:	4b0c      	ldr	r3, [pc, #48]	; (800ab94 <ai_platform_interface_api_get_version+0xc0>)
 800ab62:	4909      	ldr	r1, [pc, #36]	; (800ab88 <ai_platform_interface_api_get_version+0xb4>)
 800ab64:	4a09      	ldr	r2, [pc, #36]	; (800ab8c <ai_platform_interface_api_get_version+0xb8>)
 800ab66:	6019      	str	r1, [r3, #0]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d0cb      	beq.n	800ab06 <ai_platform_interface_api_get_version+0x32>
 800ab6e:	e7fe      	b.n	800ab6e <ai_platform_interface_api_get_version+0x9a>
 800ab70:	e0002000 	.word	0xe0002000
 800ab74:	e0042000 	.word	0xe0042000
 800ab78:	5c001000 	.word	0x5c001000
 800ab7c:	0800edd0 	.word	0x0800edd0
 800ab80:	40023008 	.word	0x40023008
 800ab84:	40023000 	.word	0x40023000
 800ab88:	f407a5c2 	.word	0xf407a5c2
 800ab8c:	b5e8b5cd 	.word	0xb5e8b5cd
 800ab90:	58024c08 	.word	0x58024c08
 800ab94:	58024c00 	.word	0x58024c00

0800ab98 <ai_platform_context_acquire>:
 800ab98:	b120      	cbz	r0, 800aba4 <ai_platform_context_acquire+0xc>
 800ab9a:	4b1e      	ldr	r3, [pc, #120]	; (800ac14 <ai_platform_context_acquire+0x7c>)
 800ab9c:	6802      	ldr	r2, [r0, #0]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	bf18      	it	ne
 800aba2:	2000      	movne	r0, #0
 800aba4:	4a1c      	ldr	r2, [pc, #112]	; (800ac18 <ai_platform_context_acquire+0x80>)
 800aba6:	491d      	ldr	r1, [pc, #116]	; (800ac1c <ai_platform_context_acquire+0x84>)
 800aba8:	6813      	ldr	r3, [r2, #0]
 800abaa:	f023 0301 	bic.w	r3, r3, #1
 800abae:	6013      	str	r3, [r2, #0]
 800abb0:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800abb4:	680b      	ldr	r3, [r1, #0]
 800abb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800abba:	189a      	adds	r2, r3, r2
 800abbc:	2a01      	cmp	r2, #1
 800abbe:	d90b      	bls.n	800abd8 <ai_platform_context_acquire+0x40>
 800abc0:	f240 4249 	movw	r2, #1097	; 0x449
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d007      	beq.n	800abd8 <ai_platform_context_acquire+0x40>
 800abc8:	4b15      	ldr	r3, [pc, #84]	; (800ac20 <ai_platform_context_acquire+0x88>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800abd0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800abd4:	d00f      	beq.n	800abf6 <ai_platform_context_acquire+0x5e>
 800abd6:	4770      	bx	lr
 800abd8:	4b12      	ldr	r3, [pc, #72]	; (800ac24 <ai_platform_context_acquire+0x8c>)
 800abda:	2201      	movs	r2, #1
 800abdc:	4619      	mov	r1, r3
 800abde:	601a      	str	r2, [r3, #0]
 800abe0:	680b      	ldr	r3, [r1, #0]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d1fc      	bne.n	800abe0 <ai_platform_context_acquire+0x48>
 800abe6:	4b10      	ldr	r3, [pc, #64]	; (800ac28 <ai_platform_context_acquire+0x90>)
 800abe8:	4910      	ldr	r1, [pc, #64]	; (800ac2c <ai_platform_context_acquire+0x94>)
 800abea:	4a11      	ldr	r2, [pc, #68]	; (800ac30 <ai_platform_context_acquire+0x98>)
 800abec:	6019      	str	r1, [r3, #0]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d0f0      	beq.n	800abd6 <ai_platform_context_acquire+0x3e>
 800abf4:	e7fe      	b.n	800abf4 <ai_platform_context_acquire+0x5c>
 800abf6:	4b0f      	ldr	r3, [pc, #60]	; (800ac34 <ai_platform_context_acquire+0x9c>)
 800abf8:	2201      	movs	r2, #1
 800abfa:	4619      	mov	r1, r3
 800abfc:	601a      	str	r2, [r3, #0]
 800abfe:	680b      	ldr	r3, [r1, #0]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d1fc      	bne.n	800abfe <ai_platform_context_acquire+0x66>
 800ac04:	4b0c      	ldr	r3, [pc, #48]	; (800ac38 <ai_platform_context_acquire+0xa0>)
 800ac06:	4909      	ldr	r1, [pc, #36]	; (800ac2c <ai_platform_context_acquire+0x94>)
 800ac08:	4a09      	ldr	r2, [pc, #36]	; (800ac30 <ai_platform_context_acquire+0x98>)
 800ac0a:	6019      	str	r1, [r3, #0]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d0e1      	beq.n	800abd6 <ai_platform_context_acquire+0x3e>
 800ac12:	e7fe      	b.n	800ac12 <ai_platform_context_acquire+0x7a>
 800ac14:	a1c00100 	.word	0xa1c00100
 800ac18:	e0002000 	.word	0xe0002000
 800ac1c:	e0042000 	.word	0xe0042000
 800ac20:	5c001000 	.word	0x5c001000
 800ac24:	40023008 	.word	0x40023008
 800ac28:	40023000 	.word	0x40023000
 800ac2c:	f407a5c2 	.word	0xf407a5c2
 800ac30:	b5e8b5cd 	.word	0xb5e8b5cd
 800ac34:	58024c08 	.word	0x58024c08
 800ac38:	58024c00 	.word	0x58024c00

0800ac3c <ai_platform_network_get_error>:
 800ac3c:	b118      	cbz	r0, 800ac46 <ai_platform_network_get_error+0xa>
 800ac3e:	4b3c      	ldr	r3, [pc, #240]	; (800ad30 <ai_platform_network_get_error+0xf4>)
 800ac40:	6802      	ldr	r2, [r0, #0]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d02a      	beq.n	800ac9c <ai_platform_network_get_error+0x60>
 800ac46:	4a3b      	ldr	r2, [pc, #236]	; (800ad34 <ai_platform_network_get_error+0xf8>)
 800ac48:	493b      	ldr	r1, [pc, #236]	; (800ad38 <ai_platform_network_get_error+0xfc>)
 800ac4a:	6813      	ldr	r3, [r2, #0]
 800ac4c:	f023 0301 	bic.w	r3, r3, #1
 800ac50:	6013      	str	r3, [r2, #0]
 800ac52:	680b      	ldr	r3, [r1, #0]
 800ac54:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800ac58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ac5c:	185a      	adds	r2, r3, r1
 800ac5e:	2a01      	cmp	r2, #1
 800ac60:	d90d      	bls.n	800ac7e <ai_platform_network_get_error+0x42>
 800ac62:	f240 4249 	movw	r2, #1097	; 0x449
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d009      	beq.n	800ac7e <ai_platform_network_get_error+0x42>
 800ac6a:	4b34      	ldr	r3, [pc, #208]	; (800ad3c <ai_platform_network_get_error+0x100>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ac72:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ac76:	d02d      	beq.n	800acd4 <ai_platform_network_get_error+0x98>
 800ac78:	f241 0010 	movw	r0, #4112	; 0x1010
 800ac7c:	4770      	bx	lr
 800ac7e:	4b30      	ldr	r3, [pc, #192]	; (800ad40 <ai_platform_network_get_error+0x104>)
 800ac80:	2201      	movs	r2, #1
 800ac82:	4619      	mov	r1, r3
 800ac84:	601a      	str	r2, [r3, #0]
 800ac86:	680b      	ldr	r3, [r1, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d1fc      	bne.n	800ac86 <ai_platform_network_get_error+0x4a>
 800ac8c:	4b2d      	ldr	r3, [pc, #180]	; (800ad44 <ai_platform_network_get_error+0x108>)
 800ac8e:	492e      	ldr	r1, [pc, #184]	; (800ad48 <ai_platform_network_get_error+0x10c>)
 800ac90:	4a2e      	ldr	r2, [pc, #184]	; (800ad4c <ai_platform_network_get_error+0x110>)
 800ac92:	6019      	str	r1, [r3, #0]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d0ee      	beq.n	800ac78 <ai_platform_network_get_error+0x3c>
 800ac9a:	e7fe      	b.n	800ac9a <ai_platform_network_get_error+0x5e>
 800ac9c:	4a25      	ldr	r2, [pc, #148]	; (800ad34 <ai_platform_network_get_error+0xf8>)
 800ac9e:	4926      	ldr	r1, [pc, #152]	; (800ad38 <ai_platform_network_get_error+0xfc>)
 800aca0:	6813      	ldr	r3, [r2, #0]
 800aca2:	f023 0301 	bic.w	r3, r3, #1
 800aca6:	6013      	str	r3, [r2, #0]
 800aca8:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800acac:	680b      	ldr	r3, [r1, #0]
 800acae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800acb2:	189a      	adds	r2, r3, r2
 800acb4:	2a01      	cmp	r2, #1
 800acb6:	d92b      	bls.n	800ad10 <ai_platform_network_get_error+0xd4>
 800acb8:	f240 4249 	movw	r2, #1097	; 0x449
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d027      	beq.n	800ad10 <ai_platform_network_get_error+0xd4>
 800acc0:	4b1e      	ldr	r3, [pc, #120]	; (800ad3c <ai_platform_network_get_error+0x100>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800acc8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800accc:	d011      	beq.n	800acf2 <ai_platform_network_get_error+0xb6>
 800acce:	3010      	adds	r0, #16
 800acd0:	f001 ba4e 	b.w	800c170 <core_get_error>
 800acd4:	4b1e      	ldr	r3, [pc, #120]	; (800ad50 <ai_platform_network_get_error+0x114>)
 800acd6:	2201      	movs	r2, #1
 800acd8:	4619      	mov	r1, r3
 800acda:	601a      	str	r2, [r3, #0]
 800acdc:	680b      	ldr	r3, [r1, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d1fc      	bne.n	800acdc <ai_platform_network_get_error+0xa0>
 800ace2:	4b1c      	ldr	r3, [pc, #112]	; (800ad54 <ai_platform_network_get_error+0x118>)
 800ace4:	4918      	ldr	r1, [pc, #96]	; (800ad48 <ai_platform_network_get_error+0x10c>)
 800ace6:	4a19      	ldr	r2, [pc, #100]	; (800ad4c <ai_platform_network_get_error+0x110>)
 800ace8:	6019      	str	r1, [r3, #0]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4293      	cmp	r3, r2
 800acee:	d0c3      	beq.n	800ac78 <ai_platform_network_get_error+0x3c>
 800acf0:	e7fe      	b.n	800acf0 <ai_platform_network_get_error+0xb4>
 800acf2:	4b17      	ldr	r3, [pc, #92]	; (800ad50 <ai_platform_network_get_error+0x114>)
 800acf4:	2201      	movs	r2, #1
 800acf6:	4619      	mov	r1, r3
 800acf8:	601a      	str	r2, [r3, #0]
 800acfa:	680b      	ldr	r3, [r1, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d1fc      	bne.n	800acfa <ai_platform_network_get_error+0xbe>
 800ad00:	4b14      	ldr	r3, [pc, #80]	; (800ad54 <ai_platform_network_get_error+0x118>)
 800ad02:	4911      	ldr	r1, [pc, #68]	; (800ad48 <ai_platform_network_get_error+0x10c>)
 800ad04:	4a11      	ldr	r2, [pc, #68]	; (800ad4c <ai_platform_network_get_error+0x110>)
 800ad06:	6019      	str	r1, [r3, #0]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d0df      	beq.n	800acce <ai_platform_network_get_error+0x92>
 800ad0e:	e7fe      	b.n	800ad0e <ai_platform_network_get_error+0xd2>
 800ad10:	4b0b      	ldr	r3, [pc, #44]	; (800ad40 <ai_platform_network_get_error+0x104>)
 800ad12:	2201      	movs	r2, #1
 800ad14:	4619      	mov	r1, r3
 800ad16:	601a      	str	r2, [r3, #0]
 800ad18:	680b      	ldr	r3, [r1, #0]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1fc      	bne.n	800ad18 <ai_platform_network_get_error+0xdc>
 800ad1e:	4b09      	ldr	r3, [pc, #36]	; (800ad44 <ai_platform_network_get_error+0x108>)
 800ad20:	4909      	ldr	r1, [pc, #36]	; (800ad48 <ai_platform_network_get_error+0x10c>)
 800ad22:	4a0a      	ldr	r2, [pc, #40]	; (800ad4c <ai_platform_network_get_error+0x110>)
 800ad24:	6019      	str	r1, [r3, #0]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d0d0      	beq.n	800acce <ai_platform_network_get_error+0x92>
 800ad2c:	e7fe      	b.n	800ad2c <ai_platform_network_get_error+0xf0>
 800ad2e:	bf00      	nop
 800ad30:	a1c00100 	.word	0xa1c00100
 800ad34:	e0002000 	.word	0xe0002000
 800ad38:	e0042000 	.word	0xe0042000
 800ad3c:	5c001000 	.word	0x5c001000
 800ad40:	40023008 	.word	0x40023008
 800ad44:	40023000 	.word	0x40023000
 800ad48:	f407a5c2 	.word	0xf407a5c2
 800ad4c:	b5e8b5cd 	.word	0xb5e8b5cd
 800ad50:	58024c08 	.word	0x58024c08
 800ad54:	58024c00 	.word	0x58024c00

0800ad58 <ai_platform_api_get_network_report>:
 800ad58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5c:	460c      	mov	r4, r1
 800ad5e:	b085      	sub	sp, #20
 800ad60:	4605      	mov	r5, r0
 800ad62:	b120      	cbz	r0, 800ad6e <ai_platform_api_get_network_report+0x16>
 800ad64:	4ba7      	ldr	r3, [pc, #668]	; (800b004 <ai_platform_api_get_network_report+0x2ac>)
 800ad66:	6802      	ldr	r2, [r0, #0]
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	bf18      	it	ne
 800ad6c:	2500      	movne	r5, #0
 800ad6e:	4aa6      	ldr	r2, [pc, #664]	; (800b008 <ai_platform_api_get_network_report+0x2b0>)
 800ad70:	f46f 668a 	mvn.w	r6, #1104	; 0x450
 800ad74:	49a5      	ldr	r1, [pc, #660]	; (800b00c <ai_platform_api_get_network_report+0x2b4>)
 800ad76:	6813      	ldr	r3, [r2, #0]
 800ad78:	f023 0301 	bic.w	r3, r3, #1
 800ad7c:	6013      	str	r3, [r2, #0]
 800ad7e:	680b      	ldr	r3, [r1, #0]
 800ad80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ad84:	199a      	adds	r2, r3, r6
 800ad86:	2a01      	cmp	r2, #1
 800ad88:	f240 8090 	bls.w	800aeac <ai_platform_api_get_network_report+0x154>
 800ad8c:	f240 4249 	movw	r2, #1097	; 0x449
 800ad90:	4293      	cmp	r3, r2
 800ad92:	f000 808b 	beq.w	800aeac <ai_platform_api_get_network_report+0x154>
 800ad96:	4b9e      	ldr	r3, [pc, #632]	; (800b010 <ai_platform_api_get_network_report+0x2b8>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ad9e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ada2:	d073      	beq.n	800ae8c <ai_platform_api_get_network_report+0x134>
 800ada4:	2d00      	cmp	r5, #0
 800ada6:	f000 8091 	beq.w	800aecc <ai_platform_api_get_network_report+0x174>
 800adaa:	fab4 f384 	clz	r3, r4
 800adae:	095b      	lsrs	r3, r3, #5
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	f040 808b 	bne.w	800aecc <ai_platform_api_get_network_report+0x174>
 800adb6:	66e3      	str	r3, [r4, #108]	; 0x6c
 800adb8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800adba:	2a00      	cmp	r2, #0
 800adbc:	f000 810f 	beq.w	800afde <ai_platform_api_get_network_report+0x286>
 800adc0:	2301      	movs	r3, #1
 800adc2:	66e3      	str	r3, [r4, #108]	; 0x6c
 800adc4:	68d3      	ldr	r3, [r2, #12]
 800adc6:	b193      	cbz	r3, 800adee <ai_platform_api_get_network_report+0x96>
 800adc8:	429a      	cmp	r2, r3
 800adca:	d010      	beq.n	800adee <ai_platform_api_get_network_report+0x96>
 800adcc:	2202      	movs	r2, #2
 800adce:	66e2      	str	r2, [r4, #108]	; 0x6c
 800add0:	3201      	adds	r2, #1
 800add2:	68d9      	ldr	r1, [r3, #12]
 800add4:	4299      	cmp	r1, r3
 800add6:	bf18      	it	ne
 800add8:	2900      	cmpne	r1, #0
 800adda:	460b      	mov	r3, r1
 800addc:	bf14      	ite	ne
 800adde:	2001      	movne	r0, #1
 800ade0:	2000      	moveq	r0, #0
 800ade2:	2800      	cmp	r0, #0
 800ade4:	d1f3      	bne.n	800adce <ai_platform_api_get_network_report+0x76>
 800ade6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ade8:	2b00      	cmp	r3, #0
 800adea:	f000 80f8 	beq.w	800afde <ai_platform_api_get_network_report+0x286>
 800adee:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	f000 80e7 	beq.w	800afc6 <ai_platform_api_get_network_report+0x26e>
 800adf8:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800adfa:	2f00      	cmp	r7, #0
 800adfc:	f000 80e3 	beq.w	800afc6 <ai_platform_api_get_network_report+0x26e>
 800ae00:	883b      	ldrh	r3, [r7, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	f000 80df 	beq.w	800afc6 <ai_platform_api_get_network_report+0x26e>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f000 80db 	beq.w	800afc6 <ai_platform_api_get_network_report+0x26e>
 800ae10:	681e      	ldr	r6, [r3, #0]
 800ae12:	2e00      	cmp	r6, #0
 800ae14:	f000 80d7 	beq.w	800afc6 <ai_platform_api_get_network_report+0x26e>
 800ae18:	f04f 0901 	mov.w	r9, #1
 800ae1c:	f04f 0800 	mov.w	r8, #0
 800ae20:	464b      	mov	r3, r9
 800ae22:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800ae26:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 800ae2a:	69b0      	ldr	r0, [r6, #24]
 800ae2c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ae30:	6800      	ldr	r0, [r0, #0]
 800ae32:	eb01 0a02 	add.w	sl, r1, r2
 800ae36:	9303      	str	r3, [sp, #12]
 800ae38:	f8dc b008 	ldr.w	fp, [ip, #8]
 800ae3c:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800ae40:	f001 ffe4 	bl	800ce0c <ai_array_to_buffer_fmt>
 800ae44:	9b03      	ldr	r3, [sp, #12]
 800ae46:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 800ae4a:	5088      	str	r0, [r1, r2]
 800ae4c:	eb0b 0108 	add.w	r1, fp, r8
 800ae50:	f8aa 3004 	strh.w	r3, [sl, #4]
 800ae54:	68f2      	ldr	r2, [r6, #12]
 800ae56:	68d2      	ldr	r2, [r2, #12]
 800ae58:	f8aa 2006 	strh.w	r2, [sl, #6]
 800ae5c:	68f2      	ldr	r2, [r6, #12]
 800ae5e:	6892      	ldr	r2, [r2, #8]
 800ae60:	f8aa 2008 	strh.w	r2, [sl, #8]
 800ae64:	68f2      	ldr	r2, [r6, #12]
 800ae66:	6852      	ldr	r2, [r2, #4]
 800ae68:	f8ca 200c 	str.w	r2, [sl, #12]
 800ae6c:	69b2      	ldr	r2, [r6, #24]
 800ae6e:	6892      	ldr	r2, [r2, #8]
 800ae70:	f8ca 2010 	str.w	r2, [sl, #16]
 800ae74:	2900      	cmp	r1, #0
 800ae76:	d02d      	beq.n	800aed4 <ai_platform_api_get_network_report+0x17c>
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f84b 2008 	str.w	r2, [fp, r8]
 800ae7e:	6832      	ldr	r2, [r6, #0]
 800ae80:	604a      	str	r2, [r1, #4]
 800ae82:	b33a      	cbz	r2, 800aed4 <ai_platform_api_get_network_report+0x17c>
 800ae84:	8852      	ldrh	r2, [r2, #2]
 800ae86:	b32a      	cbz	r2, 800aed4 <ai_platform_api_get_network_report+0x17c>
 800ae88:	600b      	str	r3, [r1, #0]
 800ae8a:	e024      	b.n	800aed6 <ai_platform_api_get_network_report+0x17e>
 800ae8c:	4b61      	ldr	r3, [pc, #388]	; (800b014 <ai_platform_api_get_network_report+0x2bc>)
 800ae8e:	2201      	movs	r2, #1
 800ae90:	4619      	mov	r1, r3
 800ae92:	601a      	str	r2, [r3, #0]
 800ae94:	680b      	ldr	r3, [r1, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d1fc      	bne.n	800ae94 <ai_platform_api_get_network_report+0x13c>
 800ae9a:	4b5f      	ldr	r3, [pc, #380]	; (800b018 <ai_platform_api_get_network_report+0x2c0>)
 800ae9c:	495f      	ldr	r1, [pc, #380]	; (800b01c <ai_platform_api_get_network_report+0x2c4>)
 800ae9e:	4a60      	ldr	r2, [pc, #384]	; (800b020 <ai_platform_api_get_network_report+0x2c8>)
 800aea0:	6019      	str	r1, [r3, #0]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4293      	cmp	r3, r2
 800aea6:	f43f af7d 	beq.w	800ada4 <ai_platform_api_get_network_report+0x4c>
 800aeaa:	e7fe      	b.n	800aeaa <ai_platform_api_get_network_report+0x152>
 800aeac:	4b5d      	ldr	r3, [pc, #372]	; (800b024 <ai_platform_api_get_network_report+0x2cc>)
 800aeae:	2201      	movs	r2, #1
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	601a      	str	r2, [r3, #0]
 800aeb4:	680b      	ldr	r3, [r1, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d1fc      	bne.n	800aeb4 <ai_platform_api_get_network_report+0x15c>
 800aeba:	4b5b      	ldr	r3, [pc, #364]	; (800b028 <ai_platform_api_get_network_report+0x2d0>)
 800aebc:	4957      	ldr	r1, [pc, #348]	; (800b01c <ai_platform_api_get_network_report+0x2c4>)
 800aebe:	4a58      	ldr	r2, [pc, #352]	; (800b020 <ai_platform_api_get_network_report+0x2c8>)
 800aec0:	6019      	str	r1, [r3, #0]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4293      	cmp	r3, r2
 800aec6:	f43f af6d 	beq.w	800ada4 <ai_platform_api_get_network_report+0x4c>
 800aeca:	e7fe      	b.n	800aeca <ai_platform_api_get_network_report+0x172>
 800aecc:	2000      	movs	r0, #0
 800aece:	b005      	add	sp, #20
 800aed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aed4:	2100      	movs	r1, #0
 800aed6:	f8ca 1014 	str.w	r1, [sl, #20]
 800aeda:	fa1f f289 	uxth.w	r2, r9
 800aede:	8839      	ldrh	r1, [r7, #0]
 800aee0:	f108 0808 	add.w	r8, r8, #8
 800aee4:	4589      	cmp	r9, r1
 800aee6:	d207      	bcs.n	800aef8 <ai_platform_api_get_network_report+0x1a0>
 800aee8:	6879      	ldr	r1, [r7, #4]
 800aeea:	b129      	cbz	r1, 800aef8 <ai_platform_api_get_network_report+0x1a0>
 800aeec:	f851 6029 	ldr.w	r6, [r1, r9, lsl #2]
 800aef0:	f109 0901 	add.w	r9, r9, #1
 800aef4:	2e00      	cmp	r6, #0
 800aef6:	d194      	bne.n	800ae22 <ai_platform_api_get_network_report+0xca>
 800aef8:	2a00      	cmp	r2, #0
 800aefa:	d064      	beq.n	800afc6 <ai_platform_api_get_network_report+0x26e>
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	8622      	strh	r2, [r4, #48]	; 0x30
 800af02:	6363      	str	r3, [r4, #52]	; 0x34
 800af04:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d970      	bls.n	800afee <ai_platform_api_get_network_report+0x296>
 800af0c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800af0e:	f117 0f0c 	cmn.w	r7, #12
 800af12:	d06c      	beq.n	800afee <ai_platform_api_get_network_report+0x296>
 800af14:	89bb      	ldrh	r3, [r7, #12]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d069      	beq.n	800afee <ai_platform_api_get_network_report+0x296>
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d066      	beq.n	800afee <ai_platform_api_get_network_report+0x296>
 800af20:	681e      	ldr	r6, [r3, #0]
 800af22:	2e00      	cmp	r6, #0
 800af24:	d063      	beq.n	800afee <ai_platform_api_get_network_report+0x296>
 800af26:	f04f 0901 	mov.w	r9, #1
 800af2a:	f04f 0800 	mov.w	r8, #0
 800af2e:	464b      	mov	r3, r9
 800af30:	e01c      	b.n	800af6c <ai_platform_api_get_network_report+0x214>
 800af32:	2200      	movs	r2, #0
 800af34:	f84b 2008 	str.w	r2, [fp, r8]
 800af38:	6832      	ldr	r2, [r6, #0]
 800af3a:	604a      	str	r2, [r1, #4]
 800af3c:	2a00      	cmp	r2, #0
 800af3e:	d040      	beq.n	800afc2 <ai_platform_api_get_network_report+0x26a>
 800af40:	8852      	ldrh	r2, [r2, #2]
 800af42:	2a00      	cmp	r2, #0
 800af44:	d03d      	beq.n	800afc2 <ai_platform_api_get_network_report+0x26a>
 800af46:	600b      	str	r3, [r1, #0]
 800af48:	f8ca 1014 	str.w	r1, [sl, #20]
 800af4c:	fa1f f289 	uxth.w	r2, r9
 800af50:	89b9      	ldrh	r1, [r7, #12]
 800af52:	f108 0808 	add.w	r8, r8, #8
 800af56:	4589      	cmp	r9, r1
 800af58:	d268      	bcs.n	800b02c <ai_platform_api_get_network_report+0x2d4>
 800af5a:	6939      	ldr	r1, [r7, #16]
 800af5c:	2900      	cmp	r1, #0
 800af5e:	d065      	beq.n	800b02c <ai_platform_api_get_network_report+0x2d4>
 800af60:	f851 6029 	ldr.w	r6, [r1, r9, lsl #2]
 800af64:	f109 0901 	add.w	r9, r9, #1
 800af68:	2e00      	cmp	r6, #0
 800af6a:	d05f      	beq.n	800b02c <ai_platform_api_get_network_report+0x2d4>
 800af6c:	f8d7 c014 	ldr.w	ip, [r7, #20]
 800af70:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 800af74:	69b0      	ldr	r0, [r6, #24]
 800af76:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800af7a:	6800      	ldr	r0, [r0, #0]
 800af7c:	eb01 0a02 	add.w	sl, r1, r2
 800af80:	9303      	str	r3, [sp, #12]
 800af82:	f8dc b008 	ldr.w	fp, [ip, #8]
 800af86:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800af8a:	f001 ff3f 	bl	800ce0c <ai_array_to_buffer_fmt>
 800af8e:	9b03      	ldr	r3, [sp, #12]
 800af90:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 800af94:	5088      	str	r0, [r1, r2]
 800af96:	eb0b 0108 	add.w	r1, fp, r8
 800af9a:	f8aa 3004 	strh.w	r3, [sl, #4]
 800af9e:	68f2      	ldr	r2, [r6, #12]
 800afa0:	68d2      	ldr	r2, [r2, #12]
 800afa2:	f8aa 2006 	strh.w	r2, [sl, #6]
 800afa6:	68f2      	ldr	r2, [r6, #12]
 800afa8:	6892      	ldr	r2, [r2, #8]
 800afaa:	f8aa 2008 	strh.w	r2, [sl, #8]
 800afae:	68f2      	ldr	r2, [r6, #12]
 800afb0:	6852      	ldr	r2, [r2, #4]
 800afb2:	f8ca 200c 	str.w	r2, [sl, #12]
 800afb6:	69b2      	ldr	r2, [r6, #24]
 800afb8:	6892      	ldr	r2, [r2, #8]
 800afba:	f8ca 2010 	str.w	r2, [sl, #16]
 800afbe:	2900      	cmp	r1, #0
 800afc0:	d1b7      	bne.n	800af32 <ai_platform_api_get_network_report+0x1da>
 800afc2:	2100      	movs	r1, #0
 800afc4:	e7c0      	b.n	800af48 <ai_platform_api_get_network_report+0x1f0>
 800afc6:	2600      	movs	r6, #0
 800afc8:	f105 0010 	add.w	r0, r5, #16
 800afcc:	2218      	movs	r2, #24
 800afce:	2112      	movs	r1, #18
 800afd0:	8626      	strh	r6, [r4, #48]	; 0x30
 800afd2:	f001 f8d3 	bl	800c17c <core_set_error>
 800afd6:	4630      	mov	r0, r6
 800afd8:	b005      	add	sp, #20
 800afda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afde:	f105 0010 	add.w	r0, r5, #16
 800afe2:	2218      	movs	r2, #24
 800afe4:	2111      	movs	r1, #17
 800afe6:	f001 f8c9 	bl	800c17c <core_set_error>
 800afea:	2000      	movs	r0, #0
 800afec:	e76f      	b.n	800aece <ai_platform_api_get_network_report+0x176>
 800afee:	2600      	movs	r6, #0
 800aff0:	f105 0010 	add.w	r0, r5, #16
 800aff4:	2218      	movs	r2, #24
 800aff6:	2113      	movs	r1, #19
 800aff8:	8666      	strh	r6, [r4, #50]	; 0x32
 800affa:	f001 f8bf 	bl	800c17c <core_set_error>
 800affe:	4630      	mov	r0, r6
 800b000:	e765      	b.n	800aece <ai_platform_api_get_network_report+0x176>
 800b002:	bf00      	nop
 800b004:	a1c00100 	.word	0xa1c00100
 800b008:	e0002000 	.word	0xe0002000
 800b00c:	e0042000 	.word	0xe0042000
 800b010:	5c001000 	.word	0x5c001000
 800b014:	58024c08 	.word	0x58024c08
 800b018:	58024c00 	.word	0x58024c00
 800b01c:	f407a5c2 	.word	0xf407a5c2
 800b020:	b5e8b5cd 	.word	0xb5e8b5cd
 800b024:	40023008 	.word	0x40023008
 800b028:	40023000 	.word	0x40023000
 800b02c:	2a00      	cmp	r2, #0
 800b02e:	d0de      	beq.n	800afee <ai_platform_api_get_network_report+0x296>
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 800b036:	f104 0c3c 	add.w	ip, r4, #60	; 0x3c
 800b03a:	f105 0718 	add.w	r7, r5, #24
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	f104 0654 	add.w	r6, r4, #84	; 0x54
 800b044:	8662      	strh	r2, [r4, #50]	; 0x32
 800b046:	63a3      	str	r3, [r4, #56]	; 0x38
 800b048:	686b      	ldr	r3, [r5, #4]
 800b04a:	4d80      	ldr	r5, [pc, #512]	; (800b24c <ai_platform_api_get_network_report+0x4f4>)
 800b04c:	6723      	str	r3, [r4, #112]	; 0x70
 800b04e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b052:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b056:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800b05a:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 800b258 <ai_platform_api_get_network_report+0x500>
 800b05e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800b062:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b064:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b066:	e897 0003 	ldmia.w	r7, {r0, r1}
 800b06a:	e886 0003 	stmia.w	r6, {r0, r1}
 800b06e:	682b      	ldr	r3, [r5, #0]
 800b070:	f023 0301 	bic.w	r3, r3, #1
 800b074:	602b      	str	r3, [r5, #0]
 800b076:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 800b07a:	f8de 3000 	ldr.w	r3, [lr]
 800b07e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b082:	195a      	adds	r2, r3, r5
 800b084:	2a01      	cmp	r2, #1
 800b086:	d966      	bls.n	800b156 <ai_platform_api_get_network_report+0x3fe>
 800b088:	f240 4249 	movw	r2, #1097	; 0x449
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d062      	beq.n	800b156 <ai_platform_api_get_network_report+0x3fe>
 800b090:	4b6f      	ldr	r3, [pc, #444]	; (800b250 <ai_platform_api_get_network_report+0x4f8>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b098:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b09c:	f000 80c6 	beq.w	800b22c <ai_platform_api_get_network_report+0x4d4>
 800b0a0:	4a6a      	ldr	r2, [pc, #424]	; (800b24c <ai_platform_api_get_network_report+0x4f4>)
 800b0a2:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 800b0a6:	4b6b      	ldr	r3, [pc, #428]	; (800b254 <ai_platform_api_get_network_report+0x4fc>)
 800b0a8:	496b      	ldr	r1, [pc, #428]	; (800b258 <ai_platform_api_get_network_report+0x500>)
 800b0aa:	6123      	str	r3, [r4, #16]
 800b0ac:	6813      	ldr	r3, [r2, #0]
 800b0ae:	f023 0301 	bic.w	r3, r3, #1
 800b0b2:	6013      	str	r3, [r2, #0]
 800b0b4:	680b      	ldr	r3, [r1, #0]
 800b0b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b0ba:	181a      	adds	r2, r3, r0
 800b0bc:	2a01      	cmp	r2, #1
 800b0be:	f240 80a5 	bls.w	800b20c <ai_platform_api_get_network_report+0x4b4>
 800b0c2:	f240 4249 	movw	r2, #1097	; 0x449
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	f000 80a0 	beq.w	800b20c <ai_platform_api_get_network_report+0x4b4>
 800b0cc:	4b60      	ldr	r3, [pc, #384]	; (800b250 <ai_platform_api_get_network_report+0x4f8>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b0d4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b0d8:	f000 8088 	beq.w	800b1ec <ai_platform_api_get_network_report+0x494>
 800b0dc:	4a5b      	ldr	r2, [pc, #364]	; (800b24c <ai_platform_api_get_network_report+0x4f4>)
 800b0de:	f240 1305 	movw	r3, #261	; 0x105
 800b0e2:	495d      	ldr	r1, [pc, #372]	; (800b258 <ai_platform_api_get_network_report+0x500>)
 800b0e4:	6163      	str	r3, [r4, #20]
 800b0e6:	6813      	ldr	r3, [r2, #0]
 800b0e8:	f023 0301 	bic.w	r3, r3, #1
 800b0ec:	6013      	str	r3, [r2, #0]
 800b0ee:	680b      	ldr	r3, [r1, #0]
 800b0f0:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800b0f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b0f8:	185a      	adds	r2, r3, r1
 800b0fa:	2a01      	cmp	r2, #1
 800b0fc:	d967      	bls.n	800b1ce <ai_platform_api_get_network_report+0x476>
 800b0fe:	f240 4249 	movw	r2, #1097	; 0x449
 800b102:	4293      	cmp	r3, r2
 800b104:	d063      	beq.n	800b1ce <ai_platform_api_get_network_report+0x476>
 800b106:	4b52      	ldr	r3, [pc, #328]	; (800b250 <ai_platform_api_get_network_report+0x4f8>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b10e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b112:	d04d      	beq.n	800b1b0 <ai_platform_api_get_network_report+0x458>
 800b114:	4a4d      	ldr	r2, [pc, #308]	; (800b24c <ai_platform_api_get_network_report+0x4f4>)
 800b116:	f240 1301 	movw	r3, #257	; 0x101
 800b11a:	494f      	ldr	r1, [pc, #316]	; (800b258 <ai_platform_api_get_network_report+0x500>)
 800b11c:	6263      	str	r3, [r4, #36]	; 0x24
 800b11e:	6813      	ldr	r3, [r2, #0]
 800b120:	f023 0301 	bic.w	r3, r3, #1
 800b124:	6013      	str	r3, [r2, #0]
 800b126:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800b12a:	680b      	ldr	r3, [r1, #0]
 800b12c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b130:	189a      	adds	r2, r3, r2
 800b132:	2a01      	cmp	r2, #1
 800b134:	d92d      	bls.n	800b192 <ai_platform_api_get_network_report+0x43a>
 800b136:	f240 4249 	movw	r2, #1097	; 0x449
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d029      	beq.n	800b192 <ai_platform_api_get_network_report+0x43a>
 800b13e:	4b44      	ldr	r3, [pc, #272]	; (800b250 <ai_platform_api_get_network_report+0x4f8>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b146:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b14a:	d013      	beq.n	800b174 <ai_platform_api_get_network_report+0x41c>
 800b14c:	f240 4301 	movw	r3, #1025	; 0x401
 800b150:	2001      	movs	r0, #1
 800b152:	62a3      	str	r3, [r4, #40]	; 0x28
 800b154:	e6bb      	b.n	800aece <ai_platform_api_get_network_report+0x176>
 800b156:	4b41      	ldr	r3, [pc, #260]	; (800b25c <ai_platform_api_get_network_report+0x504>)
 800b158:	2201      	movs	r2, #1
 800b15a:	4619      	mov	r1, r3
 800b15c:	601a      	str	r2, [r3, #0]
 800b15e:	680b      	ldr	r3, [r1, #0]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d1fc      	bne.n	800b15e <ai_platform_api_get_network_report+0x406>
 800b164:	4b3e      	ldr	r3, [pc, #248]	; (800b260 <ai_platform_api_get_network_report+0x508>)
 800b166:	493f      	ldr	r1, [pc, #252]	; (800b264 <ai_platform_api_get_network_report+0x50c>)
 800b168:	4a3f      	ldr	r2, [pc, #252]	; (800b268 <ai_platform_api_get_network_report+0x510>)
 800b16a:	6019      	str	r1, [r3, #0]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4293      	cmp	r3, r2
 800b170:	d096      	beq.n	800b0a0 <ai_platform_api_get_network_report+0x348>
 800b172:	e7fe      	b.n	800b172 <ai_platform_api_get_network_report+0x41a>
 800b174:	4b3d      	ldr	r3, [pc, #244]	; (800b26c <ai_platform_api_get_network_report+0x514>)
 800b176:	2201      	movs	r2, #1
 800b178:	4619      	mov	r1, r3
 800b17a:	601a      	str	r2, [r3, #0]
 800b17c:	680b      	ldr	r3, [r1, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d1fc      	bne.n	800b17c <ai_platform_api_get_network_report+0x424>
 800b182:	4b3b      	ldr	r3, [pc, #236]	; (800b270 <ai_platform_api_get_network_report+0x518>)
 800b184:	4937      	ldr	r1, [pc, #220]	; (800b264 <ai_platform_api_get_network_report+0x50c>)
 800b186:	4a38      	ldr	r2, [pc, #224]	; (800b268 <ai_platform_api_get_network_report+0x510>)
 800b188:	6019      	str	r1, [r3, #0]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d0dd      	beq.n	800b14c <ai_platform_api_get_network_report+0x3f4>
 800b190:	e7fe      	b.n	800b190 <ai_platform_api_get_network_report+0x438>
 800b192:	4b32      	ldr	r3, [pc, #200]	; (800b25c <ai_platform_api_get_network_report+0x504>)
 800b194:	2201      	movs	r2, #1
 800b196:	4619      	mov	r1, r3
 800b198:	601a      	str	r2, [r3, #0]
 800b19a:	680b      	ldr	r3, [r1, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d1fc      	bne.n	800b19a <ai_platform_api_get_network_report+0x442>
 800b1a0:	4b2f      	ldr	r3, [pc, #188]	; (800b260 <ai_platform_api_get_network_report+0x508>)
 800b1a2:	4930      	ldr	r1, [pc, #192]	; (800b264 <ai_platform_api_get_network_report+0x50c>)
 800b1a4:	4a30      	ldr	r2, [pc, #192]	; (800b268 <ai_platform_api_get_network_report+0x510>)
 800b1a6:	6019      	str	r1, [r3, #0]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d0ce      	beq.n	800b14c <ai_platform_api_get_network_report+0x3f4>
 800b1ae:	e7fe      	b.n	800b1ae <ai_platform_api_get_network_report+0x456>
 800b1b0:	4b2e      	ldr	r3, [pc, #184]	; (800b26c <ai_platform_api_get_network_report+0x514>)
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	601a      	str	r2, [r3, #0]
 800b1b8:	680b      	ldr	r3, [r1, #0]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d1fc      	bne.n	800b1b8 <ai_platform_api_get_network_report+0x460>
 800b1be:	4b2c      	ldr	r3, [pc, #176]	; (800b270 <ai_platform_api_get_network_report+0x518>)
 800b1c0:	4928      	ldr	r1, [pc, #160]	; (800b264 <ai_platform_api_get_network_report+0x50c>)
 800b1c2:	4a29      	ldr	r2, [pc, #164]	; (800b268 <ai_platform_api_get_network_report+0x510>)
 800b1c4:	6019      	str	r1, [r3, #0]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d0a3      	beq.n	800b114 <ai_platform_api_get_network_report+0x3bc>
 800b1cc:	e7fe      	b.n	800b1cc <ai_platform_api_get_network_report+0x474>
 800b1ce:	4b23      	ldr	r3, [pc, #140]	; (800b25c <ai_platform_api_get_network_report+0x504>)
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	601a      	str	r2, [r3, #0]
 800b1d6:	680b      	ldr	r3, [r1, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d1fc      	bne.n	800b1d6 <ai_platform_api_get_network_report+0x47e>
 800b1dc:	4b20      	ldr	r3, [pc, #128]	; (800b260 <ai_platform_api_get_network_report+0x508>)
 800b1de:	4921      	ldr	r1, [pc, #132]	; (800b264 <ai_platform_api_get_network_report+0x50c>)
 800b1e0:	4a21      	ldr	r2, [pc, #132]	; (800b268 <ai_platform_api_get_network_report+0x510>)
 800b1e2:	6019      	str	r1, [r3, #0]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d094      	beq.n	800b114 <ai_platform_api_get_network_report+0x3bc>
 800b1ea:	e7fe      	b.n	800b1ea <ai_platform_api_get_network_report+0x492>
 800b1ec:	4b1f      	ldr	r3, [pc, #124]	; (800b26c <ai_platform_api_get_network_report+0x514>)
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	601a      	str	r2, [r3, #0]
 800b1f4:	680b      	ldr	r3, [r1, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d1fc      	bne.n	800b1f4 <ai_platform_api_get_network_report+0x49c>
 800b1fa:	4b1d      	ldr	r3, [pc, #116]	; (800b270 <ai_platform_api_get_network_report+0x518>)
 800b1fc:	4919      	ldr	r1, [pc, #100]	; (800b264 <ai_platform_api_get_network_report+0x50c>)
 800b1fe:	4a1a      	ldr	r2, [pc, #104]	; (800b268 <ai_platform_api_get_network_report+0x510>)
 800b200:	6019      	str	r1, [r3, #0]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4293      	cmp	r3, r2
 800b206:	f43f af69 	beq.w	800b0dc <ai_platform_api_get_network_report+0x384>
 800b20a:	e7fe      	b.n	800b20a <ai_platform_api_get_network_report+0x4b2>
 800b20c:	4b13      	ldr	r3, [pc, #76]	; (800b25c <ai_platform_api_get_network_report+0x504>)
 800b20e:	2201      	movs	r2, #1
 800b210:	4619      	mov	r1, r3
 800b212:	601a      	str	r2, [r3, #0]
 800b214:	680b      	ldr	r3, [r1, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d1fc      	bne.n	800b214 <ai_platform_api_get_network_report+0x4bc>
 800b21a:	4b11      	ldr	r3, [pc, #68]	; (800b260 <ai_platform_api_get_network_report+0x508>)
 800b21c:	4911      	ldr	r1, [pc, #68]	; (800b264 <ai_platform_api_get_network_report+0x50c>)
 800b21e:	4a12      	ldr	r2, [pc, #72]	; (800b268 <ai_platform_api_get_network_report+0x510>)
 800b220:	6019      	str	r1, [r3, #0]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4293      	cmp	r3, r2
 800b226:	f43f af59 	beq.w	800b0dc <ai_platform_api_get_network_report+0x384>
 800b22a:	e7fe      	b.n	800b22a <ai_platform_api_get_network_report+0x4d2>
 800b22c:	4b0f      	ldr	r3, [pc, #60]	; (800b26c <ai_platform_api_get_network_report+0x514>)
 800b22e:	2201      	movs	r2, #1
 800b230:	4619      	mov	r1, r3
 800b232:	601a      	str	r2, [r3, #0]
 800b234:	680b      	ldr	r3, [r1, #0]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d1fc      	bne.n	800b234 <ai_platform_api_get_network_report+0x4dc>
 800b23a:	4b0d      	ldr	r3, [pc, #52]	; (800b270 <ai_platform_api_get_network_report+0x518>)
 800b23c:	4909      	ldr	r1, [pc, #36]	; (800b264 <ai_platform_api_get_network_report+0x50c>)
 800b23e:	4a0a      	ldr	r2, [pc, #40]	; (800b268 <ai_platform_api_get_network_report+0x510>)
 800b240:	6019      	str	r1, [r3, #0]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4293      	cmp	r3, r2
 800b246:	f43f af2b 	beq.w	800b0a0 <ai_platform_api_get_network_report+0x348>
 800b24a:	e7fe      	b.n	800b24a <ai_platform_api_get_network_report+0x4f2>
 800b24c:	e0002000 	.word	0xe0002000
 800b250:	5c001000 	.word	0x5c001000
 800b254:	0800ee18 	.word	0x0800ee18
 800b258:	e0042000 	.word	0xe0042000
 800b25c:	40023008 	.word	0x40023008
 800b260:	40023000 	.word	0x40023000
 800b264:	f407a5c2 	.word	0xf407a5c2
 800b268:	b5e8b5cd 	.word	0xb5e8b5cd
 800b26c:	58024c08 	.word	0x58024c08
 800b270:	58024c00 	.word	0x58024c00

0800b274 <ai_platform_network_create>:
 800b274:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b276:	4d36      	ldr	r5, [pc, #216]	; (800b350 <ai_platform_network_create+0xdc>)
 800b278:	b083      	sub	sp, #12
 800b27a:	4e36      	ldr	r6, [pc, #216]	; (800b354 <ai_platform_network_create+0xe0>)
 800b27c:	6829      	ldr	r1, [r5, #0]
 800b27e:	f89d 7020 	ldrb.w	r7, [sp, #32]
 800b282:	f021 0101 	bic.w	r1, r1, #1
 800b286:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800b28a:	6029      	str	r1, [r5, #0]
 800b28c:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 800b290:	6831      	ldr	r1, [r6, #0]
 800b292:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800b296:	194d      	adds	r5, r1, r5
 800b298:	2d01      	cmp	r5, #1
 800b29a:	d92f      	bls.n	800b2fc <ai_platform_network_create+0x88>
 800b29c:	f240 4549 	movw	r5, #1097	; 0x449
 800b2a0:	42a9      	cmp	r1, r5
 800b2a2:	d02b      	beq.n	800b2fc <ai_platform_network_create+0x88>
 800b2a4:	492c      	ldr	r1, [pc, #176]	; (800b358 <ai_platform_network_create+0xe4>)
 800b2a6:	6809      	ldr	r1, [r1, #0]
 800b2a8:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800b2ac:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 800b2b0:	d015      	beq.n	800b2de <ai_platform_network_create+0x6a>
 800b2b2:	2800      	cmp	r0, #0
 800b2b4:	d031      	beq.n	800b31a <ai_platform_network_create+0xa6>
 800b2b6:	461e      	mov	r6, r3
 800b2b8:	4613      	mov	r3, r2
 800b2ba:	4a28      	ldr	r2, [pc, #160]	; (800b35c <ai_platform_network_create+0xe8>)
 800b2bc:	4605      	mov	r5, r0
 800b2be:	601a      	str	r2, [r3, #0]
 800b2c0:	6003      	str	r3, [r0, #0]
 800b2c2:	f000 ff53 	bl	800c16c <core_init>
 800b2c6:	2800      	cmp	r0, #0
 800b2c8:	d02b      	beq.n	800b322 <ai_platform_network_create+0xae>
 800b2ca:	0223      	lsls	r3, r4, #8
 800b2cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b2d0:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 800b2d4:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 800b2d8:	d92e      	bls.n	800b338 <ai_platform_network_create+0xc4>
 800b2da:	2301      	movs	r3, #1
 800b2dc:	e022      	b.n	800b324 <ai_platform_network_create+0xb0>
 800b2de:	4920      	ldr	r1, [pc, #128]	; (800b360 <ai_platform_network_create+0xec>)
 800b2e0:	2501      	movs	r5, #1
 800b2e2:	460e      	mov	r6, r1
 800b2e4:	600d      	str	r5, [r1, #0]
 800b2e6:	6831      	ldr	r1, [r6, #0]
 800b2e8:	2900      	cmp	r1, #0
 800b2ea:	d1fc      	bne.n	800b2e6 <ai_platform_network_create+0x72>
 800b2ec:	491d      	ldr	r1, [pc, #116]	; (800b364 <ai_platform_network_create+0xf0>)
 800b2ee:	4e1e      	ldr	r6, [pc, #120]	; (800b368 <ai_platform_network_create+0xf4>)
 800b2f0:	4d1e      	ldr	r5, [pc, #120]	; (800b36c <ai_platform_network_create+0xf8>)
 800b2f2:	600e      	str	r6, [r1, #0]
 800b2f4:	6809      	ldr	r1, [r1, #0]
 800b2f6:	42a9      	cmp	r1, r5
 800b2f8:	d0db      	beq.n	800b2b2 <ai_platform_network_create+0x3e>
 800b2fa:	e7fe      	b.n	800b2fa <ai_platform_network_create+0x86>
 800b2fc:	491c      	ldr	r1, [pc, #112]	; (800b370 <ai_platform_network_create+0xfc>)
 800b2fe:	2501      	movs	r5, #1
 800b300:	460e      	mov	r6, r1
 800b302:	600d      	str	r5, [r1, #0]
 800b304:	6831      	ldr	r1, [r6, #0]
 800b306:	2900      	cmp	r1, #0
 800b308:	d1fc      	bne.n	800b304 <ai_platform_network_create+0x90>
 800b30a:	491a      	ldr	r1, [pc, #104]	; (800b374 <ai_platform_network_create+0x100>)
 800b30c:	4e16      	ldr	r6, [pc, #88]	; (800b368 <ai_platform_network_create+0xf4>)
 800b30e:	4d17      	ldr	r5, [pc, #92]	; (800b36c <ai_platform_network_create+0xf8>)
 800b310:	600e      	str	r6, [r1, #0]
 800b312:	6809      	ldr	r1, [r1, #0]
 800b314:	42a9      	cmp	r1, r5
 800b316:	d0cc      	beq.n	800b2b2 <ai_platform_network_create+0x3e>
 800b318:	e7fe      	b.n	800b318 <ai_platform_network_create+0xa4>
 800b31a:	f241 0010 	movw	r0, #4112	; 0x1010
 800b31e:	b003      	add	sp, #12
 800b320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b322:	2330      	movs	r3, #48	; 0x30
 800b324:	2100      	movs	r1, #0
 800b326:	2210      	movs	r2, #16
 800b328:	6029      	str	r1, [r5, #0]
 800b32a:	2000      	movs	r0, #0
 800b32c:	f363 0007 	bfi	r0, r3, #0, #8
 800b330:	f362 201f 	bfi	r0, r2, #8, #24
 800b334:	b003      	add	sp, #12
 800b336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b338:	4b0f      	ldr	r3, [pc, #60]	; (800b378 <ai_platform_network_create+0x104>)
 800b33a:	a802      	add	r0, sp, #8
 800b33c:	f840 3d04 	str.w	r3, [r0, #-4]!
 800b340:	f001 fc3c 	bl	800cbbc <ai_check_custom_types>
 800b344:	b110      	cbz	r0, 800b34c <ai_platform_network_create+0xd8>
 800b346:	2200      	movs	r2, #0
 800b348:	4613      	mov	r3, r2
 800b34a:	e7ee      	b.n	800b32a <ai_platform_network_create+0xb6>
 800b34c:	2302      	movs	r3, #2
 800b34e:	e7e9      	b.n	800b324 <ai_platform_network_create+0xb0>
 800b350:	e0002000 	.word	0xe0002000
 800b354:	e0042000 	.word	0xe0042000
 800b358:	5c001000 	.word	0x5c001000
 800b35c:	a1c00100 	.word	0xa1c00100
 800b360:	58024c08 	.word	0x58024c08
 800b364:	58024c00 	.word	0x58024c00
 800b368:	f407a5c2 	.word	0xf407a5c2
 800b36c:	b5e8b5cd 	.word	0xb5e8b5cd
 800b370:	40023008 	.word	0x40023008
 800b374:	40023000 	.word	0x40023000
 800b378:	84048403 	.word	0x84048403

0800b37c <ai_platform_network_destroy>:
 800b37c:	b118      	cbz	r0, 800b386 <ai_platform_network_destroy+0xa>
 800b37e:	4b3a      	ldr	r3, [pc, #232]	; (800b468 <ai_platform_network_destroy+0xec>)
 800b380:	6802      	ldr	r2, [r0, #0]
 800b382:	429a      	cmp	r2, r3
 800b384:	d037      	beq.n	800b3f6 <ai_platform_network_destroy+0x7a>
 800b386:	4a39      	ldr	r2, [pc, #228]	; (800b46c <ai_platform_network_destroy+0xf0>)
 800b388:	4939      	ldr	r1, [pc, #228]	; (800b470 <ai_platform_network_destroy+0xf4>)
 800b38a:	6813      	ldr	r3, [r2, #0]
 800b38c:	f023 0301 	bic.w	r3, r3, #1
 800b390:	6013      	str	r3, [r2, #0]
 800b392:	680b      	ldr	r3, [r1, #0]
 800b394:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800b398:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b39c:	185a      	adds	r2, r3, r1
 800b39e:	2a01      	cmp	r2, #1
 800b3a0:	d90b      	bls.n	800b3ba <ai_platform_network_destroy+0x3e>
 800b3a2:	f240 4249 	movw	r2, #1097	; 0x449
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d007      	beq.n	800b3ba <ai_platform_network_destroy+0x3e>
 800b3aa:	4b32      	ldr	r3, [pc, #200]	; (800b474 <ai_platform_network_destroy+0xf8>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b3b2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b3b6:	d00f      	beq.n	800b3d8 <ai_platform_network_destroy+0x5c>
 800b3b8:	4770      	bx	lr
 800b3ba:	4b2f      	ldr	r3, [pc, #188]	; (800b478 <ai_platform_network_destroy+0xfc>)
 800b3bc:	2201      	movs	r2, #1
 800b3be:	4619      	mov	r1, r3
 800b3c0:	601a      	str	r2, [r3, #0]
 800b3c2:	680b      	ldr	r3, [r1, #0]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d1fc      	bne.n	800b3c2 <ai_platform_network_destroy+0x46>
 800b3c8:	4b2c      	ldr	r3, [pc, #176]	; (800b47c <ai_platform_network_destroy+0x100>)
 800b3ca:	492d      	ldr	r1, [pc, #180]	; (800b480 <ai_platform_network_destroy+0x104>)
 800b3cc:	4a2d      	ldr	r2, [pc, #180]	; (800b484 <ai_platform_network_destroy+0x108>)
 800b3ce:	6019      	str	r1, [r3, #0]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d0f0      	beq.n	800b3b8 <ai_platform_network_destroy+0x3c>
 800b3d6:	e7fe      	b.n	800b3d6 <ai_platform_network_destroy+0x5a>
 800b3d8:	4b2b      	ldr	r3, [pc, #172]	; (800b488 <ai_platform_network_destroy+0x10c>)
 800b3da:	2201      	movs	r2, #1
 800b3dc:	4619      	mov	r1, r3
 800b3de:	601a      	str	r2, [r3, #0]
 800b3e0:	680b      	ldr	r3, [r1, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d1fc      	bne.n	800b3e0 <ai_platform_network_destroy+0x64>
 800b3e6:	4b29      	ldr	r3, [pc, #164]	; (800b48c <ai_platform_network_destroy+0x110>)
 800b3e8:	4925      	ldr	r1, [pc, #148]	; (800b480 <ai_platform_network_destroy+0x104>)
 800b3ea:	4a26      	ldr	r2, [pc, #152]	; (800b484 <ai_platform_network_destroy+0x108>)
 800b3ec:	6019      	str	r1, [r3, #0]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d0e1      	beq.n	800b3b8 <ai_platform_network_destroy+0x3c>
 800b3f4:	e7fe      	b.n	800b3f4 <ai_platform_network_destroy+0x78>
 800b3f6:	4a1d      	ldr	r2, [pc, #116]	; (800b46c <ai_platform_network_destroy+0xf0>)
 800b3f8:	491d      	ldr	r1, [pc, #116]	; (800b470 <ai_platform_network_destroy+0xf4>)
 800b3fa:	6813      	ldr	r3, [r2, #0]
 800b3fc:	f023 0301 	bic.w	r3, r3, #1
 800b400:	6013      	str	r3, [r2, #0]
 800b402:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800b406:	680b      	ldr	r3, [r1, #0]
 800b408:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b40c:	189a      	adds	r2, r3, r2
 800b40e:	2a01      	cmp	r2, #1
 800b410:	d90c      	bls.n	800b42c <ai_platform_network_destroy+0xb0>
 800b412:	f240 4249 	movw	r2, #1097	; 0x449
 800b416:	4293      	cmp	r3, r2
 800b418:	d008      	beq.n	800b42c <ai_platform_network_destroy+0xb0>
 800b41a:	4b16      	ldr	r3, [pc, #88]	; (800b474 <ai_platform_network_destroy+0xf8>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b422:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b426:	d010      	beq.n	800b44a <ai_platform_network_destroy+0xce>
 800b428:	2000      	movs	r0, #0
 800b42a:	4770      	bx	lr
 800b42c:	4b12      	ldr	r3, [pc, #72]	; (800b478 <ai_platform_network_destroy+0xfc>)
 800b42e:	2201      	movs	r2, #1
 800b430:	4619      	mov	r1, r3
 800b432:	601a      	str	r2, [r3, #0]
 800b434:	680b      	ldr	r3, [r1, #0]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d1fc      	bne.n	800b434 <ai_platform_network_destroy+0xb8>
 800b43a:	4b10      	ldr	r3, [pc, #64]	; (800b47c <ai_platform_network_destroy+0x100>)
 800b43c:	4910      	ldr	r1, [pc, #64]	; (800b480 <ai_platform_network_destroy+0x104>)
 800b43e:	4a11      	ldr	r2, [pc, #68]	; (800b484 <ai_platform_network_destroy+0x108>)
 800b440:	6019      	str	r1, [r3, #0]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4293      	cmp	r3, r2
 800b446:	d0ef      	beq.n	800b428 <ai_platform_network_destroy+0xac>
 800b448:	e7fe      	b.n	800b448 <ai_platform_network_destroy+0xcc>
 800b44a:	4b0f      	ldr	r3, [pc, #60]	; (800b488 <ai_platform_network_destroy+0x10c>)
 800b44c:	2201      	movs	r2, #1
 800b44e:	4619      	mov	r1, r3
 800b450:	601a      	str	r2, [r3, #0]
 800b452:	680b      	ldr	r3, [r1, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d1fc      	bne.n	800b452 <ai_platform_network_destroy+0xd6>
 800b458:	4b0c      	ldr	r3, [pc, #48]	; (800b48c <ai_platform_network_destroy+0x110>)
 800b45a:	4909      	ldr	r1, [pc, #36]	; (800b480 <ai_platform_network_destroy+0x104>)
 800b45c:	4a09      	ldr	r2, [pc, #36]	; (800b484 <ai_platform_network_destroy+0x108>)
 800b45e:	6019      	str	r1, [r3, #0]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4293      	cmp	r3, r2
 800b464:	d0e0      	beq.n	800b428 <ai_platform_network_destroy+0xac>
 800b466:	e7fe      	b.n	800b466 <ai_platform_network_destroy+0xea>
 800b468:	a1c00100 	.word	0xa1c00100
 800b46c:	e0002000 	.word	0xe0002000
 800b470:	e0042000 	.word	0xe0042000
 800b474:	5c001000 	.word	0x5c001000
 800b478:	40023008 	.word	0x40023008
 800b47c:	40023000 	.word	0x40023000
 800b480:	f407a5c2 	.word	0xf407a5c2
 800b484:	b5e8b5cd 	.word	0xb5e8b5cd
 800b488:	58024c08 	.word	0x58024c08
 800b48c:	58024c00 	.word	0x58024c00

0800b490 <ai_platform_network_init>:
 800b490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b492:	2800      	cmp	r0, #0
 800b494:	d05e      	beq.n	800b554 <ai_platform_network_init+0xc4>
 800b496:	4b68      	ldr	r3, [pc, #416]	; (800b638 <ai_platform_network_init+0x1a8>)
 800b498:	6802      	ldr	r2, [r0, #0]
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d15a      	bne.n	800b554 <ai_platform_network_init+0xc4>
 800b49e:	4a67      	ldr	r2, [pc, #412]	; (800b63c <ai_platform_network_init+0x1ac>)
 800b4a0:	4c67      	ldr	r4, [pc, #412]	; (800b640 <ai_platform_network_init+0x1b0>)
 800b4a2:	6813      	ldr	r3, [r2, #0]
 800b4a4:	f023 0301 	bic.w	r3, r3, #1
 800b4a8:	6013      	str	r3, [r2, #0]
 800b4aa:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800b4ae:	6823      	ldr	r3, [r4, #0]
 800b4b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b4b4:	189a      	adds	r2, r3, r2
 800b4b6:	2a01      	cmp	r2, #1
 800b4b8:	d93d      	bls.n	800b536 <ai_platform_network_init+0xa6>
 800b4ba:	f240 4249 	movw	r2, #1097	; 0x449
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d039      	beq.n	800b536 <ai_platform_network_init+0xa6>
 800b4c2:	4b60      	ldr	r3, [pc, #384]	; (800b644 <ai_platform_network_init+0x1b4>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b4ca:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b4ce:	d06b      	beq.n	800b5a8 <ai_platform_network_init+0x118>
 800b4d0:	4605      	mov	r5, r0
 800b4d2:	460c      	mov	r4, r1
 800b4d4:	2900      	cmp	r1, #0
 800b4d6:	f000 80a8 	beq.w	800b62a <ai_platform_network_init+0x19a>
 800b4da:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 800b4dc:	690e      	ldr	r6, [r1, #16]
 800b4de:	2f00      	cmp	r7, #0
 800b4e0:	f000 8092 	beq.w	800b608 <ai_platform_network_init+0x178>
 800b4e4:	2e00      	cmp	r6, #0
 800b4e6:	d07d      	beq.n	800b5e4 <ai_platform_network_init+0x154>
 800b4e8:	f104 0718 	add.w	r7, r4, #24
 800b4ec:	f105 0c18 	add.w	ip, r5, #24
 800b4f0:	f105 0630 	add.w	r6, r5, #48	; 0x30
 800b4f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b4f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b4fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b4fe:	2403      	movs	r4, #3
 800b500:	e88c 0003 	stmia.w	ip, {r0, r1}
 800b504:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b506:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b508:	e897 0003 	ldmia.w	r7, {r0, r1}
 800b50c:	e886 0003 	stmia.w	r6, {r0, r1}
 800b510:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800b512:	60ec      	str	r4, [r5, #12]
 800b514:	b16a      	cbz	r2, 800b532 <ai_platform_network_init+0xa2>
 800b516:	68d3      	ldr	r3, [r2, #12]
 800b518:	6095      	str	r5, [r2, #8]
 800b51a:	b153      	cbz	r3, 800b532 <ai_platform_network_init+0xa2>
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d104      	bne.n	800b52a <ai_platform_network_init+0x9a>
 800b520:	e007      	b.n	800b532 <ai_platform_network_init+0xa2>
 800b522:	429a      	cmp	r2, r3
 800b524:	4613      	mov	r3, r2
 800b526:	d004      	beq.n	800b532 <ai_platform_network_init+0xa2>
 800b528:	b11a      	cbz	r2, 800b532 <ai_platform_network_init+0xa2>
 800b52a:	68da      	ldr	r2, [r3, #12]
 800b52c:	609d      	str	r5, [r3, #8]
 800b52e:	2a00      	cmp	r2, #0
 800b530:	d1f7      	bne.n	800b522 <ai_platform_network_init+0x92>
 800b532:	4628      	mov	r0, r5
 800b534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b536:	4b44      	ldr	r3, [pc, #272]	; (800b648 <ai_platform_network_init+0x1b8>)
 800b538:	2201      	movs	r2, #1
 800b53a:	461c      	mov	r4, r3
 800b53c:	601a      	str	r2, [r3, #0]
 800b53e:	6823      	ldr	r3, [r4, #0]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d1fc      	bne.n	800b53e <ai_platform_network_init+0xae>
 800b544:	4b41      	ldr	r3, [pc, #260]	; (800b64c <ai_platform_network_init+0x1bc>)
 800b546:	4c42      	ldr	r4, [pc, #264]	; (800b650 <ai_platform_network_init+0x1c0>)
 800b548:	4a42      	ldr	r2, [pc, #264]	; (800b654 <ai_platform_network_init+0x1c4>)
 800b54a:	601c      	str	r4, [r3, #0]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4293      	cmp	r3, r2
 800b550:	d0be      	beq.n	800b4d0 <ai_platform_network_init+0x40>
 800b552:	e7fe      	b.n	800b552 <ai_platform_network_init+0xc2>
 800b554:	4a39      	ldr	r2, [pc, #228]	; (800b63c <ai_platform_network_init+0x1ac>)
 800b556:	493a      	ldr	r1, [pc, #232]	; (800b640 <ai_platform_network_init+0x1b0>)
 800b558:	6813      	ldr	r3, [r2, #0]
 800b55a:	f023 0301 	bic.w	r3, r3, #1
 800b55e:	6013      	str	r3, [r2, #0]
 800b560:	680b      	ldr	r3, [r1, #0]
 800b562:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800b566:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b56a:	185a      	adds	r2, r3, r1
 800b56c:	2a01      	cmp	r2, #1
 800b56e:	d90c      	bls.n	800b58a <ai_platform_network_init+0xfa>
 800b570:	f240 4249 	movw	r2, #1097	; 0x449
 800b574:	4293      	cmp	r3, r2
 800b576:	d008      	beq.n	800b58a <ai_platform_network_init+0xfa>
 800b578:	4b32      	ldr	r3, [pc, #200]	; (800b644 <ai_platform_network_init+0x1b4>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b580:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b584:	d01f      	beq.n	800b5c6 <ai_platform_network_init+0x136>
 800b586:	2000      	movs	r0, #0
 800b588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b58a:	4b2f      	ldr	r3, [pc, #188]	; (800b648 <ai_platform_network_init+0x1b8>)
 800b58c:	2201      	movs	r2, #1
 800b58e:	4619      	mov	r1, r3
 800b590:	601a      	str	r2, [r3, #0]
 800b592:	680b      	ldr	r3, [r1, #0]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d1fc      	bne.n	800b592 <ai_platform_network_init+0x102>
 800b598:	4b2c      	ldr	r3, [pc, #176]	; (800b64c <ai_platform_network_init+0x1bc>)
 800b59a:	492d      	ldr	r1, [pc, #180]	; (800b650 <ai_platform_network_init+0x1c0>)
 800b59c:	4a2d      	ldr	r2, [pc, #180]	; (800b654 <ai_platform_network_init+0x1c4>)
 800b59e:	6019      	str	r1, [r3, #0]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d0ef      	beq.n	800b586 <ai_platform_network_init+0xf6>
 800b5a6:	e7fe      	b.n	800b5a6 <ai_platform_network_init+0x116>
 800b5a8:	4b2b      	ldr	r3, [pc, #172]	; (800b658 <ai_platform_network_init+0x1c8>)
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	461c      	mov	r4, r3
 800b5ae:	601a      	str	r2, [r3, #0]
 800b5b0:	6823      	ldr	r3, [r4, #0]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d1fc      	bne.n	800b5b0 <ai_platform_network_init+0x120>
 800b5b6:	4b29      	ldr	r3, [pc, #164]	; (800b65c <ai_platform_network_init+0x1cc>)
 800b5b8:	4c25      	ldr	r4, [pc, #148]	; (800b650 <ai_platform_network_init+0x1c0>)
 800b5ba:	4a26      	ldr	r2, [pc, #152]	; (800b654 <ai_platform_network_init+0x1c4>)
 800b5bc:	601c      	str	r4, [r3, #0]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	d085      	beq.n	800b4d0 <ai_platform_network_init+0x40>
 800b5c4:	e7fe      	b.n	800b5c4 <ai_platform_network_init+0x134>
 800b5c6:	4b24      	ldr	r3, [pc, #144]	; (800b658 <ai_platform_network_init+0x1c8>)
 800b5c8:	2201      	movs	r2, #1
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	601a      	str	r2, [r3, #0]
 800b5ce:	680b      	ldr	r3, [r1, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d1fc      	bne.n	800b5ce <ai_platform_network_init+0x13e>
 800b5d4:	4b21      	ldr	r3, [pc, #132]	; (800b65c <ai_platform_network_init+0x1cc>)
 800b5d6:	491e      	ldr	r1, [pc, #120]	; (800b650 <ai_platform_network_init+0x1c0>)
 800b5d8:	4a1e      	ldr	r2, [pc, #120]	; (800b654 <ai_platform_network_init+0x1c4>)
 800b5da:	6019      	str	r1, [r3, #0]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d0d1      	beq.n	800b586 <ai_platform_network_init+0xf6>
 800b5e2:	e7fe      	b.n	800b5e2 <ai_platform_network_init+0x152>
 800b5e4:	8921      	ldrh	r1, [r4, #8]
 800b5e6:	88e2      	ldrh	r2, [r4, #6]
 800b5e8:	68e3      	ldr	r3, [r4, #12]
 800b5ea:	fb02 f201 	mul.w	r2, r2, r1
 800b5ee:	fb03 f302 	mul.w	r3, r3, r2
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	f43f af78 	beq.w	800b4e8 <ai_platform_network_init+0x58>
 800b5f8:	f105 0010 	add.w	r0, r5, #16
 800b5fc:	2212      	movs	r2, #18
 800b5fe:	2110      	movs	r1, #16
 800b600:	f000 fdbc 	bl	800c17c <core_set_error>
 800b604:	4630      	mov	r0, r6
 800b606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b608:	8c09      	ldrh	r1, [r1, #32]
 800b60a:	8be2      	ldrh	r2, [r4, #30]
 800b60c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b60e:	fb02 f201 	mul.w	r2, r2, r1
 800b612:	fb03 f302 	mul.w	r3, r3, r2
 800b616:	2b00      	cmp	r3, #0
 800b618:	f43f af64 	beq.w	800b4e4 <ai_platform_network_init+0x54>
 800b61c:	2213      	movs	r2, #19
 800b61e:	2110      	movs	r1, #16
 800b620:	3010      	adds	r0, #16
 800b622:	f000 fdab 	bl	800c17c <core_set_error>
 800b626:	4638      	mov	r0, r7
 800b628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b62a:	2211      	movs	r2, #17
 800b62c:	2110      	movs	r1, #16
 800b62e:	3010      	adds	r0, #16
 800b630:	f000 fda4 	bl	800c17c <core_set_error>
 800b634:	4620      	mov	r0, r4
 800b636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b638:	a1c00100 	.word	0xa1c00100
 800b63c:	e0002000 	.word	0xe0002000
 800b640:	e0042000 	.word	0xe0042000
 800b644:	5c001000 	.word	0x5c001000
 800b648:	40023008 	.word	0x40023008
 800b64c:	40023000 	.word	0x40023000
 800b650:	f407a5c2 	.word	0xf407a5c2
 800b654:	b5e8b5cd 	.word	0xb5e8b5cd
 800b658:	58024c08 	.word	0x58024c08
 800b65c:	58024c00 	.word	0x58024c00

0800b660 <ai_platform_network_post_init>:
 800b660:	b538      	push	{r3, r4, r5, lr}
 800b662:	b118      	cbz	r0, 800b66c <ai_platform_network_post_init+0xc>
 800b664:	4b4a      	ldr	r3, [pc, #296]	; (800b790 <ai_platform_network_post_init+0x130>)
 800b666:	6802      	ldr	r2, [r0, #0]
 800b668:	429a      	cmp	r2, r3
 800b66a:	d029      	beq.n	800b6c0 <ai_platform_network_post_init+0x60>
 800b66c:	4a49      	ldr	r2, [pc, #292]	; (800b794 <ai_platform_network_post_init+0x134>)
 800b66e:	494a      	ldr	r1, [pc, #296]	; (800b798 <ai_platform_network_post_init+0x138>)
 800b670:	6813      	ldr	r3, [r2, #0]
 800b672:	f023 0301 	bic.w	r3, r3, #1
 800b676:	6013      	str	r3, [r2, #0]
 800b678:	680b      	ldr	r3, [r1, #0]
 800b67a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800b67e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b682:	185a      	adds	r2, r3, r1
 800b684:	2a01      	cmp	r2, #1
 800b686:	d90c      	bls.n	800b6a2 <ai_platform_network_post_init+0x42>
 800b688:	f240 4249 	movw	r2, #1097	; 0x449
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d008      	beq.n	800b6a2 <ai_platform_network_post_init+0x42>
 800b690:	4b42      	ldr	r3, [pc, #264]	; (800b79c <ai_platform_network_post_init+0x13c>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b698:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b69c:	d044      	beq.n	800b728 <ai_platform_network_post_init+0xc8>
 800b69e:	2000      	movs	r0, #0
 800b6a0:	bd38      	pop	{r3, r4, r5, pc}
 800b6a2:	4b3f      	ldr	r3, [pc, #252]	; (800b7a0 <ai_platform_network_post_init+0x140>)
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	601a      	str	r2, [r3, #0]
 800b6aa:	680b      	ldr	r3, [r1, #0]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d1fc      	bne.n	800b6aa <ai_platform_network_post_init+0x4a>
 800b6b0:	4b3c      	ldr	r3, [pc, #240]	; (800b7a4 <ai_platform_network_post_init+0x144>)
 800b6b2:	493d      	ldr	r1, [pc, #244]	; (800b7a8 <ai_platform_network_post_init+0x148>)
 800b6b4:	4a3d      	ldr	r2, [pc, #244]	; (800b7ac <ai_platform_network_post_init+0x14c>)
 800b6b6:	6019      	str	r1, [r3, #0]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d0ef      	beq.n	800b69e <ai_platform_network_post_init+0x3e>
 800b6be:	e7fe      	b.n	800b6be <ai_platform_network_post_init+0x5e>
 800b6c0:	4a34      	ldr	r2, [pc, #208]	; (800b794 <ai_platform_network_post_init+0x134>)
 800b6c2:	4935      	ldr	r1, [pc, #212]	; (800b798 <ai_platform_network_post_init+0x138>)
 800b6c4:	6813      	ldr	r3, [r2, #0]
 800b6c6:	f023 0301 	bic.w	r3, r3, #1
 800b6ca:	6013      	str	r3, [r2, #0]
 800b6cc:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800b6d0:	680b      	ldr	r3, [r1, #0]
 800b6d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b6d6:	189a      	adds	r2, r3, r2
 800b6d8:	2a01      	cmp	r2, #1
 800b6da:	d94a      	bls.n	800b772 <ai_platform_network_post_init+0x112>
 800b6dc:	f240 4249 	movw	r2, #1097	; 0x449
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d046      	beq.n	800b772 <ai_platform_network_post_init+0x112>
 800b6e4:	4b2d      	ldr	r3, [pc, #180]	; (800b79c <ai_platform_network_post_init+0x13c>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b6ec:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b6f0:	d030      	beq.n	800b754 <ai_platform_network_post_init+0xf4>
 800b6f2:	68c3      	ldr	r3, [r0, #12]
 800b6f4:	4604      	mov	r4, r0
 800b6f6:	f013 0502 	ands.w	r5, r3, #2
 800b6fa:	d024      	beq.n	800b746 <ai_platform_network_post_init+0xe6>
 800b6fc:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800b6fe:	b18b      	cbz	r3, 800b724 <ai_platform_network_post_init+0xc4>
 800b700:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800b702:	b90d      	cbnz	r5, 800b708 <ai_platform_network_post_init+0xa8>
 800b704:	e00e      	b.n	800b724 <ai_platform_network_post_init+0xc4>
 800b706:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b708:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b70a:	4629      	mov	r1, r5
 800b70c:	2000      	movs	r0, #0
 800b70e:	4798      	blx	r3
 800b710:	68ea      	ldr	r2, [r5, #12]
 800b712:	1b53      	subs	r3, r2, r5
 800b714:	4615      	mov	r5, r2
 800b716:	bf18      	it	ne
 800b718:	2301      	movne	r3, #1
 800b71a:	2a00      	cmp	r2, #0
 800b71c:	bf08      	it	eq
 800b71e:	2300      	moveq	r3, #0
 800b720:	2b00      	cmp	r3, #0
 800b722:	d1f0      	bne.n	800b706 <ai_platform_network_post_init+0xa6>
 800b724:	2001      	movs	r0, #1
 800b726:	bd38      	pop	{r3, r4, r5, pc}
 800b728:	4b21      	ldr	r3, [pc, #132]	; (800b7b0 <ai_platform_network_post_init+0x150>)
 800b72a:	2201      	movs	r2, #1
 800b72c:	4619      	mov	r1, r3
 800b72e:	601a      	str	r2, [r3, #0]
 800b730:	680b      	ldr	r3, [r1, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d1fc      	bne.n	800b730 <ai_platform_network_post_init+0xd0>
 800b736:	4b1f      	ldr	r3, [pc, #124]	; (800b7b4 <ai_platform_network_post_init+0x154>)
 800b738:	491b      	ldr	r1, [pc, #108]	; (800b7a8 <ai_platform_network_post_init+0x148>)
 800b73a:	4a1c      	ldr	r2, [pc, #112]	; (800b7ac <ai_platform_network_post_init+0x14c>)
 800b73c:	6019      	str	r1, [r3, #0]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4293      	cmp	r3, r2
 800b742:	d0ac      	beq.n	800b69e <ai_platform_network_post_init+0x3e>
 800b744:	e7fe      	b.n	800b744 <ai_platform_network_post_init+0xe4>
 800b746:	2210      	movs	r2, #16
 800b748:	2111      	movs	r1, #17
 800b74a:	3010      	adds	r0, #16
 800b74c:	f000 fd16 	bl	800c17c <core_set_error>
 800b750:	4628      	mov	r0, r5
 800b752:	bd38      	pop	{r3, r4, r5, pc}
 800b754:	4b16      	ldr	r3, [pc, #88]	; (800b7b0 <ai_platform_network_post_init+0x150>)
 800b756:	2201      	movs	r2, #1
 800b758:	4619      	mov	r1, r3
 800b75a:	601a      	str	r2, [r3, #0]
 800b75c:	680b      	ldr	r3, [r1, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d1fc      	bne.n	800b75c <ai_platform_network_post_init+0xfc>
 800b762:	4b14      	ldr	r3, [pc, #80]	; (800b7b4 <ai_platform_network_post_init+0x154>)
 800b764:	4910      	ldr	r1, [pc, #64]	; (800b7a8 <ai_platform_network_post_init+0x148>)
 800b766:	4a11      	ldr	r2, [pc, #68]	; (800b7ac <ai_platform_network_post_init+0x14c>)
 800b768:	6019      	str	r1, [r3, #0]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d0c0      	beq.n	800b6f2 <ai_platform_network_post_init+0x92>
 800b770:	e7fe      	b.n	800b770 <ai_platform_network_post_init+0x110>
 800b772:	4b0b      	ldr	r3, [pc, #44]	; (800b7a0 <ai_platform_network_post_init+0x140>)
 800b774:	2201      	movs	r2, #1
 800b776:	4619      	mov	r1, r3
 800b778:	601a      	str	r2, [r3, #0]
 800b77a:	680b      	ldr	r3, [r1, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d1fc      	bne.n	800b77a <ai_platform_network_post_init+0x11a>
 800b780:	4b08      	ldr	r3, [pc, #32]	; (800b7a4 <ai_platform_network_post_init+0x144>)
 800b782:	4909      	ldr	r1, [pc, #36]	; (800b7a8 <ai_platform_network_post_init+0x148>)
 800b784:	4a09      	ldr	r2, [pc, #36]	; (800b7ac <ai_platform_network_post_init+0x14c>)
 800b786:	6019      	str	r1, [r3, #0]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d0b1      	beq.n	800b6f2 <ai_platform_network_post_init+0x92>
 800b78e:	e7fe      	b.n	800b78e <ai_platform_network_post_init+0x12e>
 800b790:	a1c00100 	.word	0xa1c00100
 800b794:	e0002000 	.word	0xe0002000
 800b798:	e0042000 	.word	0xe0042000
 800b79c:	5c001000 	.word	0x5c001000
 800b7a0:	40023008 	.word	0x40023008
 800b7a4:	40023000 	.word	0x40023000
 800b7a8:	f407a5c2 	.word	0xf407a5c2
 800b7ac:	b5e8b5cd 	.word	0xb5e8b5cd
 800b7b0:	58024c08 	.word	0x58024c08
 800b7b4:	58024c00 	.word	0x58024c00

0800b7b8 <ai_platform_network_process>:
 800b7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7bc:	4692      	mov	sl, r2
 800b7be:	b083      	sub	sp, #12
 800b7c0:	4604      	mov	r4, r0
 800b7c2:	b120      	cbz	r0, 800b7ce <ai_platform_network_process+0x16>
 800b7c4:	4b86      	ldr	r3, [pc, #536]	; (800b9e0 <ai_platform_network_process+0x228>)
 800b7c6:	6802      	ldr	r2, [r0, #0]
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	bf18      	it	ne
 800b7cc:	2400      	movne	r4, #0
 800b7ce:	4a85      	ldr	r2, [pc, #532]	; (800b9e4 <ai_platform_network_process+0x22c>)
 800b7d0:	4885      	ldr	r0, [pc, #532]	; (800b9e8 <ai_platform_network_process+0x230>)
 800b7d2:	6813      	ldr	r3, [r2, #0]
 800b7d4:	f023 0301 	bic.w	r3, r3, #1
 800b7d8:	6013      	str	r3, [r2, #0]
 800b7da:	6803      	ldr	r3, [r0, #0]
 800b7dc:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 800b7e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b7e4:	181a      	adds	r2, r3, r0
 800b7e6:	2a01      	cmp	r2, #1
 800b7e8:	f240 80c6 	bls.w	800b978 <ai_platform_network_process+0x1c0>
 800b7ec:	f240 4249 	movw	r2, #1097	; 0x449
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	f000 80c1 	beq.w	800b978 <ai_platform_network_process+0x1c0>
 800b7f6:	4b7d      	ldr	r3, [pc, #500]	; (800b9ec <ai_platform_network_process+0x234>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b7fe:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b802:	f000 80a9 	beq.w	800b958 <ai_platform_network_process+0x1a0>
 800b806:	2c00      	cmp	r4, #0
 800b808:	f000 80db 	beq.w	800b9c2 <ai_platform_network_process+0x20a>
 800b80c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800b810:	68e0      	ldr	r0, [r4, #12]
 800b812:	461a      	mov	r2, r3
 800b814:	f000 0003 	and.w	r0, r0, #3
 800b818:	2b00      	cmp	r3, #0
 800b81a:	f000 80bd 	beq.w	800b998 <ai_platform_network_process+0x1e0>
 800b81e:	2600      	movs	r6, #0
 800b820:	2803      	cmp	r0, #3
 800b822:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800b824:	6166      	str	r6, [r4, #20]
 800b826:	f040 80c6 	bne.w	800b9b6 <ai_platform_network_process+0x1fe>
 800b82a:	2900      	cmp	r1, #0
 800b82c:	f000 80b7 	beq.w	800b99e <ai_platform_network_process+0x1e6>
 800b830:	fab5 f085 	clz	r0, r5
 800b834:	0940      	lsrs	r0, r0, #5
 800b836:	2800      	cmp	r0, #0
 800b838:	f040 80b1 	bne.w	800b99e <ai_platform_network_process+0x1e6>
 800b83c:	882e      	ldrh	r6, [r5, #0]
 800b83e:	2e00      	cmp	r6, #0
 800b840:	f000 80ad 	beq.w	800b99e <ai_platform_network_process+0x1e6>
 800b844:	888f      	ldrh	r7, [r1, #4]
 800b846:	686e      	ldr	r6, [r5, #4]
 800b848:	9701      	str	r7, [sp, #4]
 800b84a:	2e00      	cmp	r6, #0
 800b84c:	f000 825f 	beq.w	800bd0e <ai_platform_network_process+0x556>
 800b850:	6836      	ldr	r6, [r6, #0]
 800b852:	2e00      	cmp	r6, #0
 800b854:	f000 825b 	beq.w	800bd0e <ai_platform_network_process+0x556>
 800b858:	68ab      	ldr	r3, [r5, #8]
 800b85a:	f8d3 9000 	ldr.w	r9, [r3]
 800b85e:	f1b9 0f00 	cmp.w	r9, #0
 800b862:	f000 809c 	beq.w	800b99e <ai_platform_network_process+0x1e6>
 800b866:	460f      	mov	r7, r1
 800b868:	4680      	mov	r8, r0
 800b86a:	e05e      	b.n	800b92a <ai_platform_network_process+0x172>
 800b86c:	68f3      	ldr	r3, [r6, #12]
 800b86e:	68da      	ldr	r2, [r3, #12]
 800b870:	455a      	cmp	r2, fp
 800b872:	d168      	bne.n	800b946 <ai_platform_network_process+0x18e>
 800b874:	689a      	ldr	r2, [r3, #8]
 800b876:	4572      	cmp	r2, lr
 800b878:	d165      	bne.n	800b946 <ai_platform_network_process+0x18e>
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	459c      	cmp	ip, r3
 800b87e:	d162      	bne.n	800b946 <ai_platform_network_process+0x18e>
 800b880:	6800      	ldr	r0, [r0, #0]
 800b882:	f001 fb0f 	bl	800cea4 <ai_array_get_byte_size>
 800b886:	68f2      	ldr	r2, [r6, #12]
 800b888:	6973      	ldr	r3, [r6, #20]
 800b88a:	68d2      	ldr	r2, [r2, #12]
 800b88c:	68db      	ldr	r3, [r3, #12]
 800b88e:	fb03 f302 	mul.w	r3, r3, r2
 800b892:	4298      	cmp	r0, r3
 800b894:	d357      	bcc.n	800b946 <ai_platform_network_process+0x18e>
 800b896:	69b3      	ldr	r3, [r6, #24]
 800b898:	6818      	ldr	r0, [r3, #0]
 800b89a:	f001 fab7 	bl	800ce0c <ai_array_to_buffer_fmt>
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	4043      	eors	r3, r0
 800b8a2:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800b8a6:	f040 8229 	bne.w	800bcfc <ai_platform_network_process+0x544>
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	f000 821d 	beq.w	800bcec <ai_platform_network_process+0x534>
 800b8b2:	88bb      	ldrh	r3, [r7, #4]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	f000 808a 	beq.w	800b9ce <ai_platform_network_process+0x216>
 800b8ba:	9a01      	ldr	r2, [sp, #4]
 800b8bc:	68f1      	ldr	r1, [r6, #12]
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	68c9      	ldr	r1, [r1, #12]
 800b8c2:	bf38      	it	cc
 800b8c4:	461a      	movcc	r2, r3
 800b8c6:	9201      	str	r2, [sp, #4]
 800b8c8:	6972      	ldr	r2, [r6, #20]
 800b8ca:	68d3      	ldr	r3, [r2, #12]
 800b8cc:	fb03 f301 	mul.w	r3, r3, r1
 800b8d0:	f8c9 3008 	str.w	r3, [r9, #8]
 800b8d4:	88ba      	ldrh	r2, [r7, #4]
 800b8d6:	fb03 f302 	mul.w	r3, r3, r2
 800b8da:	f8c9 300c 	str.w	r3, [r9, #12]
 800b8de:	6939      	ldr	r1, [r7, #16]
 800b8e0:	f8c9 1004 	str.w	r1, [r9, #4]
 800b8e4:	693a      	ldr	r2, [r7, #16]
 800b8e6:	4413      	add	r3, r2
 800b8e8:	f8c9 3000 	str.w	r3, [r9]
 800b8ec:	69b0      	ldr	r0, [r6, #24]
 800b8ee:	6803      	ldr	r3, [r0, #0]
 800b8f0:	009a      	lsls	r2, r3, #2
 800b8f2:	d408      	bmi.n	800b906 <ai_platform_network_process+0x14e>
 800b8f4:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800b8f8:	1a9b      	subs	r3, r3, r2
 800b8fa:	4419      	add	r1, r3
 800b8fc:	6081      	str	r1, [r0, #8]
 800b8fe:	69b3      	ldr	r3, [r6, #24]
 800b900:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800b904:	60da      	str	r2, [r3, #12]
 800b906:	f108 0801 	add.w	r8, r8, #1
 800b90a:	882b      	ldrh	r3, [r5, #0]
 800b90c:	4598      	cmp	r8, r3
 800b90e:	d27b      	bcs.n	800ba08 <ai_platform_network_process+0x250>
 800b910:	686b      	ldr	r3, [r5, #4]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d078      	beq.n	800ba08 <ai_platform_network_process+0x250>
 800b916:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 800b91a:	2e00      	cmp	r6, #0
 800b91c:	d074      	beq.n	800ba08 <ai_platform_network_process+0x250>
 800b91e:	68ab      	ldr	r3, [r5, #8]
 800b920:	3718      	adds	r7, #24
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	eb13 1908 	adds.w	r9, r3, r8, lsl #4
 800b928:	d039      	beq.n	800b99e <ai_platform_network_process+0x1e6>
 800b92a:	f8b7 e008 	ldrh.w	lr, [r7, #8]
 800b92e:	f8b7 b006 	ldrh.w	fp, [r7, #6]
 800b932:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800b936:	fb0b f30e 	mul.w	r3, fp, lr
 800b93a:	69b0      	ldr	r0, [r6, #24]
 800b93c:	fb0c f303 	mul.w	r3, ip, r3
 800b940:	6841      	ldr	r1, [r0, #4]
 800b942:	4299      	cmp	r1, r3
 800b944:	d292      	bcs.n	800b86c <ai_platform_network_process+0xb4>
 800b946:	f104 0010 	add.w	r0, r4, #16
 800b94a:	2218      	movs	r2, #24
 800b94c:	2112      	movs	r1, #18
 800b94e:	f04f 0b00 	mov.w	fp, #0
 800b952:	f000 fc13 	bl	800c17c <core_set_error>
 800b956:	e02a      	b.n	800b9ae <ai_platform_network_process+0x1f6>
 800b958:	4b25      	ldr	r3, [pc, #148]	; (800b9f0 <ai_platform_network_process+0x238>)
 800b95a:	2201      	movs	r2, #1
 800b95c:	4618      	mov	r0, r3
 800b95e:	601a      	str	r2, [r3, #0]
 800b960:	6803      	ldr	r3, [r0, #0]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d1fc      	bne.n	800b960 <ai_platform_network_process+0x1a8>
 800b966:	4b23      	ldr	r3, [pc, #140]	; (800b9f4 <ai_platform_network_process+0x23c>)
 800b968:	4823      	ldr	r0, [pc, #140]	; (800b9f8 <ai_platform_network_process+0x240>)
 800b96a:	4a24      	ldr	r2, [pc, #144]	; (800b9fc <ai_platform_network_process+0x244>)
 800b96c:	6018      	str	r0, [r3, #0]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	4293      	cmp	r3, r2
 800b972:	f43f af48 	beq.w	800b806 <ai_platform_network_process+0x4e>
 800b976:	e7fe      	b.n	800b976 <ai_platform_network_process+0x1be>
 800b978:	4b21      	ldr	r3, [pc, #132]	; (800ba00 <ai_platform_network_process+0x248>)
 800b97a:	2201      	movs	r2, #1
 800b97c:	4618      	mov	r0, r3
 800b97e:	601a      	str	r2, [r3, #0]
 800b980:	6803      	ldr	r3, [r0, #0]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d1fc      	bne.n	800b980 <ai_platform_network_process+0x1c8>
 800b986:	4b1f      	ldr	r3, [pc, #124]	; (800ba04 <ai_platform_network_process+0x24c>)
 800b988:	481b      	ldr	r0, [pc, #108]	; (800b9f8 <ai_platform_network_process+0x240>)
 800b98a:	4a1c      	ldr	r2, [pc, #112]	; (800b9fc <ai_platform_network_process+0x244>)
 800b98c:	6018      	str	r0, [r3, #0]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4293      	cmp	r3, r2
 800b992:	f43f af38 	beq.w	800b806 <ai_platform_network_process+0x4e>
 800b996:	e7fe      	b.n	800b996 <ai_platform_network_process+0x1de>
 800b998:	2803      	cmp	r0, #3
 800b99a:	6163      	str	r3, [r4, #20]
 800b99c:	d10b      	bne.n	800b9b6 <ai_platform_network_process+0x1fe>
 800b99e:	f04f 0b00 	mov.w	fp, #0
 800b9a2:	f104 0010 	add.w	r0, r4, #16
 800b9a6:	2217      	movs	r2, #23
 800b9a8:	2112      	movs	r1, #18
 800b9aa:	f000 fbe7 	bl	800c17c <core_set_error>
 800b9ae:	4658      	mov	r0, fp
 800b9b0:	b003      	add	sp, #12
 800b9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b6:	f104 0010 	add.w	r0, r4, #16
 800b9ba:	2230      	movs	r2, #48	; 0x30
 800b9bc:	2111      	movs	r1, #17
 800b9be:	f000 fbdd 	bl	800c17c <core_set_error>
 800b9c2:	f04f 0b00 	mov.w	fp, #0
 800b9c6:	4658      	mov	r0, fp
 800b9c8:	b003      	add	sp, #12
 800b9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ce:	f104 0010 	add.w	r0, r4, #16
 800b9d2:	2221      	movs	r2, #33	; 0x21
 800b9d4:	2112      	movs	r1, #18
 800b9d6:	469b      	mov	fp, r3
 800b9d8:	f000 fbd0 	bl	800c17c <core_set_error>
 800b9dc:	e7e7      	b.n	800b9ae <ai_platform_network_process+0x1f6>
 800b9de:	bf00      	nop
 800b9e0:	a1c00100 	.word	0xa1c00100
 800b9e4:	e0002000 	.word	0xe0002000
 800b9e8:	e0042000 	.word	0xe0042000
 800b9ec:	5c001000 	.word	0x5c001000
 800b9f0:	58024c08 	.word	0x58024c08
 800b9f4:	58024c00 	.word	0x58024c00
 800b9f8:	f407a5c2 	.word	0xf407a5c2
 800b9fc:	b5e8b5cd 	.word	0xb5e8b5cd
 800ba00:	40023008 	.word	0x40023008
 800ba04:	40023000 	.word	0x40023000
 800ba08:	f1ba 0f00 	cmp.w	sl, #0
 800ba0c:	f000 808c 	beq.w	800bb28 <ai_platform_network_process+0x370>
 800ba10:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	f240 813b 	bls.w	800bc90 <ai_platform_network_process+0x4d8>
 800ba1a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800ba1c:	f115 0f0c 	cmn.w	r5, #12
 800ba20:	f000 8136 	beq.w	800bc90 <ai_platform_network_process+0x4d8>
 800ba24:	89ab      	ldrh	r3, [r5, #12]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	f000 8132 	beq.w	800bc90 <ai_platform_network_process+0x4d8>
 800ba2c:	4656      	mov	r6, sl
 800ba2e:	f04f 0900 	mov.w	r9, #0
 800ba32:	9400      	str	r4, [sp, #0]
 800ba34:	4599      	cmp	r9, r3
 800ba36:	d274      	bcs.n	800bb22 <ai_platform_network_process+0x36a>
 800ba38:	692b      	ldr	r3, [r5, #16]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d071      	beq.n	800bb22 <ai_platform_network_process+0x36a>
 800ba3e:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
 800ba42:	2f00      	cmp	r7, #0
 800ba44:	d06d      	beq.n	800bb22 <ai_platform_network_process+0x36a>
 800ba46:	696b      	ldr	r3, [r5, #20]
 800ba48:	ea4f 1409 	mov.w	r4, r9, lsl #4
 800ba4c:	f8d3 8000 	ldr.w	r8, [r3]
 800ba50:	eb18 0a04 	adds.w	sl, r8, r4
 800ba54:	f000 8125 	beq.w	800bca2 <ai_platform_network_process+0x4ea>
 800ba58:	f8b6 e008 	ldrh.w	lr, [r6, #8]
 800ba5c:	f8b6 b006 	ldrh.w	fp, [r6, #6]
 800ba60:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 800ba64:	fb0b f30e 	mul.w	r3, fp, lr
 800ba68:	69b8      	ldr	r0, [r7, #24]
 800ba6a:	fb0c f303 	mul.w	r3, ip, r3
 800ba6e:	6841      	ldr	r1, [r0, #4]
 800ba70:	4299      	cmp	r1, r3
 800ba72:	f0c0 810c 	bcc.w	800bc8e <ai_platform_network_process+0x4d6>
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	68da      	ldr	r2, [r3, #12]
 800ba7a:	455a      	cmp	r2, fp
 800ba7c:	f040 8107 	bne.w	800bc8e <ai_platform_network_process+0x4d6>
 800ba80:	689a      	ldr	r2, [r3, #8]
 800ba82:	4572      	cmp	r2, lr
 800ba84:	f040 8103 	bne.w	800bc8e <ai_platform_network_process+0x4d6>
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	459c      	cmp	ip, r3
 800ba8c:	f040 80ff 	bne.w	800bc8e <ai_platform_network_process+0x4d6>
 800ba90:	6800      	ldr	r0, [r0, #0]
 800ba92:	f001 fa07 	bl	800cea4 <ai_array_get_byte_size>
 800ba96:	68fa      	ldr	r2, [r7, #12]
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	68d2      	ldr	r2, [r2, #12]
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	fb03 f302 	mul.w	r3, r3, r2
 800baa2:	4298      	cmp	r0, r3
 800baa4:	f0c0 80f3 	bcc.w	800bc8e <ai_platform_network_process+0x4d6>
 800baa8:	69bb      	ldr	r3, [r7, #24]
 800baaa:	6818      	ldr	r0, [r3, #0]
 800baac:	f001 f9ae 	bl	800ce0c <ai_array_to_buffer_fmt>
 800bab0:	6833      	ldr	r3, [r6, #0]
 800bab2:	4043      	eors	r3, r0
 800bab4:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800bab8:	f040 810e 	bne.w	800bcd8 <ai_platform_network_process+0x520>
 800babc:	6933      	ldr	r3, [r6, #16]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	f000 8101 	beq.w	800bcc6 <ai_platform_network_process+0x50e>
 800bac4:	88b3      	ldrh	r3, [r6, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	f000 80f4 	beq.w	800bcb4 <ai_platform_network_process+0x4fc>
 800bacc:	9a01      	ldr	r2, [sp, #4]
 800bace:	68f9      	ldr	r1, [r7, #12]
 800bad0:	429a      	cmp	r2, r3
 800bad2:	68c9      	ldr	r1, [r1, #12]
 800bad4:	bf38      	it	cc
 800bad6:	461a      	movcc	r2, r3
 800bad8:	9201      	str	r2, [sp, #4]
 800bada:	697a      	ldr	r2, [r7, #20]
 800badc:	68d3      	ldr	r3, [r2, #12]
 800bade:	fb03 f301 	mul.w	r3, r3, r1
 800bae2:	f8ca 3008 	str.w	r3, [sl, #8]
 800bae6:	88b2      	ldrh	r2, [r6, #4]
 800bae8:	fb03 f302 	mul.w	r3, r3, r2
 800baec:	f8ca 300c 	str.w	r3, [sl, #12]
 800baf0:	6931      	ldr	r1, [r6, #16]
 800baf2:	f8ca 1004 	str.w	r1, [sl, #4]
 800baf6:	6932      	ldr	r2, [r6, #16]
 800baf8:	4413      	add	r3, r2
 800bafa:	f848 3004 	str.w	r3, [r8, r4]
 800bafe:	69b8      	ldr	r0, [r7, #24]
 800bb00:	6803      	ldr	r3, [r0, #0]
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	d408      	bmi.n	800bb18 <ai_platform_network_process+0x360>
 800bb06:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800bb0a:	1a9b      	subs	r3, r3, r2
 800bb0c:	4419      	add	r1, r3
 800bb0e:	6081      	str	r1, [r0, #8]
 800bb10:	69bb      	ldr	r3, [r7, #24]
 800bb12:	f8da 2004 	ldr.w	r2, [sl, #4]
 800bb16:	60da      	str	r2, [r3, #12]
 800bb18:	f109 0901 	add.w	r9, r9, #1
 800bb1c:	3618      	adds	r6, #24
 800bb1e:	89ab      	ldrh	r3, [r5, #12]
 800bb20:	e788      	b.n	800ba34 <ai_platform_network_process+0x27c>
 800bb22:	e9dd 4300 	ldrd	r4, r3, [sp]
 800bb26:	82a3      	strh	r3, [r4, #20]
 800bb28:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800bb2c:	2a00      	cmp	r2, #0
 800bb2e:	f000 80a9 	beq.w	800bc84 <ai_platform_network_process+0x4cc>
 800bb32:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800bb34:	2a01      	cmp	r2, #1
 800bb36:	f240 80a8 	bls.w	800bc8a <ai_platform_network_process+0x4d2>
 800bb3a:	f105 060c 	add.w	r6, r5, #12
 800bb3e:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 800bb42:	8aa3      	ldrh	r3, [r4, #20]
 800bb44:	455b      	cmp	r3, fp
 800bb46:	f67f af32 	bls.w	800b9ae <ai_platform_network_process+0x1f6>
 800bb4a:	9400      	str	r4, [sp, #0]
 800bb4c:	2d00      	cmp	r5, #0
 800bb4e:	d037      	beq.n	800bbc0 <ai_platform_network_process+0x408>
 800bb50:	882b      	ldrh	r3, [r5, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d034      	beq.n	800bbc0 <ai_platform_network_process+0x408>
 800bb56:	686b      	ldr	r3, [r5, #4]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d031      	beq.n	800bbc0 <ai_platform_network_process+0x408>
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d02e      	beq.n	800bbc0 <ai_platform_network_process+0x408>
 800bb62:	f04f 0800 	mov.w	r8, #0
 800bb66:	e01a      	b.n	800bb9e <ai_platform_network_process+0x3e6>
 800bb68:	68d4      	ldr	r4, [r2, #12]
 800bb6a:	1b00      	subs	r0, r0, r4
 800bb6c:	4401      	add	r1, r0
 800bb6e:	6091      	str	r1, [r2, #8]
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	699b      	ldr	r3, [r3, #24]
 800bb74:	60da      	str	r2, [r3, #12]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f108 0801 	add.w	r8, r8, #1
 800bb7c:	68b9      	ldr	r1, [r7, #8]
 800bb7e:	f85a 2009 	ldr.w	r2, [sl, r9]
 800bb82:	440b      	add	r3, r1
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d301      	bcc.n	800bb8c <ai_platform_network_process+0x3d4>
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	1ad3      	subs	r3, r2, r3
 800bb8c:	607b      	str	r3, [r7, #4]
 800bb8e:	882b      	ldrh	r3, [r5, #0]
 800bb90:	4598      	cmp	r8, r3
 800bb92:	d215      	bcs.n	800bbc0 <ai_platform_network_process+0x408>
 800bb94:	686b      	ldr	r3, [r5, #4]
 800bb96:	b19b      	cbz	r3, 800bbc0 <ai_platform_network_process+0x408>
 800bb98:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800bb9c:	b183      	cbz	r3, 800bbc0 <ai_platform_network_process+0x408>
 800bb9e:	68a9      	ldr	r1, [r5, #8]
 800bba0:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800bba4:	699a      	ldr	r2, [r3, #24]
 800bba6:	f8d1 a000 	ldr.w	sl, [r1]
 800bbaa:	6814      	ldr	r4, [r2, #0]
 800bbac:	eb0a 0709 	add.w	r7, sl, r9
 800bbb0:	6890      	ldr	r0, [r2, #8]
 800bbb2:	00a4      	lsls	r4, r4, #2
 800bbb4:	6879      	ldr	r1, [r7, #4]
 800bbb6:	d5d7      	bpl.n	800bb68 <ai_platform_network_process+0x3b0>
 800bbb8:	68ba      	ldr	r2, [r7, #8]
 800bbba:	f001 fb61 	bl	800d280 <memcpy>
 800bbbe:	e7da      	b.n	800bb76 <ai_platform_network_process+0x3be>
 800bbc0:	9800      	ldr	r0, [sp, #0]
 800bbc2:	f001 f8e9 	bl	800cd98 <ai_layers_forward_all>
 800bbc6:	2e00      	cmp	r6, #0
 800bbc8:	d04a      	beq.n	800bc60 <ai_platform_network_process+0x4a8>
 800bbca:	8833      	ldrh	r3, [r6, #0]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d047      	beq.n	800bc60 <ai_platform_network_process+0x4a8>
 800bbd0:	6873      	ldr	r3, [r6, #4]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d044      	beq.n	800bc60 <ai_platform_network_process+0x4a8>
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d041      	beq.n	800bc60 <ai_platform_network_process+0x4a8>
 800bbdc:	f04f 0800 	mov.w	r8, #0
 800bbe0:	e019      	b.n	800bc16 <ai_platform_network_process+0x45e>
 800bbe2:	f85a 2009 	ldr.w	r2, [sl, r9]
 800bbe6:	4291      	cmp	r1, r2
 800bbe8:	d301      	bcc.n	800bbee <ai_platform_network_process+0x436>
 800bbea:	68f9      	ldr	r1, [r7, #12]
 800bbec:	1a51      	subs	r1, r2, r1
 800bbee:	6079      	str	r1, [r7, #4]
 800bbf0:	f108 0801 	add.w	r8, r8, #1
 800bbf4:	6998      	ldr	r0, [r3, #24]
 800bbf6:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
 800bbfa:	1b12      	subs	r2, r2, r4
 800bbfc:	440a      	add	r2, r1
 800bbfe:	6082      	str	r2, [r0, #8]
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	699b      	ldr	r3, [r3, #24]
 800bc04:	60da      	str	r2, [r3, #12]
 800bc06:	8833      	ldrh	r3, [r6, #0]
 800bc08:	4598      	cmp	r8, r3
 800bc0a:	d229      	bcs.n	800bc60 <ai_platform_network_process+0x4a8>
 800bc0c:	6873      	ldr	r3, [r6, #4]
 800bc0e:	b33b      	cbz	r3, 800bc60 <ai_platform_network_process+0x4a8>
 800bc10:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800bc14:	b323      	cbz	r3, 800bc60 <ai_platform_network_process+0x4a8>
 800bc16:	68b2      	ldr	r2, [r6, #8]
 800bc18:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800bc1c:	f8d3 e018 	ldr.w	lr, [r3, #24]
 800bc20:	f8d2 a000 	ldr.w	sl, [r2]
 800bc24:	f8de 1000 	ldr.w	r1, [lr]
 800bc28:	eb0a 0709 	add.w	r7, sl, r9
 800bc2c:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 800bc30:	e9d7 0201 	ldrd	r0, r2, [r7, #4]
 800bc34:	eb00 0102 	add.w	r1, r0, r2
 800bc38:	d0d3      	beq.n	800bbe2 <ai_platform_network_process+0x42a>
 800bc3a:	f8de 1008 	ldr.w	r1, [lr, #8]
 800bc3e:	f001 fb1f 	bl	800d280 <memcpy>
 800bc42:	f85a 2009 	ldr.w	r2, [sl, r9]
 800bc46:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 800bc4a:	440b      	add	r3, r1
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d301      	bcc.n	800bc54 <ai_platform_network_process+0x49c>
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	1ad3      	subs	r3, r2, r3
 800bc54:	607b      	str	r3, [r7, #4]
 800bc56:	f108 0801 	add.w	r8, r8, #1
 800bc5a:	8833      	ldrh	r3, [r6, #0]
 800bc5c:	4598      	cmp	r8, r3
 800bc5e:	d3d5      	bcc.n	800bc0c <ai_platform_network_process+0x454>
 800bc60:	9b00      	ldr	r3, [sp, #0]
 800bc62:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 800bc66:	461a      	mov	r2, r3
 800bc68:	8a9b      	ldrh	r3, [r3, #20]
 800bc6a:	f10b 0b01 	add.w	fp, fp, #1
 800bc6e:	fa1f fb8b 	uxth.w	fp, fp
 800bc72:	455b      	cmp	r3, fp
 800bc74:	f8a2 b016 	strh.w	fp, [r2, #22]
 800bc78:	f63f af68 	bhi.w	800bb4c <ai_platform_network_process+0x394>
 800bc7c:	4658      	mov	r0, fp
 800bc7e:	b003      	add	sp, #12
 800bc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc84:	4615      	mov	r5, r2
 800bc86:	4616      	mov	r6, r2
 800bc88:	e759      	b.n	800bb3e <ai_platform_network_process+0x386>
 800bc8a:	2600      	movs	r6, #0
 800bc8c:	e757      	b.n	800bb3e <ai_platform_network_process+0x386>
 800bc8e:	9c00      	ldr	r4, [sp, #0]
 800bc90:	f104 0010 	add.w	r0, r4, #16
 800bc94:	2218      	movs	r2, #24
 800bc96:	2113      	movs	r1, #19
 800bc98:	f04f 0b00 	mov.w	fp, #0
 800bc9c:	f000 fa6e 	bl	800c17c <core_set_error>
 800bca0:	e685      	b.n	800b9ae <ai_platform_network_process+0x1f6>
 800bca2:	9c00      	ldr	r4, [sp, #0]
 800bca4:	2217      	movs	r2, #23
 800bca6:	2113      	movs	r1, #19
 800bca8:	46d3      	mov	fp, sl
 800bcaa:	f104 0010 	add.w	r0, r4, #16
 800bcae:	f000 fa65 	bl	800c17c <core_set_error>
 800bcb2:	e67c      	b.n	800b9ae <ai_platform_network_process+0x1f6>
 800bcb4:	9c00      	ldr	r4, [sp, #0]
 800bcb6:	2221      	movs	r2, #33	; 0x21
 800bcb8:	2113      	movs	r1, #19
 800bcba:	469b      	mov	fp, r3
 800bcbc:	f104 0010 	add.w	r0, r4, #16
 800bcc0:	f000 fa5c 	bl	800c17c <core_set_error>
 800bcc4:	e673      	b.n	800b9ae <ai_platform_network_process+0x1f6>
 800bcc6:	9c00      	ldr	r4, [sp, #0]
 800bcc8:	2217      	movs	r2, #23
 800bcca:	2113      	movs	r1, #19
 800bccc:	469b      	mov	fp, r3
 800bcce:	f104 0010 	add.w	r0, r4, #16
 800bcd2:	f000 fa53 	bl	800c17c <core_set_error>
 800bcd6:	e66a      	b.n	800b9ae <ai_platform_network_process+0x1f6>
 800bcd8:	9c00      	ldr	r4, [sp, #0]
 800bcda:	2219      	movs	r2, #25
 800bcdc:	2113      	movs	r1, #19
 800bcde:	f04f 0b00 	mov.w	fp, #0
 800bce2:	f104 0010 	add.w	r0, r4, #16
 800bce6:	f000 fa49 	bl	800c17c <core_set_error>
 800bcea:	e660      	b.n	800b9ae <ai_platform_network_process+0x1f6>
 800bcec:	f104 0010 	add.w	r0, r4, #16
 800bcf0:	2217      	movs	r2, #23
 800bcf2:	2112      	movs	r1, #18
 800bcf4:	469b      	mov	fp, r3
 800bcf6:	f000 fa41 	bl	800c17c <core_set_error>
 800bcfa:	e658      	b.n	800b9ae <ai_platform_network_process+0x1f6>
 800bcfc:	f104 0010 	add.w	r0, r4, #16
 800bd00:	2219      	movs	r2, #25
 800bd02:	2112      	movs	r1, #18
 800bd04:	f04f 0b00 	mov.w	fp, #0
 800bd08:	f000 fa38 	bl	800c17c <core_set_error>
 800bd0c:	e64f      	b.n	800b9ae <ai_platform_network_process+0x1f6>
 800bd0e:	f1ba 0f00 	cmp.w	sl, #0
 800bd12:	f47f ae7f 	bne.w	800ba14 <ai_platform_network_process+0x25c>
 800bd16:	e70d      	b.n	800bb34 <ai_platform_network_process+0x37c>

0800bd18 <ai_platform_observer_node_info>:
 800bd18:	b538      	push	{r3, r4, r5, lr}
 800bd1a:	b120      	cbz	r0, 800bd26 <ai_platform_observer_node_info+0xe>
 800bd1c:	4b48      	ldr	r3, [pc, #288]	; (800be40 <ai_platform_observer_node_info+0x128>)
 800bd1e:	6802      	ldr	r2, [r0, #0]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	bf18      	it	ne
 800bd24:	2000      	movne	r0, #0
 800bd26:	4a47      	ldr	r2, [pc, #284]	; (800be44 <ai_platform_observer_node_info+0x12c>)
 800bd28:	4c47      	ldr	r4, [pc, #284]	; (800be48 <ai_platform_observer_node_info+0x130>)
 800bd2a:	6813      	ldr	r3, [r2, #0]
 800bd2c:	f023 0301 	bic.w	r3, r3, #1
 800bd30:	6013      	str	r3, [r2, #0]
 800bd32:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800bd36:	6823      	ldr	r3, [r4, #0]
 800bd38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bd3c:	189a      	adds	r2, r3, r2
 800bd3e:	2a01      	cmp	r2, #1
 800bd40:	d941      	bls.n	800bdc6 <ai_platform_observer_node_info+0xae>
 800bd42:	f240 4249 	movw	r2, #1097	; 0x449
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d03d      	beq.n	800bdc6 <ai_platform_observer_node_info+0xae>
 800bd4a:	4b40      	ldr	r3, [pc, #256]	; (800be4c <ai_platform_observer_node_info+0x134>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bd52:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800bd56:	d027      	beq.n	800bda8 <ai_platform_observer_node_info+0x90>
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	d043      	beq.n	800bde4 <ai_platform_observer_node_info+0xcc>
 800bd5c:	fab1 f281 	clz	r2, r1
 800bd60:	0952      	lsrs	r2, r2, #5
 800bd62:	2a00      	cmp	r2, #0
 800bd64:	d13e      	bne.n	800bde4 <ai_platform_observer_node_info+0xcc>
 800bd66:	68c3      	ldr	r3, [r0, #12]
 800bd68:	f013 0402 	ands.w	r4, r3, #2
 800bd6c:	d043      	beq.n	800bdf6 <ai_platform_observer_node_info+0xde>
 800bd6e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800bd70:	b19b      	cbz	r3, 800bd9a <ai_platform_observer_node_info+0x82>
 800bd72:	880c      	ldrh	r4, [r1, #0]
 800bd74:	2c00      	cmp	r4, #0
 800bd76:	d047      	beq.n	800be08 <ai_platform_observer_node_info+0xf0>
 800bd78:	68dd      	ldr	r5, [r3, #12]
 800bd7a:	b175      	cbz	r5, 800bd9a <ai_platform_observer_node_info+0x82>
 800bd7c:	42ab      	cmp	r3, r5
 800bd7e:	d00c      	beq.n	800bd9a <ai_platform_observer_node_info+0x82>
 800bd80:	3c01      	subs	r4, #1
 800bd82:	462b      	mov	r3, r5
 800bd84:	b2a4      	uxth	r4, r4
 800bd86:	4294      	cmp	r4, r2
 800bd88:	f102 0201 	add.w	r2, r2, #1
 800bd8c:	d03c      	beq.n	800be08 <ai_platform_observer_node_info+0xf0>
 800bd8e:	68dd      	ldr	r5, [r3, #12]
 800bd90:	b11d      	cbz	r5, 800bd9a <ai_platform_observer_node_info+0x82>
 800bd92:	429d      	cmp	r5, r3
 800bd94:	d001      	beq.n	800bd9a <ai_platform_observer_node_info+0x82>
 800bd96:	2d00      	cmp	r5, #0
 800bd98:	d134      	bne.n	800be04 <ai_platform_observer_node_info+0xec>
 800bd9a:	2214      	movs	r2, #20
 800bd9c:	3010      	adds	r0, #16
 800bd9e:	4611      	mov	r1, r2
 800bda0:	f000 f9ec 	bl	800c17c <core_set_error>
 800bda4:	2000      	movs	r0, #0
 800bda6:	bd38      	pop	{r3, r4, r5, pc}
 800bda8:	4b29      	ldr	r3, [pc, #164]	; (800be50 <ai_platform_observer_node_info+0x138>)
 800bdaa:	2201      	movs	r2, #1
 800bdac:	461c      	mov	r4, r3
 800bdae:	601a      	str	r2, [r3, #0]
 800bdb0:	6823      	ldr	r3, [r4, #0]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d1fc      	bne.n	800bdb0 <ai_platform_observer_node_info+0x98>
 800bdb6:	4b27      	ldr	r3, [pc, #156]	; (800be54 <ai_platform_observer_node_info+0x13c>)
 800bdb8:	4c27      	ldr	r4, [pc, #156]	; (800be58 <ai_platform_observer_node_info+0x140>)
 800bdba:	4a28      	ldr	r2, [pc, #160]	; (800be5c <ai_platform_observer_node_info+0x144>)
 800bdbc:	601c      	str	r4, [r3, #0]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d0c9      	beq.n	800bd58 <ai_platform_observer_node_info+0x40>
 800bdc4:	e7fe      	b.n	800bdc4 <ai_platform_observer_node_info+0xac>
 800bdc6:	4b26      	ldr	r3, [pc, #152]	; (800be60 <ai_platform_observer_node_info+0x148>)
 800bdc8:	2201      	movs	r2, #1
 800bdca:	461c      	mov	r4, r3
 800bdcc:	601a      	str	r2, [r3, #0]
 800bdce:	6823      	ldr	r3, [r4, #0]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d1fc      	bne.n	800bdce <ai_platform_observer_node_info+0xb6>
 800bdd4:	4b23      	ldr	r3, [pc, #140]	; (800be64 <ai_platform_observer_node_info+0x14c>)
 800bdd6:	4c20      	ldr	r4, [pc, #128]	; (800be58 <ai_platform_observer_node_info+0x140>)
 800bdd8:	4a20      	ldr	r2, [pc, #128]	; (800be5c <ai_platform_observer_node_info+0x144>)
 800bdda:	601c      	str	r4, [r3, #0]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d0ba      	beq.n	800bd58 <ai_platform_observer_node_info+0x40>
 800bde2:	e7fe      	b.n	800bde2 <ai_platform_observer_node_info+0xca>
 800bde4:	2800      	cmp	r0, #0
 800bde6:	d0de      	beq.n	800bda6 <ai_platform_observer_node_info+0x8e>
 800bde8:	2210      	movs	r2, #16
 800bdea:	4410      	add	r0, r2
 800bdec:	4611      	mov	r1, r2
 800bdee:	f000 f9c5 	bl	800c17c <core_set_error>
 800bdf2:	2000      	movs	r0, #0
 800bdf4:	bd38      	pop	{r3, r4, r5, pc}
 800bdf6:	2210      	movs	r2, #16
 800bdf8:	2111      	movs	r1, #17
 800bdfa:	3010      	adds	r0, #16
 800bdfc:	f000 f9be 	bl	800c17c <core_set_error>
 800be00:	4620      	mov	r0, r4
 800be02:	bd38      	pop	{r3, r4, r5, pc}
 800be04:	462b      	mov	r3, r5
 800be06:	e7be      	b.n	800bd86 <ai_platform_observer_node_info+0x6e>
 800be08:	6958      	ldr	r0, [r3, #20]
 800be0a:	f242 7221 	movw	r2, #10017	; 0x2721
 800be0e:	60c8      	str	r0, [r1, #12]
 800be10:	8818      	ldrh	r0, [r3, #0]
 800be12:	4290      	cmp	r0, r2
 800be14:	d007      	beq.n	800be26 <ai_platform_observer_node_info+0x10e>
 800be16:	885c      	ldrh	r4, [r3, #2]
 800be18:	2200      	movs	r2, #0
 800be1a:	2001      	movs	r0, #1
 800be1c:	808c      	strh	r4, [r1, #4]
 800be1e:	881b      	ldrh	r3, [r3, #0]
 800be20:	608a      	str	r2, [r1, #8]
 800be22:	804b      	strh	r3, [r1, #2]
 800be24:	bd38      	pop	{r3, r4, r5, pc}
 800be26:	699a      	ldr	r2, [r3, #24]
 800be28:	2001      	movs	r0, #1
 800be2a:	8853      	ldrh	r3, [r2, #2]
 800be2c:	808b      	strh	r3, [r1, #4]
 800be2e:	8813      	ldrh	r3, [r2, #0]
 800be30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be38:	804b      	strh	r3, [r1, #2]
 800be3a:	6953      	ldr	r3, [r2, #20]
 800be3c:	608b      	str	r3, [r1, #8]
 800be3e:	bd38      	pop	{r3, r4, r5, pc}
 800be40:	a1c00100 	.word	0xa1c00100
 800be44:	e0002000 	.word	0xe0002000
 800be48:	e0042000 	.word	0xe0042000
 800be4c:	5c001000 	.word	0x5c001000
 800be50:	58024c08 	.word	0x58024c08
 800be54:	58024c00 	.word	0x58024c00
 800be58:	f407a5c2 	.word	0xf407a5c2
 800be5c:	b5e8b5cd 	.word	0xb5e8b5cd
 800be60:	40023008 	.word	0x40023008
 800be64:	40023000 	.word	0x40023000

0800be68 <ai_platform_observer_register>:
 800be68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be6c:	b118      	cbz	r0, 800be76 <ai_platform_observer_register+0xe>
 800be6e:	4c5b      	ldr	r4, [pc, #364]	; (800bfdc <ai_platform_observer_register+0x174>)
 800be70:	6805      	ldr	r5, [r0, #0]
 800be72:	42a5      	cmp	r5, r4
 800be74:	d02a      	beq.n	800becc <ai_platform_observer_register+0x64>
 800be76:	4a5a      	ldr	r2, [pc, #360]	; (800bfe0 <ai_platform_observer_register+0x178>)
 800be78:	f46f 668a 	mvn.w	r6, #1104	; 0x450
 800be7c:	4959      	ldr	r1, [pc, #356]	; (800bfe4 <ai_platform_observer_register+0x17c>)
 800be7e:	6813      	ldr	r3, [r2, #0]
 800be80:	f023 0301 	bic.w	r3, r3, #1
 800be84:	6013      	str	r3, [r2, #0]
 800be86:	680b      	ldr	r3, [r1, #0]
 800be88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800be8c:	199a      	adds	r2, r3, r6
 800be8e:	2a01      	cmp	r2, #1
 800be90:	d90d      	bls.n	800beae <ai_platform_observer_register+0x46>
 800be92:	f240 4249 	movw	r2, #1097	; 0x449
 800be96:	4293      	cmp	r3, r2
 800be98:	d009      	beq.n	800beae <ai_platform_observer_register+0x46>
 800be9a:	4b53      	ldr	r3, [pc, #332]	; (800bfe8 <ai_platform_observer_register+0x180>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bea2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800bea6:	d039      	beq.n	800bf1c <ai_platform_observer_register+0xb4>
 800bea8:	2000      	movs	r0, #0
 800beaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beae:	4b4f      	ldr	r3, [pc, #316]	; (800bfec <ai_platform_observer_register+0x184>)
 800beb0:	2201      	movs	r2, #1
 800beb2:	4619      	mov	r1, r3
 800beb4:	601a      	str	r2, [r3, #0]
 800beb6:	680b      	ldr	r3, [r1, #0]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d1fc      	bne.n	800beb6 <ai_platform_observer_register+0x4e>
 800bebc:	4b4c      	ldr	r3, [pc, #304]	; (800bff0 <ai_platform_observer_register+0x188>)
 800bebe:	494d      	ldr	r1, [pc, #308]	; (800bff4 <ai_platform_observer_register+0x18c>)
 800bec0:	4a4d      	ldr	r2, [pc, #308]	; (800bff8 <ai_platform_observer_register+0x190>)
 800bec2:	6019      	str	r1, [r3, #0]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d0ee      	beq.n	800bea8 <ai_platform_observer_register+0x40>
 800beca:	e7fe      	b.n	800beca <ai_platform_observer_register+0x62>
 800becc:	4d44      	ldr	r5, [pc, #272]	; (800bfe0 <ai_platform_observer_register+0x178>)
 800bece:	4e45      	ldr	r6, [pc, #276]	; (800bfe4 <ai_platform_observer_register+0x17c>)
 800bed0:	682c      	ldr	r4, [r5, #0]
 800bed2:	f024 0401 	bic.w	r4, r4, #1
 800bed6:	602c      	str	r4, [r5, #0]
 800bed8:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 800bedc:	6834      	ldr	r4, [r6, #0]
 800bede:	f3c4 040a 	ubfx	r4, r4, #0, #11
 800bee2:	1965      	adds	r5, r4, r5
 800bee4:	2d01      	cmp	r5, #1
 800bee6:	d961      	bls.n	800bfac <ai_platform_observer_register+0x144>
 800bee8:	f240 4549 	movw	r5, #1097	; 0x449
 800beec:	42ac      	cmp	r4, r5
 800beee:	d05d      	beq.n	800bfac <ai_platform_observer_register+0x144>
 800bef0:	4c3d      	ldr	r4, [pc, #244]	; (800bfe8 <ai_platform_observer_register+0x180>)
 800bef2:	6824      	ldr	r4, [r4, #0]
 800bef4:	f3c4 040a 	ubfx	r4, r4, #0, #11
 800bef8:	f5b4 6f8a 	cmp.w	r4, #1104	; 0x450
 800befc:	d047      	beq.n	800bf8e <ai_platform_observer_register+0x126>
 800befe:	f8d0 905c 	ldr.w	r9, [r0, #92]	; 0x5c
 800bf02:	4605      	mov	r5, r0
 800bf04:	461e      	mov	r6, r3
 800bf06:	4617      	mov	r7, r2
 800bf08:	4688      	mov	r8, r1
 800bf0a:	f1b9 0f00 	cmp.w	r9, #0
 800bf0e:	d014      	beq.n	800bf3a <ai_platform_observer_register+0xd2>
 800bf10:	2240      	movs	r2, #64	; 0x40
 800bf12:	2111      	movs	r1, #17
 800bf14:	3010      	adds	r0, #16
 800bf16:	f000 f931 	bl	800c17c <core_set_error>
 800bf1a:	e7c5      	b.n	800bea8 <ai_platform_observer_register+0x40>
 800bf1c:	4b37      	ldr	r3, [pc, #220]	; (800bffc <ai_platform_observer_register+0x194>)
 800bf1e:	2201      	movs	r2, #1
 800bf20:	4619      	mov	r1, r3
 800bf22:	601a      	str	r2, [r3, #0]
 800bf24:	680b      	ldr	r3, [r1, #0]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d1fc      	bne.n	800bf24 <ai_platform_observer_register+0xbc>
 800bf2a:	4b35      	ldr	r3, [pc, #212]	; (800c000 <ai_platform_observer_register+0x198>)
 800bf2c:	4931      	ldr	r1, [pc, #196]	; (800bff4 <ai_platform_observer_register+0x18c>)
 800bf2e:	4a32      	ldr	r2, [pc, #200]	; (800bff8 <ai_platform_observer_register+0x190>)
 800bf30:	6019      	str	r1, [r3, #0]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d0b7      	beq.n	800bea8 <ai_platform_observer_register+0x40>
 800bf38:	e7fe      	b.n	800bf38 <ai_platform_observer_register+0xd0>
 800bf3a:	2014      	movs	r0, #20
 800bf3c:	f000 f8f8 	bl	800c130 <core_mem_alloc>
 800bf40:	4604      	mov	r4, r0
 800bf42:	2800      	cmp	r0, #0
 800bf44:	d041      	beq.n	800bfca <ai_platform_observer_register+0x162>
 800bf46:	f8a0 900e 	strh.w	r9, [r0, #14]
 800bf4a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800bf4c:	b18b      	cbz	r3, 800bf72 <ai_platform_observer_register+0x10a>
 800bf4e:	2201      	movs	r2, #1
 800bf50:	81c2      	strh	r2, [r0, #14]
 800bf52:	68da      	ldr	r2, [r3, #12]
 800bf54:	b16a      	cbz	r2, 800bf72 <ai_platform_observer_register+0x10a>
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d00b      	beq.n	800bf72 <ai_platform_observer_register+0x10a>
 800bf5a:	2302      	movs	r3, #2
 800bf5c:	e003      	b.n	800bf66 <ai_platform_observer_register+0xfe>
 800bf5e:	4291      	cmp	r1, r2
 800bf60:	460a      	mov	r2, r1
 800bf62:	d006      	beq.n	800bf72 <ai_platform_observer_register+0x10a>
 800bf64:	b129      	cbz	r1, 800bf72 <ai_platform_observer_register+0x10a>
 800bf66:	81e3      	strh	r3, [r4, #14]
 800bf68:	3301      	adds	r3, #1
 800bf6a:	68d1      	ldr	r1, [r2, #12]
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	2900      	cmp	r1, #0
 800bf70:	d1f5      	bne.n	800bf5e <ai_platform_observer_register+0xf6>
 800bf72:	b2f3      	uxtb	r3, r6
 800bf74:	2100      	movs	r1, #0
 800bf76:	4a23      	ldr	r2, [pc, #140]	; (800c004 <ai_platform_observer_register+0x19c>)
 800bf78:	2001      	movs	r0, #1
 800bf7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bf7e:	f8c4 8000 	str.w	r8, [r4]
 800bf82:	6067      	str	r7, [r4, #4]
 800bf84:	60a3      	str	r3, [r4, #8]
 800bf86:	81a1      	strh	r1, [r4, #12]
 800bf88:	e9c5 2416 	strd	r2, r4, [r5, #88]	; 0x58
 800bf8c:	e78d      	b.n	800beaa <ai_platform_observer_register+0x42>
 800bf8e:	4c1b      	ldr	r4, [pc, #108]	; (800bffc <ai_platform_observer_register+0x194>)
 800bf90:	2501      	movs	r5, #1
 800bf92:	4626      	mov	r6, r4
 800bf94:	6025      	str	r5, [r4, #0]
 800bf96:	6834      	ldr	r4, [r6, #0]
 800bf98:	2c00      	cmp	r4, #0
 800bf9a:	d1fc      	bne.n	800bf96 <ai_platform_observer_register+0x12e>
 800bf9c:	4c18      	ldr	r4, [pc, #96]	; (800c000 <ai_platform_observer_register+0x198>)
 800bf9e:	4e15      	ldr	r6, [pc, #84]	; (800bff4 <ai_platform_observer_register+0x18c>)
 800bfa0:	4d15      	ldr	r5, [pc, #84]	; (800bff8 <ai_platform_observer_register+0x190>)
 800bfa2:	6026      	str	r6, [r4, #0]
 800bfa4:	6824      	ldr	r4, [r4, #0]
 800bfa6:	42ac      	cmp	r4, r5
 800bfa8:	d0a9      	beq.n	800befe <ai_platform_observer_register+0x96>
 800bfaa:	e7fe      	b.n	800bfaa <ai_platform_observer_register+0x142>
 800bfac:	4c0f      	ldr	r4, [pc, #60]	; (800bfec <ai_platform_observer_register+0x184>)
 800bfae:	2501      	movs	r5, #1
 800bfb0:	4626      	mov	r6, r4
 800bfb2:	6025      	str	r5, [r4, #0]
 800bfb4:	6834      	ldr	r4, [r6, #0]
 800bfb6:	2c00      	cmp	r4, #0
 800bfb8:	d1fc      	bne.n	800bfb4 <ai_platform_observer_register+0x14c>
 800bfba:	4c0d      	ldr	r4, [pc, #52]	; (800bff0 <ai_platform_observer_register+0x188>)
 800bfbc:	4e0d      	ldr	r6, [pc, #52]	; (800bff4 <ai_platform_observer_register+0x18c>)
 800bfbe:	4d0e      	ldr	r5, [pc, #56]	; (800bff8 <ai_platform_observer_register+0x190>)
 800bfc0:	6026      	str	r6, [r4, #0]
 800bfc2:	6824      	ldr	r4, [r4, #0]
 800bfc4:	42ac      	cmp	r4, r5
 800bfc6:	d09a      	beq.n	800befe <ai_platform_observer_register+0x96>
 800bfc8:	e7fe      	b.n	800bfc8 <ai_platform_observer_register+0x160>
 800bfca:	f105 0010 	add.w	r0, r5, #16
 800bfce:	2210      	movs	r2, #16
 800bfd0:	2131      	movs	r1, #49	; 0x31
 800bfd2:	f000 f8d3 	bl	800c17c <core_set_error>
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	e767      	b.n	800beaa <ai_platform_observer_register+0x42>
 800bfda:	bf00      	nop
 800bfdc:	a1c00100 	.word	0xa1c00100
 800bfe0:	e0002000 	.word	0xe0002000
 800bfe4:	e0042000 	.word	0xe0042000
 800bfe8:	5c001000 	.word	0x5c001000
 800bfec:	40023008 	.word	0x40023008
 800bff0:	40023000 	.word	0x40023000
 800bff4:	f407a5c2 	.word	0xf407a5c2
 800bff8:	b5e8b5cd 	.word	0xb5e8b5cd
 800bffc:	58024c08 	.word	0x58024c08
 800c000:	58024c00 	.word	0x58024c00
 800c004:	0800a7b9 	.word	0x0800a7b9

0800c008 <ai_platform_observer_unregister>:
 800c008:	b118      	cbz	r0, 800c012 <ai_platform_observer_unregister+0xa>
 800c00a:	4b3f      	ldr	r3, [pc, #252]	; (800c108 <ai_platform_observer_unregister+0x100>)
 800c00c:	6802      	ldr	r2, [r0, #0]
 800c00e:	429a      	cmp	r2, r3
 800c010:	d029      	beq.n	800c066 <ai_platform_observer_unregister+0x5e>
 800c012:	4a3e      	ldr	r2, [pc, #248]	; (800c10c <ai_platform_observer_unregister+0x104>)
 800c014:	493e      	ldr	r1, [pc, #248]	; (800c110 <ai_platform_observer_unregister+0x108>)
 800c016:	6813      	ldr	r3, [r2, #0]
 800c018:	f023 0301 	bic.w	r3, r3, #1
 800c01c:	6013      	str	r3, [r2, #0]
 800c01e:	680b      	ldr	r3, [r1, #0]
 800c020:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800c024:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c028:	185a      	adds	r2, r3, r1
 800c02a:	2a01      	cmp	r2, #1
 800c02c:	d90c      	bls.n	800c048 <ai_platform_observer_unregister+0x40>
 800c02e:	f240 4249 	movw	r2, #1097	; 0x449
 800c032:	4293      	cmp	r3, r2
 800c034:	d008      	beq.n	800c048 <ai_platform_observer_unregister+0x40>
 800c036:	4b37      	ldr	r3, [pc, #220]	; (800c114 <ai_platform_observer_unregister+0x10c>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c03e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c042:	d034      	beq.n	800c0ae <ai_platform_observer_unregister+0xa6>
 800c044:	2000      	movs	r0, #0
 800c046:	4770      	bx	lr
 800c048:	4b33      	ldr	r3, [pc, #204]	; (800c118 <ai_platform_observer_unregister+0x110>)
 800c04a:	2201      	movs	r2, #1
 800c04c:	4619      	mov	r1, r3
 800c04e:	601a      	str	r2, [r3, #0]
 800c050:	680b      	ldr	r3, [r1, #0]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d1fc      	bne.n	800c050 <ai_platform_observer_unregister+0x48>
 800c056:	4b31      	ldr	r3, [pc, #196]	; (800c11c <ai_platform_observer_unregister+0x114>)
 800c058:	4931      	ldr	r1, [pc, #196]	; (800c120 <ai_platform_observer_unregister+0x118>)
 800c05a:	4a32      	ldr	r2, [pc, #200]	; (800c124 <ai_platform_observer_unregister+0x11c>)
 800c05c:	6019      	str	r1, [r3, #0]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4293      	cmp	r3, r2
 800c062:	d0ef      	beq.n	800c044 <ai_platform_observer_unregister+0x3c>
 800c064:	e7fe      	b.n	800c064 <ai_platform_observer_unregister+0x5c>
 800c066:	4a29      	ldr	r2, [pc, #164]	; (800c10c <ai_platform_observer_unregister+0x104>)
 800c068:	4929      	ldr	r1, [pc, #164]	; (800c110 <ai_platform_observer_unregister+0x108>)
 800c06a:	6813      	ldr	r3, [r2, #0]
 800c06c:	f023 0301 	bic.w	r3, r3, #1
 800c070:	6013      	str	r3, [r2, #0]
 800c072:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800c076:	680b      	ldr	r3, [r1, #0]
 800c078:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c07c:	189a      	adds	r2, r3, r2
 800c07e:	2a01      	cmp	r2, #1
 800c080:	d933      	bls.n	800c0ea <ai_platform_observer_unregister+0xe2>
 800c082:	f240 4249 	movw	r2, #1097	; 0x449
 800c086:	4293      	cmp	r3, r2
 800c088:	d02f      	beq.n	800c0ea <ai_platform_observer_unregister+0xe2>
 800c08a:	4b22      	ldr	r3, [pc, #136]	; (800c114 <ai_platform_observer_unregister+0x10c>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c092:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c096:	d019      	beq.n	800c0cc <ai_platform_observer_unregister+0xc4>
 800c098:	b510      	push	{r4, lr}
 800c09a:	4604      	mov	r4, r0
 800c09c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800c09e:	b108      	cbz	r0, 800c0a4 <ai_platform_observer_unregister+0x9c>
 800c0a0:	f000 f854 	bl	800c14c <core_mem_free>
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	2001      	movs	r0, #1
 800c0a8:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 800c0ac:	bd10      	pop	{r4, pc}
 800c0ae:	4b1e      	ldr	r3, [pc, #120]	; (800c128 <ai_platform_observer_unregister+0x120>)
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	601a      	str	r2, [r3, #0]
 800c0b6:	680b      	ldr	r3, [r1, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d1fc      	bne.n	800c0b6 <ai_platform_observer_unregister+0xae>
 800c0bc:	4b1b      	ldr	r3, [pc, #108]	; (800c12c <ai_platform_observer_unregister+0x124>)
 800c0be:	4918      	ldr	r1, [pc, #96]	; (800c120 <ai_platform_observer_unregister+0x118>)
 800c0c0:	4a18      	ldr	r2, [pc, #96]	; (800c124 <ai_platform_observer_unregister+0x11c>)
 800c0c2:	6019      	str	r1, [r3, #0]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d0bc      	beq.n	800c044 <ai_platform_observer_unregister+0x3c>
 800c0ca:	e7fe      	b.n	800c0ca <ai_platform_observer_unregister+0xc2>
 800c0cc:	4b16      	ldr	r3, [pc, #88]	; (800c128 <ai_platform_observer_unregister+0x120>)
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	601a      	str	r2, [r3, #0]
 800c0d4:	680b      	ldr	r3, [r1, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d1fc      	bne.n	800c0d4 <ai_platform_observer_unregister+0xcc>
 800c0da:	4b14      	ldr	r3, [pc, #80]	; (800c12c <ai_platform_observer_unregister+0x124>)
 800c0dc:	4910      	ldr	r1, [pc, #64]	; (800c120 <ai_platform_observer_unregister+0x118>)
 800c0de:	4a11      	ldr	r2, [pc, #68]	; (800c124 <ai_platform_observer_unregister+0x11c>)
 800c0e0:	6019      	str	r1, [r3, #0]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d0d7      	beq.n	800c098 <ai_platform_observer_unregister+0x90>
 800c0e8:	e7fe      	b.n	800c0e8 <ai_platform_observer_unregister+0xe0>
 800c0ea:	4b0b      	ldr	r3, [pc, #44]	; (800c118 <ai_platform_observer_unregister+0x110>)
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	601a      	str	r2, [r3, #0]
 800c0f2:	680b      	ldr	r3, [r1, #0]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d1fc      	bne.n	800c0f2 <ai_platform_observer_unregister+0xea>
 800c0f8:	4b08      	ldr	r3, [pc, #32]	; (800c11c <ai_platform_observer_unregister+0x114>)
 800c0fa:	4909      	ldr	r1, [pc, #36]	; (800c120 <ai_platform_observer_unregister+0x118>)
 800c0fc:	4a09      	ldr	r2, [pc, #36]	; (800c124 <ai_platform_observer_unregister+0x11c>)
 800c0fe:	6019      	str	r1, [r3, #0]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	4293      	cmp	r3, r2
 800c104:	d0c8      	beq.n	800c098 <ai_platform_observer_unregister+0x90>
 800c106:	e7fe      	b.n	800c106 <ai_platform_observer_unregister+0xfe>
 800c108:	a1c00100 	.word	0xa1c00100
 800c10c:	e0002000 	.word	0xe0002000
 800c110:	e0042000 	.word	0xe0042000
 800c114:	5c001000 	.word	0x5c001000
 800c118:	40023008 	.word	0x40023008
 800c11c:	40023000 	.word	0x40023000
 800c120:	f407a5c2 	.word	0xf407a5c2
 800c124:	b5e8b5cd 	.word	0xb5e8b5cd
 800c128:	58024c08 	.word	0x58024c08
 800c12c:	58024c00 	.word	0x58024c00

0800c130 <core_mem_alloc>:
 800c130:	b150      	cbz	r0, 800c148 <core_mem_alloc+0x18>
 800c132:	3004      	adds	r0, #4
 800c134:	b508      	push	{r3, lr}
 800c136:	f001 f893 	bl	800d260 <malloc>
 800c13a:	4603      	mov	r3, r0
 800c13c:	b110      	cbz	r0, 800c144 <core_mem_alloc+0x14>
 800c13e:	3004      	adds	r0, #4
 800c140:	601b      	str	r3, [r3, #0]
 800c142:	bd08      	pop	{r3, pc}
 800c144:	2000      	movs	r0, #0
 800c146:	bd08      	pop	{r3, pc}
 800c148:	2000      	movs	r0, #0
 800c14a:	4770      	bx	lr

0800c14c <core_mem_free>:
 800c14c:	b138      	cbz	r0, 800c15e <core_mem_free+0x12>
 800c14e:	b508      	push	{r3, lr}
 800c150:	1f03      	subs	r3, r0, #4
 800c152:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800c156:	429a      	cmp	r2, r3
 800c158:	d100      	bne.n	800c15c <core_mem_free+0x10>
 800c15a:	b90b      	cbnz	r3, 800c160 <core_mem_free+0x14>
 800c15c:	bd08      	pop	{r3, pc}
 800c15e:	4770      	bx	lr
 800c160:	4618      	mov	r0, r3
 800c162:	f001 f885 	bl	800d270 <free>
 800c166:	2000      	movs	r0, #0
 800c168:	bd08      	pop	{r3, pc}
 800c16a:	bf00      	nop

0800c16c <core_init>:
 800c16c:	2001      	movs	r0, #1
 800c16e:	4770      	bx	lr

0800c170 <core_get_error>:
 800c170:	4603      	mov	r3, r0
 800c172:	2200      	movs	r2, #0
 800c174:	6800      	ldr	r0, [r0, #0]
 800c176:	601a      	str	r2, [r3, #0]
 800c178:	4770      	bx	lr
 800c17a:	bf00      	nop

0800c17c <core_set_error>:
 800c17c:	4603      	mov	r3, r0
 800c17e:	7800      	ldrb	r0, [r0, #0]
 800c180:	b930      	cbnz	r0, 800c190 <core_set_error+0x14>
 800c182:	7019      	strb	r1, [r3, #0]
 800c184:	2001      	movs	r0, #1
 800c186:	6819      	ldr	r1, [r3, #0]
 800c188:	f362 211f 	bfi	r1, r2, #8, #24
 800c18c:	6019      	str	r1, [r3, #0]
 800c18e:	4770      	bx	lr
 800c190:	2000      	movs	r0, #0
 800c192:	4770      	bx	lr

0800c194 <ai_dict8_dot_array_f32>:
 800c194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c198:	9d06      	ldr	r5, [sp, #24]
 800c19a:	4c88      	ldr	r4, [pc, #544]	; (800c3bc <ai_dict8_dot_array_f32+0x228>)
 800c19c:	2d07      	cmp	r5, #7
 800c19e:	442c      	add	r4, r5
 800c1a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c1a4:	f104 0620 	add.w	r6, r4, #32
 800c1a8:	d817      	bhi.n	800c1da <ai_dict8_dot_array_f32+0x46>
 800c1aa:	42b3      	cmp	r3, r6
 800c1ac:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800c3c0 <ai_dict8_dot_array_f32+0x22c>
 800c1b0:	d20b      	bcs.n	800c1ca <ai_dict8_dot_array_f32+0x36>
 800c1b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1b6:	ecf3 7a01 	vldmia	r3!, {s15}
 800c1ba:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800c1be:	42b3      	cmp	r3, r6
 800c1c0:	edd4 6a00 	vldr	s13, [r4]
 800c1c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c1c8:	d3f3      	bcc.n	800c1b2 <ai_dict8_dot_array_f32+0x1e>
 800c1ca:	edd0 7a00 	vldr	s15, [r0]
 800c1ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1d2:	ed80 7a00 	vstr	s14, [r0]
 800c1d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1da:	f001 0503 	and.w	r5, r1, #3
 800c1de:	2d02      	cmp	r5, #2
 800c1e0:	f000 80f0 	beq.w	800c3c4 <ai_dict8_dot_array_f32+0x230>
 800c1e4:	2d03      	cmp	r5, #3
 800c1e6:	f000 81ff 	beq.w	800c5e8 <ai_dict8_dot_array_f32+0x454>
 800c1ea:	2d01      	cmp	r5, #1
 800c1ec:	f000 81f0 	beq.w	800c5d0 <ai_dict8_dot_array_f32+0x43c>
 800c1f0:	42a3      	cmp	r3, r4
 800c1f2:	f200 81fc 	bhi.w	800c5ee <ai_dict8_dot_array_f32+0x45a>
 800c1f6:	1ae4      	subs	r4, r4, r3
 800c1f8:	f101 0810 	add.w	r8, r1, #16
 800c1fc:	f101 0508 	add.w	r5, r1, #8
 800c200:	f103 0720 	add.w	r7, r3, #32
 800c204:	0964      	lsrs	r4, r4, #5
 800c206:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800c3c0 <ai_dict8_dot_array_f32+0x22c>
 800c20a:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
 800c20e:	f815 ec07 	ldrb.w	lr, [r5, #-7]
 800c212:	3508      	adds	r5, #8
 800c214:	f815 cc10 	ldrb.w	ip, [r5, #-16]
 800c218:	3720      	adds	r7, #32
 800c21a:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800c21e:	ed57 5a0f 	vldr	s11, [r7, #-60]	; 0xffffffc4
 800c222:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800c226:	ed17 6a10 	vldr	s12, [r7, #-64]	; 0xffffffc0
 800c22a:	edde 7a00 	vldr	s15, [lr]
 800c22e:	ed57 6a0e 	vldr	s13, [r7, #-56]	; 0xffffffc8
 800c232:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c236:	eddc 5a00 	vldr	s11, [ip]
 800c23a:	f815 cc0e 	ldrb.w	ip, [r5, #-14]
 800c23e:	ed17 5a0d 	vldr	s10, [r7, #-52]	; 0xffffffcc
 800c242:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c246:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800c24a:	f815 ec0c 	ldrb.w	lr, [r5, #-12]
 800c24e:	ed9c 4a00 	vldr	s8, [ip]
 800c252:	f815 cc0d 	ldrb.w	ip, [r5, #-13]
 800c256:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800c25a:	ed17 6a0c 	vldr	s12, [r7, #-48]	; 0xffffffd0
 800c25e:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800c262:	ed57 4a0b 	vldr	s9, [r7, #-44]	; 0xffffffd4
 800c266:	eee4 7a26 	vfma.f32	s15, s8, s13
 800c26a:	ed57 5a0a 	vldr	s11, [r7, #-40]	; 0xffffffd8
 800c26e:	ed9c 4a00 	vldr	s8, [ip]
 800c272:	f815 cc0b 	ldrb.w	ip, [r5, #-11]
 800c276:	ed57 6a09 	vldr	s13, [r7, #-36]	; 0xffffffdc
 800c27a:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800c27e:	eee4 7a05 	vfma.f32	s15, s8, s10
 800c282:	ed9e 5a00 	vldr	s10, [lr]
 800c286:	ed9c 4a00 	vldr	s8, [ip]
 800c28a:	f815 ec0a 	ldrb.w	lr, [r5, #-10]
 800c28e:	f815 cc09 	ldrb.w	ip, [r5, #-9]
 800c292:	4545      	cmp	r5, r8
 800c294:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800c298:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800c29c:	eee5 7a06 	vfma.f32	s15, s10, s12
 800c2a0:	ed9e 5a00 	vldr	s10, [lr]
 800c2a4:	ed9c 6a00 	vldr	s12, [ip]
 800c2a8:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c2ac:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c2b0:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c2b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c2b8:	d1a9      	bne.n	800c20e <ai_dict8_dot_array_f32+0x7a>
 800c2ba:	3401      	adds	r4, #1
 800c2bc:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800c2c0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 800c2c4:	42b3      	cmp	r3, r6
 800c2c6:	d280      	bcs.n	800c1ca <ai_dict8_dot_array_f32+0x36>
 800c2c8:	461c      	mov	r4, r3
 800c2ca:	780d      	ldrb	r5, [r1, #0]
 800c2cc:	ecf4 6a01 	vldmia	r4!, {s13}
 800c2d0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800c2d4:	42a6      	cmp	r6, r4
 800c2d6:	edd5 7a00 	vldr	s15, [r5]
 800c2da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c2de:	f67f af74 	bls.w	800c1ca <ai_dict8_dot_array_f32+0x36>
 800c2e2:	784d      	ldrb	r5, [r1, #1]
 800c2e4:	f103 0408 	add.w	r4, r3, #8
 800c2e8:	edd3 6a01 	vldr	s13, [r3, #4]
 800c2ec:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800c2f0:	42a6      	cmp	r6, r4
 800c2f2:	edd5 7a00 	vldr	s15, [r5]
 800c2f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c2fa:	f67f af66 	bls.w	800c1ca <ai_dict8_dot_array_f32+0x36>
 800c2fe:	788d      	ldrb	r5, [r1, #2]
 800c300:	f103 040c 	add.w	r4, r3, #12
 800c304:	edd3 6a02 	vldr	s13, [r3, #8]
 800c308:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800c30c:	42a6      	cmp	r6, r4
 800c30e:	edd5 7a00 	vldr	s15, [r5]
 800c312:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c316:	f67f af58 	bls.w	800c1ca <ai_dict8_dot_array_f32+0x36>
 800c31a:	78cd      	ldrb	r5, [r1, #3]
 800c31c:	f103 0410 	add.w	r4, r3, #16
 800c320:	edd3 6a03 	vldr	s13, [r3, #12]
 800c324:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800c328:	42a6      	cmp	r6, r4
 800c32a:	edd5 7a00 	vldr	s15, [r5]
 800c32e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c332:	f67f af4a 	bls.w	800c1ca <ai_dict8_dot_array_f32+0x36>
 800c336:	790d      	ldrb	r5, [r1, #4]
 800c338:	f103 0414 	add.w	r4, r3, #20
 800c33c:	edd3 6a04 	vldr	s13, [r3, #16]
 800c340:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800c344:	42a6      	cmp	r6, r4
 800c346:	edd5 7a00 	vldr	s15, [r5]
 800c34a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c34e:	f67f af3c 	bls.w	800c1ca <ai_dict8_dot_array_f32+0x36>
 800c352:	794d      	ldrb	r5, [r1, #5]
 800c354:	f103 0418 	add.w	r4, r3, #24
 800c358:	edd3 6a05 	vldr	s13, [r3, #20]
 800c35c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800c360:	42a6      	cmp	r6, r4
 800c362:	edd5 7a00 	vldr	s15, [r5]
 800c366:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c36a:	f67f af2e 	bls.w	800c1ca <ai_dict8_dot_array_f32+0x36>
 800c36e:	798d      	ldrb	r5, [r1, #6]
 800c370:	f103 041c 	add.w	r4, r3, #28
 800c374:	edd3 6a06 	vldr	s13, [r3, #24]
 800c378:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800c37c:	42a6      	cmp	r6, r4
 800c37e:	edd5 7a00 	vldr	s15, [r5]
 800c382:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c386:	f67f af20 	bls.w	800c1ca <ai_dict8_dot_array_f32+0x36>
 800c38a:	79cd      	ldrb	r5, [r1, #7]
 800c38c:	f103 0420 	add.w	r4, r3, #32
 800c390:	edd3 6a07 	vldr	s13, [r3, #28]
 800c394:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800c398:	42a6      	cmp	r6, r4
 800c39a:	edd5 7a00 	vldr	s15, [r5]
 800c39e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c3a2:	f67f af12 	bls.w	800c1ca <ai_dict8_dot_array_f32+0x36>
 800c3a6:	7a09      	ldrb	r1, [r1, #8]
 800c3a8:	edd3 7a08 	vldr	s15, [r3, #32]
 800c3ac:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800c3b0:	edd2 6a00 	vldr	s13, [r2]
 800c3b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c3b8:	e707      	b.n	800c1ca <ai_dict8_dot_array_f32+0x36>
 800c3ba:	bf00      	nop
 800c3bc:	3ffffff8 	.word	0x3ffffff8
 800c3c0:	00000000 	.word	0x00000000
 800c3c4:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 800c3c0 <ai_dict8_dot_array_f32+0x22c>
 800c3c8:	780d      	ldrb	r5, [r1, #0]
 800c3ca:	3304      	adds	r3, #4
 800c3cc:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c3d0:	3101      	adds	r1, #1
 800c3d2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800c3d6:	edd5 6a00 	vldr	s13, [r5]
 800c3da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c3de:	780d      	ldrb	r5, [r1, #0]
 800c3e0:	1d1f      	adds	r7, r3, #4
 800c3e2:	edd3 7a00 	vldr	s15, [r3]
 800c3e6:	f101 0c01 	add.w	ip, r1, #1
 800c3ea:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800c3ee:	42bc      	cmp	r4, r7
 800c3f0:	edd5 6a00 	vldr	s13, [r5]
 800c3f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c3f8:	d365      	bcc.n	800c4c6 <ai_dict8_dot_array_f32+0x332>
 800c3fa:	3324      	adds	r3, #36	; 0x24
 800c3fc:	f101 0e11 	add.w	lr, r1, #17
 800c400:	3109      	adds	r1, #9
 800c402:	eba6 0803 	sub.w	r8, r6, r3
 800c406:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800c40a:	eb0e 0ec8 	add.w	lr, lr, r8, lsl #3
 800c40e:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800c412:	3108      	adds	r1, #8
 800c414:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 800c418:	3320      	adds	r3, #32
 800c41a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800c41e:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 800c422:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800c426:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 800c42a:	edd5 7a00 	vldr	s15, [r5]
 800c42e:	ed53 6a0e 	vldr	s13, [r3, #-56]	; 0xffffffc8
 800c432:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c436:	edd4 5a00 	vldr	s11, [r4]
 800c43a:	f811 4c0e 	ldrb.w	r4, [r1, #-14]
 800c43e:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 800c442:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c446:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800c44a:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800c44e:	ed94 4a00 	vldr	s8, [r4]
 800c452:	f811 4c0d 	ldrb.w	r4, [r1, #-13]
 800c456:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800c45a:	ed13 6a0c 	vldr	s12, [r3, #-48]	; 0xffffffd0
 800c45e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800c462:	ed53 4a0b 	vldr	s9, [r3, #-44]	; 0xffffffd4
 800c466:	eee4 7a26 	vfma.f32	s15, s8, s13
 800c46a:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 800c46e:	ed94 4a00 	vldr	s8, [r4]
 800c472:	f811 4c0b 	ldrb.w	r4, [r1, #-11]
 800c476:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 800c47a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800c47e:	eee4 7a05 	vfma.f32	s15, s8, s10
 800c482:	ed95 5a00 	vldr	s10, [r5]
 800c486:	ed94 4a00 	vldr	s8, [r4]
 800c48a:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800c48e:	f811 4c09 	ldrb.w	r4, [r1, #-9]
 800c492:	458e      	cmp	lr, r1
 800c494:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800c498:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800c49c:	eee5 7a06 	vfma.f32	s15, s10, s12
 800c4a0:	ed95 5a00 	vldr	s10, [r5]
 800c4a4:	ed94 6a00 	vldr	s12, [r4]
 800c4a8:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c4ac:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c4b0:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c4b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c4b8:	d1a9      	bne.n	800c40e <ai_dict8_dot_array_f32+0x27a>
 800c4ba:	f108 0801 	add.w	r8, r8, #1
 800c4be:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 800c4c2:	eb07 1748 	add.w	r7, r7, r8, lsl #5
 800c4c6:	42b7      	cmp	r7, r6
 800c4c8:	f4bf ae7f 	bcs.w	800c1ca <ai_dict8_dot_array_f32+0x36>
 800c4cc:	463b      	mov	r3, r7
 800c4ce:	f89c 1000 	ldrb.w	r1, [ip]
 800c4d2:	ecf3 6a01 	vldmia	r3!, {s13}
 800c4d6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800c4da:	429e      	cmp	r6, r3
 800c4dc:	edd1 7a00 	vldr	s15, [r1]
 800c4e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c4e4:	f67f ae71 	bls.w	800c1ca <ai_dict8_dot_array_f32+0x36>
 800c4e8:	f89c 1001 	ldrb.w	r1, [ip, #1]
 800c4ec:	f107 0308 	add.w	r3, r7, #8
 800c4f0:	edd7 6a01 	vldr	s13, [r7, #4]
 800c4f4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800c4f8:	429e      	cmp	r6, r3
 800c4fa:	edd1 7a00 	vldr	s15, [r1]
 800c4fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c502:	f67f ae62 	bls.w	800c1ca <ai_dict8_dot_array_f32+0x36>
 800c506:	f89c 1002 	ldrb.w	r1, [ip, #2]
 800c50a:	f107 030c 	add.w	r3, r7, #12
 800c50e:	edd7 6a02 	vldr	s13, [r7, #8]
 800c512:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800c516:	429e      	cmp	r6, r3
 800c518:	edd1 7a00 	vldr	s15, [r1]
 800c51c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c520:	f67f ae53 	bls.w	800c1ca <ai_dict8_dot_array_f32+0x36>
 800c524:	f89c 1003 	ldrb.w	r1, [ip, #3]
 800c528:	f107 0310 	add.w	r3, r7, #16
 800c52c:	edd7 6a03 	vldr	s13, [r7, #12]
 800c530:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800c534:	429e      	cmp	r6, r3
 800c536:	edd1 7a00 	vldr	s15, [r1]
 800c53a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c53e:	f67f ae44 	bls.w	800c1ca <ai_dict8_dot_array_f32+0x36>
 800c542:	f89c 1004 	ldrb.w	r1, [ip, #4]
 800c546:	f107 0314 	add.w	r3, r7, #20
 800c54a:	edd7 6a04 	vldr	s13, [r7, #16]
 800c54e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800c552:	429e      	cmp	r6, r3
 800c554:	edd1 7a00 	vldr	s15, [r1]
 800c558:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c55c:	f67f ae35 	bls.w	800c1ca <ai_dict8_dot_array_f32+0x36>
 800c560:	f89c 1005 	ldrb.w	r1, [ip, #5]
 800c564:	f107 0318 	add.w	r3, r7, #24
 800c568:	edd7 6a05 	vldr	s13, [r7, #20]
 800c56c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800c570:	429e      	cmp	r6, r3
 800c572:	edd1 7a00 	vldr	s15, [r1]
 800c576:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c57a:	f67f ae26 	bls.w	800c1ca <ai_dict8_dot_array_f32+0x36>
 800c57e:	f89c 1006 	ldrb.w	r1, [ip, #6]
 800c582:	f107 031c 	add.w	r3, r7, #28
 800c586:	edd7 6a06 	vldr	s13, [r7, #24]
 800c58a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800c58e:	429e      	cmp	r6, r3
 800c590:	edd1 7a00 	vldr	s15, [r1]
 800c594:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c598:	f67f ae17 	bls.w	800c1ca <ai_dict8_dot_array_f32+0x36>
 800c59c:	f89c 1007 	ldrb.w	r1, [ip, #7]
 800c5a0:	f107 0320 	add.w	r3, r7, #32
 800c5a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c5a8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800c5ac:	429e      	cmp	r6, r3
 800c5ae:	edd1 7a00 	vldr	s15, [r1]
 800c5b2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c5b6:	f67f ae08 	bls.w	800c1ca <ai_dict8_dot_array_f32+0x36>
 800c5ba:	f89c 3008 	ldrb.w	r3, [ip, #8]
 800c5be:	edd7 7a08 	vldr	s15, [r7, #32]
 800c5c2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c5c6:	edd2 6a00 	vldr	s13, [r2]
 800c5ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c5ce:	e5fc      	b.n	800c1ca <ai_dict8_dot_array_f32+0x36>
 800c5d0:	780d      	ldrb	r5, [r1, #0]
 800c5d2:	3304      	adds	r3, #4
 800c5d4:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c5d8:	3101      	adds	r1, #1
 800c5da:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800c5de:	ed95 7a00 	vldr	s14, [r5]
 800c5e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5e6:	e6ef      	b.n	800c3c8 <ai_dict8_dot_array_f32+0x234>
 800c5e8:	ed1f 7a8b 	vldr	s14, [pc, #-556]	; 800c3c0 <ai_dict8_dot_array_f32+0x22c>
 800c5ec:	e6f7      	b.n	800c3de <ai_dict8_dot_array_f32+0x24a>
 800c5ee:	ed1f 7a8c 	vldr	s14, [pc, #-560]	; 800c3c0 <ai_dict8_dot_array_f32+0x22c>
 800c5f2:	e667      	b.n	800c2c4 <ai_dict8_dot_array_f32+0x130>

0800c5f4 <ai_dict4_dot_array_f32>:
 800c5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c5fa:	f027 0c01 	bic.w	ip, r7, #1
 800c5fe:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800c602:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800c606:	f000 80ad 	beq.w	800c764 <ai_dict4_dot_array_f32+0x170>
 800c60a:	1d0d      	adds	r5, r1, #4
 800c60c:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800c610:	f103 0420 	add.w	r4, r3, #32
 800c614:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800c76c <ai_dict4_dot_array_f32+0x178>
 800c618:	eb05 0e09 	add.w	lr, r5, r9
 800c61c:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 800c620:	3504      	adds	r5, #4
 800c622:	ed14 5a07 	vldr	s10, [r4, #-28]	; 0xffffffe4
 800c626:	3420      	adds	r4, #32
 800c628:	f006 0a0f 	and.w	sl, r6, #15
 800c62c:	0936      	lsrs	r6, r6, #4
 800c62e:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 800c632:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800c636:	ed14 4a0e 	vldr	s8, [r4, #-56]	; 0xffffffc8
 800c63a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c63e:	ed14 6a0d 	vldr	s12, [r4, #-52]	; 0xffffffcc
 800c642:	edda 7a00 	vldr	s15, [sl]
 800c646:	edd6 5a00 	vldr	s11, [r6]
 800c64a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c64e:	f815 6c07 	ldrb.w	r6, [r5, #-7]
 800c652:	ed54 3a0c 	vldr	s7, [r4, #-48]	; 0xffffffd0
 800c656:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800c65a:	f006 060f 	and.w	r6, r6, #15
 800c65e:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800c662:	ed54 4a0b 	vldr	s9, [r4, #-44]	; 0xffffffd4
 800c666:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800c66a:	ed54 5a0a 	vldr	s11, [r4, #-40]	; 0xffffffd8
 800c66e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c672:	ed54 6a09 	vldr	s13, [r4, #-36]	; 0xffffffdc
 800c676:	ed9a 3a00 	vldr	s6, [sl]
 800c67a:	ed96 5a00 	vldr	s10, [r6]
 800c67e:	f815 ac06 	ldrb.w	sl, [r5, #-6]
 800c682:	eee3 7a04 	vfma.f32	s15, s6, s8
 800c686:	f815 6c05 	ldrb.w	r6, [r5, #-5]
 800c68a:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 800c68e:	f00a 0a0f 	and.w	sl, sl, #15
 800c692:	45ae      	cmp	lr, r5
 800c694:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800c698:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800c69c:	ed9b 3a00 	vldr	s6, [fp]
 800c6a0:	ea4f 1b16 	mov.w	fp, r6, lsr #4
 800c6a4:	eee5 7a06 	vfma.f32	s15, s10, s12
 800c6a8:	ed9a 4a00 	vldr	s8, [sl]
 800c6ac:	eb02 0a8b 	add.w	sl, r2, fp, lsl #2
 800c6b0:	f006 060f 	and.w	r6, r6, #15
 800c6b4:	ed9a 5a00 	vldr	s10, [sl]
 800c6b8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c6bc:	ed96 6a00 	vldr	s12, [r6]
 800c6c0:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c6c4:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c6c8:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c6cc:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c6d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c6d4:	d1a2      	bne.n	800c61c <ai_dict4_dot_array_f32+0x28>
 800c6d6:	4449      	add	r1, r9
 800c6d8:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800c6dc:	459c      	cmp	ip, r3
 800c6de:	d92d      	bls.n	800c73c <ai_dict4_dot_array_f32+0x148>
 800c6e0:	f10c 0c07 	add.w	ip, ip, #7
 800c6e4:	f103 0508 	add.w	r5, r3, #8
 800c6e8:	f103 0810 	add.w	r8, r3, #16
 800c6ec:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 800c6f0:	ebac 0c05 	sub.w	ip, ip, r5
 800c6f4:	f02c 0407 	bic.w	r4, ip, #7
 800c6f8:	44a0      	add	r8, r4
 800c6fa:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800c6fe:	3508      	adds	r5, #8
 800c700:	ed55 5a03 	vldr	s11, [r5, #-12]
 800c704:	f004 060f 	and.w	r6, r4, #15
 800c708:	0924      	lsrs	r4, r4, #4
 800c70a:	ed55 6a04 	vldr	s13, [r5, #-16]
 800c70e:	45a8      	cmp	r8, r5
 800c710:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c714:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800c718:	edd6 7a00 	vldr	s15, [r6]
 800c71c:	ed94 6a00 	vldr	s12, [r4]
 800c720:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c724:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c728:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c72c:	d1e5      	bne.n	800c6fa <ai_dict4_dot_array_f32+0x106>
 800c72e:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800c732:	f10c 0c01 	add.w	ip, ip, #1
 800c736:	4461      	add	r1, ip
 800c738:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800c73c:	07fc      	lsls	r4, r7, #31
 800c73e:	d509      	bpl.n	800c754 <ai_dict4_dot_array_f32+0x160>
 800c740:	7809      	ldrb	r1, [r1, #0]
 800c742:	edd3 7a00 	vldr	s15, [r3]
 800c746:	090b      	lsrs	r3, r1, #4
 800c748:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c74c:	edd2 6a00 	vldr	s13, [r2]
 800c750:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c754:	edd0 7a00 	vldr	s15, [r0]
 800c758:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c75c:	ed80 7a00 	vstr	s14, [r0]
 800c760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c764:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800c76c <ai_dict4_dot_array_f32+0x178>
 800c768:	e7b8      	b.n	800c6dc <ai_dict4_dot_array_f32+0xe8>
 800c76a:	bf00      	nop
 800c76c:	00000000 	.word	0x00000000

0800c770 <forward_dense>:
 800c770:	6942      	ldr	r2, [r0, #20]
 800c772:	8813      	ldrh	r3, [r2, #0]
 800c774:	2b00      	cmp	r3, #0
 800c776:	f000 81c8 	beq.w	800cb0a <forward_dense+0x39a>
 800c77a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c77e:	ed2d 8b08 	vpush	{d8-d11}
 800c782:	6851      	ldr	r1, [r2, #4]
 800c784:	b091      	sub	sp, #68	; 0x44
 800c786:	684d      	ldr	r5, [r1, #4]
 800c788:	b105      	cbz	r5, 800c78c <forward_dense+0x1c>
 800c78a:	682d      	ldr	r5, [r5, #0]
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	f240 81b9 	bls.w	800cb04 <forward_dense+0x394>
 800c792:	690a      	ldr	r2, [r1, #16]
 800c794:	b102      	cbz	r2, 800c798 <forward_dense+0x28>
 800c796:	6812      	ldr	r2, [r2, #0]
 800c798:	2b02      	cmp	r3, #2
 800c79a:	f000 81b8 	beq.w	800cb0e <forward_dense+0x39e>
 800c79e:	69cb      	ldr	r3, [r1, #28]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	f000 8209 	beq.w	800cbb8 <forward_dense+0x448>
 800c7a6:	6818      	ldr	r0, [r3, #0]
 800c7a8:	9008      	str	r0, [sp, #32]
 800c7aa:	f111 0018 	adds.w	r0, r1, #24
 800c7ae:	f000 81dc 	beq.w	800cb6a <forward_dense+0x3fa>
 800c7b2:	8b09      	ldrh	r1, [r1, #24]
 800c7b4:	2901      	cmp	r1, #1
 800c7b6:	f240 81fc 	bls.w	800cbb2 <forward_dense+0x442>
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	f000 81d7 	beq.w	800cb6e <forward_dense+0x3fe>
 800c7c0:	685b      	ldr	r3, [r3, #4]
 800c7c2:	9306      	str	r3, [sp, #24]
 800c7c4:	9b08      	ldr	r3, [sp, #32]
 800c7c6:	68d6      	ldr	r6, [r2, #12]
 800c7c8:	699b      	ldr	r3, [r3, #24]
 800c7ca:	68b0      	ldr	r0, [r6, #8]
 800c7cc:	681f      	ldr	r7, [r3, #0]
 800c7ce:	68f4      	ldr	r4, [r6, #12]
 800c7d0:	f3c7 1ec6 	ubfx	lr, r7, #7, #7
 800c7d4:	f3c7 5c41 	ubfx	ip, r7, #21, #2
 800c7d8:	f3c7 4743 	ubfx	r7, r7, #17, #4
 800c7dc:	fb04 f000 	mul.w	r0, r4, r0
 800c7e0:	fa4e f10c 	asr.w	r1, lr, ip
 800c7e4:	2f04      	cmp	r7, #4
 800c7e6:	9007      	str	r0, [sp, #28]
 800c7e8:	910b      	str	r1, [sp, #44]	; 0x2c
 800c7ea:	68e9      	ldr	r1, [r5, #12]
 800c7ec:	6870      	ldr	r0, [r6, #4]
 800c7ee:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800c7f2:	f000 81db 	beq.w	800cbac <forward_dense+0x43c>
 800c7f6:	2f08      	cmp	r7, #8
 800c7f8:	f000 81d8 	beq.w	800cbac <forward_dense+0x43c>
 800c7fc:	f04f 0a00 	mov.w	sl, #0
 800c800:	6992      	ldr	r2, [r2, #24]
 800c802:	0080      	lsls	r0, r0, #2
 800c804:	69a9      	ldr	r1, [r5, #24]
 800c806:	6894      	ldr	r4, [r2, #8]
 800c808:	9a08      	ldr	r2, [sp, #32]
 800c80a:	9009      	str	r0, [sp, #36]	; 0x24
 800c80c:	1826      	adds	r6, r4, r0
 800c80e:	6952      	ldr	r2, [r2, #20]
 800c810:	9404      	str	r4, [sp, #16]
 800c812:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800c816:	9a07      	ldr	r2, [sp, #28]
 800c818:	688f      	ldr	r7, [r1, #8]
 800c81a:	2a00      	cmp	r2, #0
 800c81c:	f000 81c1 	beq.w	800cba2 <forward_dense+0x432>
 800c820:	f1a8 0210 	sub.w	r2, r8, #16
 800c824:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800c828:	689d      	ldr	r5, [r3, #8]
 800c82a:	0912      	lsrs	r2, r2, #4
 800c82c:	910a      	str	r1, [sp, #40]	; 0x28
 800c82e:	2100      	movs	r1, #0
 800c830:	9b06      	ldr	r3, [sp, #24]
 800c832:	3201      	adds	r2, #1
 800c834:	eddf 2acf 	vldr	s5, [pc, #828]	; 800cb74 <forward_dense+0x404>
 800c838:	9105      	str	r1, [sp, #20]
 800c83a:	f008 010f 	and.w	r1, r8, #15
 800c83e:	0192      	lsls	r2, r2, #6
 800c840:	910d      	str	r1, [sp, #52]	; 0x34
 800c842:	920c      	str	r2, [sp, #48]	; 0x30
 800c844:	2b00      	cmp	r3, #0
 800c846:	d042      	beq.n	800c8ce <forward_dense+0x15e>
 800c848:	699b      	ldr	r3, [r3, #24]
 800c84a:	689c      	ldr	r4, [r3, #8]
 800c84c:	9b04      	ldr	r3, [sp, #16]
 800c84e:	f1ba 0f00 	cmp.w	sl, #0
 800c852:	d041      	beq.n	800c8d8 <forward_dense+0x168>
 800c854:	42b3      	cmp	r3, r6
 800c856:	d229      	bcs.n	800c8ac <forward_dense+0x13c>
 800c858:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c85a:	469b      	mov	fp, r3
 800c85c:	ab0f      	add	r3, sp, #60	; 0x3c
 800c85e:	2a04      	cmp	r2, #4
 800c860:	9303      	str	r3, [sp, #12]
 800c862:	4633      	mov	r3, r6
 800c864:	4646      	mov	r6, r8
 800c866:	4698      	mov	r8, r3
 800c868:	f000 8154 	beq.w	800cb14 <forward_dense+0x3a4>
 800c86c:	2c00      	cmp	r4, #0
 800c86e:	f000 8183 	beq.w	800cb78 <forward_dense+0x408>
 800c872:	f8d4 c000 	ldr.w	ip, [r4]
 800c876:	463b      	mov	r3, r7
 800c878:	4629      	mov	r1, r5
 800c87a:	9600      	str	r6, [sp, #0]
 800c87c:	4652      	mov	r2, sl
 800c87e:	9803      	ldr	r0, [sp, #12]
 800c880:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800c884:	f7ff fc86 	bl	800c194 <ai_dict8_dot_array_f32>
 800c888:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c88a:	3404      	adds	r4, #4
 800c88c:	444d      	add	r5, r9
 800c88e:	f84b 3b04 	str.w	r3, [fp], #4
 800c892:	45c3      	cmp	fp, r8
 800c894:	d3ea      	bcc.n	800c86c <forward_dense+0xfc>
 800c896:	4643      	mov	r3, r8
 800c898:	46b0      	mov	r8, r6
 800c89a:	461e      	mov	r6, r3
 800c89c:	9a04      	ldr	r2, [sp, #16]
 800c89e:	43d3      	mvns	r3, r2
 800c8a0:	4433      	add	r3, r6
 800c8a2:	f023 0303 	bic.w	r3, r3, #3
 800c8a6:	3304      	adds	r3, #4
 800c8a8:	18d3      	adds	r3, r2, r3
 800c8aa:	9304      	str	r3, [sp, #16]
 800c8ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8ae:	9b05      	ldr	r3, [sp, #20]
 800c8b0:	4417      	add	r7, r2
 800c8b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	4416      	add	r6, r2
 800c8b8:	9a07      	ldr	r2, [sp, #28]
 800c8ba:	9305      	str	r3, [sp, #20]
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	f000 8170 	beq.w	800cba2 <forward_dense+0x432>
 800c8c2:	9b08      	ldr	r3, [sp, #32]
 800c8c4:	699b      	ldr	r3, [r3, #24]
 800c8c6:	689d      	ldr	r5, [r3, #8]
 800c8c8:	9b06      	ldr	r3, [sp, #24]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d1bc      	bne.n	800c848 <forward_dense+0xd8>
 800c8ce:	461c      	mov	r4, r3
 800c8d0:	9b04      	ldr	r3, [sp, #16]
 800c8d2:	f1ba 0f00 	cmp.w	sl, #0
 800c8d6:	d1bd      	bne.n	800c854 <forward_dense+0xe4>
 800c8d8:	42b3      	cmp	r3, r6
 800c8da:	d2e7      	bcs.n	800c8ac <forward_dense+0x13c>
 800c8dc:	4618      	mov	r0, r3
 800c8de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8e0:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800c8e4:	eb07 0c03 	add.w	ip, r7, r3
 800c8e8:	469e      	mov	lr, r3
 800c8ea:	2c00      	cmp	r4, #0
 800c8ec:	f000 80fe 	beq.w	800caec <forward_dense+0x37c>
 800c8f0:	f1b8 0f0f 	cmp.w	r8, #15
 800c8f4:	ed94 6a00 	vldr	s12, [r4]
 800c8f8:	f104 0404 	add.w	r4, r4, #4
 800c8fc:	f240 80fc 	bls.w	800caf8 <forward_dense+0x388>
 800c900:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800c904:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800c908:	4641      	mov	r1, r8
 800c90a:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800cb74 <forward_dense+0x404>
 800c90e:	ed12 7a0f 	vldr	s14, [r2, #-60]	; 0xffffffc4
 800c912:	3910      	subs	r1, #16
 800c914:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 800c918:	3240      	adds	r2, #64	; 0x40
 800c91a:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 800c91e:	290f      	cmp	r1, #15
 800c920:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c924:	ed12 7a20 	vldr	s14, [r2, #-128]	; 0xffffff80
 800c928:	ed12 2a1e 	vldr	s4, [r2, #-120]	; 0xffffff88
 800c92c:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800c930:	ed13 3a1e 	vldr	s6, [r3, #-120]	; 0xffffff88
 800c934:	eee5 7a87 	vfma.f32	s15, s11, s14
 800c938:	ed52 3a1d 	vldr	s7, [r2, #-116]	; 0xffffff8c
 800c93c:	ed13 4a1d 	vldr	s8, [r3, #-116]	; 0xffffff8c
 800c940:	ed52 4a1c 	vldr	s9, [r2, #-112]	; 0xffffff90
 800c944:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 800c948:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 800c94c:	ed12 7a1b 	vldr	s14, [r2, #-108]	; 0xffffff94
 800c950:	eee2 7a03 	vfma.f32	s15, s4, s6
 800c954:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 800c958:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 800c95c:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 800c960:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 800c964:	ed53 9a18 	vldr	s19, [r3, #-96]	; 0xffffffa0
 800c968:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 800c96c:	eee3 7a84 	vfma.f32	s15, s7, s8
 800c970:	ed53 8a17 	vldr	s17, [r3, #-92]	; 0xffffffa4
 800c974:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 800c978:	ed13 0a16 	vldr	s0, [r3, #-88]	; 0xffffffa8
 800c97c:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 800c980:	ed12 1a15 	vldr	s2, [r2, #-84]	; 0xffffffac
 800c984:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 800c988:	eee4 7a85 	vfma.f32	s15, s9, s10
 800c98c:	ed13 2a14 	vldr	s4, [r3, #-80]	; 0xffffffb0
 800c990:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800c994:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 800c998:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 800c99c:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 800c9a0:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 800c9a4:	eee5 7a87 	vfma.f32	s15, s11, s14
 800c9a8:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 800c9ac:	ed12 7a11 	vldr	s14, [r2, #-68]	; 0xffffffbc
 800c9b0:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800c9b4:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800c9b8:	eee9 7a89 	vfma.f32	s15, s19, s18
 800c9bc:	eee8 7a88 	vfma.f32	s15, s17, s16
 800c9c0:	eee0 7a20 	vfma.f32	s15, s0, s1
 800c9c4:	eee1 7a21 	vfma.f32	s15, s2, s3
 800c9c8:	eee2 7a03 	vfma.f32	s15, s4, s6
 800c9cc:	eee3 7a84 	vfma.f32	s15, s7, s8
 800c9d0:	eee4 7a85 	vfma.f32	s15, s9, s10
 800c9d4:	eee5 7a87 	vfma.f32	s15, s11, s14
 800c9d8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c9dc:	d897      	bhi.n	800c90e <forward_dense+0x19e>
 800c9de:	eb05 010e 	add.w	r1, r5, lr
 800c9e2:	465b      	mov	r3, fp
 800c9e4:	4662      	mov	r2, ip
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d075      	beq.n	800cad6 <forward_dense+0x366>
 800c9ea:	ed91 7a00 	vldr	s14, [r1]
 800c9ee:	2b01      	cmp	r3, #1
 800c9f0:	edd2 7a00 	vldr	s15, [r2]
 800c9f4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c9f8:	d06d      	beq.n	800cad6 <forward_dense+0x366>
 800c9fa:	ed91 7a01 	vldr	s14, [r1, #4]
 800c9fe:	2b02      	cmp	r3, #2
 800ca00:	edd2 7a01 	vldr	s15, [r2, #4]
 800ca04:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ca08:	d065      	beq.n	800cad6 <forward_dense+0x366>
 800ca0a:	ed91 7a02 	vldr	s14, [r1, #8]
 800ca0e:	2b03      	cmp	r3, #3
 800ca10:	edd2 7a02 	vldr	s15, [r2, #8]
 800ca14:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ca18:	d05d      	beq.n	800cad6 <forward_dense+0x366>
 800ca1a:	ed91 7a03 	vldr	s14, [r1, #12]
 800ca1e:	2b04      	cmp	r3, #4
 800ca20:	edd2 7a03 	vldr	s15, [r2, #12]
 800ca24:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ca28:	d055      	beq.n	800cad6 <forward_dense+0x366>
 800ca2a:	ed91 7a04 	vldr	s14, [r1, #16]
 800ca2e:	2b05      	cmp	r3, #5
 800ca30:	edd2 7a04 	vldr	s15, [r2, #16]
 800ca34:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ca38:	d04d      	beq.n	800cad6 <forward_dense+0x366>
 800ca3a:	ed91 7a05 	vldr	s14, [r1, #20]
 800ca3e:	2b06      	cmp	r3, #6
 800ca40:	edd2 7a05 	vldr	s15, [r2, #20]
 800ca44:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ca48:	d045      	beq.n	800cad6 <forward_dense+0x366>
 800ca4a:	ed91 7a06 	vldr	s14, [r1, #24]
 800ca4e:	2b07      	cmp	r3, #7
 800ca50:	edd2 7a06 	vldr	s15, [r2, #24]
 800ca54:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ca58:	d03d      	beq.n	800cad6 <forward_dense+0x366>
 800ca5a:	ed91 7a07 	vldr	s14, [r1, #28]
 800ca5e:	2b08      	cmp	r3, #8
 800ca60:	edd2 7a07 	vldr	s15, [r2, #28]
 800ca64:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ca68:	d035      	beq.n	800cad6 <forward_dense+0x366>
 800ca6a:	ed91 7a08 	vldr	s14, [r1, #32]
 800ca6e:	2b09      	cmp	r3, #9
 800ca70:	edd2 7a08 	vldr	s15, [r2, #32]
 800ca74:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ca78:	d02d      	beq.n	800cad6 <forward_dense+0x366>
 800ca7a:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800ca7e:	2b0a      	cmp	r3, #10
 800ca80:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800ca84:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ca88:	d025      	beq.n	800cad6 <forward_dense+0x366>
 800ca8a:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800ca8e:	2b0b      	cmp	r3, #11
 800ca90:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800ca94:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ca98:	d01d      	beq.n	800cad6 <forward_dense+0x366>
 800ca9a:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800ca9e:	2b0c      	cmp	r3, #12
 800caa0:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800caa4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800caa8:	d015      	beq.n	800cad6 <forward_dense+0x366>
 800caaa:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800caae:	2b0d      	cmp	r3, #13
 800cab0:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800cab4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800cab8:	d00d      	beq.n	800cad6 <forward_dense+0x366>
 800caba:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800cabe:	2b0e      	cmp	r3, #14
 800cac0:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800cac4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800cac8:	d005      	beq.n	800cad6 <forward_dense+0x366>
 800caca:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800cace:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800cad2:	eee7 6a27 	vfma.f32	s13, s14, s15
 800cad6:	ee76 6a26 	vadd.f32	s13, s12, s13
 800cada:	444d      	add	r5, r9
 800cadc:	ece0 6a01 	vstmia	r0!, {s13}
 800cae0:	42b0      	cmp	r0, r6
 800cae2:	f4bf aedb 	bcs.w	800c89c <forward_dense+0x12c>
 800cae6:	2c00      	cmp	r4, #0
 800cae8:	f47f af02 	bne.w	800c8f0 <forward_dense+0x180>
 800caec:	f1b8 0f0f 	cmp.w	r8, #15
 800caf0:	eeb0 6a62 	vmov.f32	s12, s5
 800caf4:	f63f af04 	bhi.w	800c900 <forward_dense+0x190>
 800caf8:	4643      	mov	r3, r8
 800cafa:	4629      	mov	r1, r5
 800cafc:	463a      	mov	r2, r7
 800cafe:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800cb74 <forward_dense+0x404>
 800cb02:	e770      	b.n	800c9e6 <forward_dense+0x276>
 800cb04:	2300      	movs	r3, #0
 800cb06:	685b      	ldr	r3, [r3, #4]
 800cb08:	deff      	udf	#255	; 0xff
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	deff      	udf	#255	; 0xff
 800cb0e:	2300      	movs	r3, #0
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	deff      	udf	#255	; 0xff
 800cb14:	b1a4      	cbz	r4, 800cb40 <forward_dense+0x3d0>
 800cb16:	f8d4 c000 	ldr.w	ip, [r4]
 800cb1a:	463b      	mov	r3, r7
 800cb1c:	4629      	mov	r1, r5
 800cb1e:	9600      	str	r6, [sp, #0]
 800cb20:	4652      	mov	r2, sl
 800cb22:	9803      	ldr	r0, [sp, #12]
 800cb24:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800cb28:	f7ff fd64 	bl	800c5f4 <ai_dict4_dot_array_f32>
 800cb2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb2e:	3404      	adds	r4, #4
 800cb30:	444d      	add	r5, r9
 800cb32:	f84b 3b04 	str.w	r3, [fp], #4
 800cb36:	45c3      	cmp	fp, r8
 800cb38:	f4bf aead 	bcs.w	800c896 <forward_dense+0x126>
 800cb3c:	2c00      	cmp	r4, #0
 800cb3e:	d1ea      	bne.n	800cb16 <forward_dense+0x3a6>
 800cb40:	4634      	mov	r4, r6
 800cb42:	4646      	mov	r6, r8
 800cb44:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800cb48:	463b      	mov	r3, r7
 800cb4a:	4629      	mov	r1, r5
 800cb4c:	9400      	str	r4, [sp, #0]
 800cb4e:	4652      	mov	r2, sl
 800cb50:	4640      	mov	r0, r8
 800cb52:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 800cb56:	f7ff fd4d 	bl	800c5f4 <ai_dict4_dot_array_f32>
 800cb5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb5c:	444d      	add	r5, r9
 800cb5e:	f84b 3b04 	str.w	r3, [fp], #4
 800cb62:	45b3      	cmp	fp, r6
 800cb64:	d3f0      	bcc.n	800cb48 <forward_dense+0x3d8>
 800cb66:	46a0      	mov	r8, r4
 800cb68:	e698      	b.n	800c89c <forward_dense+0x12c>
 800cb6a:	9006      	str	r0, [sp, #24]
 800cb6c:	e62a      	b.n	800c7c4 <forward_dense+0x54>
 800cb6e:	9306      	str	r3, [sp, #24]
 800cb70:	e628      	b.n	800c7c4 <forward_dense+0x54>
 800cb72:	bf00      	nop
 800cb74:	00000000 	.word	0x00000000
 800cb78:	4634      	mov	r4, r6
 800cb7a:	4646      	mov	r6, r8
 800cb7c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800cb80:	463b      	mov	r3, r7
 800cb82:	4629      	mov	r1, r5
 800cb84:	9400      	str	r4, [sp, #0]
 800cb86:	4652      	mov	r2, sl
 800cb88:	4640      	mov	r0, r8
 800cb8a:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 800cb8e:	f7ff fb01 	bl	800c194 <ai_dict8_dot_array_f32>
 800cb92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb94:	444d      	add	r5, r9
 800cb96:	f84b 3b04 	str.w	r3, [fp], #4
 800cb9a:	45b3      	cmp	fp, r6
 800cb9c:	d3f0      	bcc.n	800cb80 <forward_dense+0x410>
 800cb9e:	46a0      	mov	r8, r4
 800cba0:	e67c      	b.n	800c89c <forward_dense+0x12c>
 800cba2:	b011      	add	sp, #68	; 0x44
 800cba4:	ecbd 8b08 	vpop	{d8-d11}
 800cba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbac:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800cbb0:	e626      	b.n	800c800 <forward_dense+0x90>
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	9306      	str	r3, [sp, #24]
 800cbb6:	e605      	b.n	800c7c4 <forward_dense+0x54>
 800cbb8:	9308      	str	r3, [sp, #32]
 800cbba:	e5f6      	b.n	800c7aa <forward_dense+0x3a>

0800cbbc <ai_check_custom_types>:
 800cbbc:	4b13      	ldr	r3, [pc, #76]	; (800cc0c <ai_check_custom_types+0x50>)
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	9301      	str	r3, [sp, #4]
 800cbc4:	b118      	cbz	r0, 800cbce <ai_check_custom_types+0x12>
 800cbc6:	7803      	ldrb	r3, [r0, #0]
 800cbc8:	2b03      	cmp	r3, #3
 800cbca:	d002      	beq.n	800cbd2 <ai_check_custom_types+0x16>
 800cbcc:	2000      	movs	r0, #0
 800cbce:	b002      	add	sp, #8
 800cbd0:	4770      	bx	lr
 800cbd2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d004      	beq.n	800cbe4 <ai_check_custom_types+0x28>
 800cbda:	2001      	movs	r0, #1
 800cbdc:	f080 0001 	eor.w	r0, r0, #1
 800cbe0:	b002      	add	sp, #8
 800cbe2:	4770      	bx	lr
 800cbe4:	7842      	ldrb	r2, [r0, #1]
 800cbe6:	3001      	adds	r0, #1
 800cbe8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d1f4      	bne.n	800cbda <ai_check_custom_types+0x1e>
 800cbf0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800cbf4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d1ee      	bne.n	800cbda <ai_check_custom_types+0x1e>
 800cbfc:	7842      	ldrb	r2, [r0, #1]
 800cbfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d1e9      	bne.n	800cbda <ai_check_custom_types+0x1e>
 800cc06:	2000      	movs	r0, #0
 800cc08:	e7e8      	b.n	800cbdc <ai_check_custom_types+0x20>
 800cc0a:	bf00      	nop
 800cc0c:	0800ed04 	.word	0x0800ed04

0800cc10 <ai_layer_type_name>:
 800cc10:	4b42      	ldr	r3, [pc, #264]	; (800cd1c <ai_layer_type_name+0x10c>)
 800cc12:	4403      	add	r3, r0
 800cc14:	b29a      	uxth	r2, r3
 800cc16:	2a1d      	cmp	r2, #29
 800cc18:	d805      	bhi.n	800cc26 <ai_layer_type_name+0x16>
 800cc1a:	2001      	movs	r0, #1
 800cc1c:	4940      	ldr	r1, [pc, #256]	; (800cd20 <ai_layer_type_name+0x110>)
 800cc1e:	fa00 f202 	lsl.w	r2, r0, r2
 800cc22:	4011      	ands	r1, r2
 800cc24:	b909      	cbnz	r1, 800cc2a <ai_layer_type_name+0x1a>
 800cc26:	483f      	ldr	r0, [pc, #252]	; (800cd24 <ai_layer_type_name+0x114>)
 800cc28:	4770      	bx	lr
 800cc2a:	2b1d      	cmp	r3, #29
 800cc2c:	d8fb      	bhi.n	800cc26 <ai_layer_type_name+0x16>
 800cc2e:	a201      	add	r2, pc, #4	; (adr r2, 800cc34 <ai_layer_type_name+0x24>)
 800cc30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc34:	0800ccad 	.word	0x0800ccad
 800cc38:	0800ccb1 	.word	0x0800ccb1
 800cc3c:	0800cc27 	.word	0x0800cc27
 800cc40:	0800ccb5 	.word	0x0800ccb5
 800cc44:	0800ccb9 	.word	0x0800ccb9
 800cc48:	0800ccbd 	.word	0x0800ccbd
 800cc4c:	0800ccc1 	.word	0x0800ccc1
 800cc50:	0800ccc5 	.word	0x0800ccc5
 800cc54:	0800ccc9 	.word	0x0800ccc9
 800cc58:	0800cccd 	.word	0x0800cccd
 800cc5c:	0800ccd1 	.word	0x0800ccd1
 800cc60:	0800ccd5 	.word	0x0800ccd5
 800cc64:	0800ccd9 	.word	0x0800ccd9
 800cc68:	0800ccdd 	.word	0x0800ccdd
 800cc6c:	0800cce1 	.word	0x0800cce1
 800cc70:	0800cce5 	.word	0x0800cce5
 800cc74:	0800cce9 	.word	0x0800cce9
 800cc78:	0800cc27 	.word	0x0800cc27
 800cc7c:	0800cced 	.word	0x0800cced
 800cc80:	0800ccf1 	.word	0x0800ccf1
 800cc84:	0800ccf5 	.word	0x0800ccf5
 800cc88:	0800ccf9 	.word	0x0800ccf9
 800cc8c:	0800ccfd 	.word	0x0800ccfd
 800cc90:	0800cd01 	.word	0x0800cd01
 800cc94:	0800cd05 	.word	0x0800cd05
 800cc98:	0800cd09 	.word	0x0800cd09
 800cc9c:	0800cd0d 	.word	0x0800cd0d
 800cca0:	0800cd11 	.word	0x0800cd11
 800cca4:	0800cd15 	.word	0x0800cd15
 800cca8:	0800cd19 	.word	0x0800cd19
 800ccac:	481e      	ldr	r0, [pc, #120]	; (800cd28 <ai_layer_type_name+0x118>)
 800ccae:	4770      	bx	lr
 800ccb0:	481e      	ldr	r0, [pc, #120]	; (800cd2c <ai_layer_type_name+0x11c>)
 800ccb2:	4770      	bx	lr
 800ccb4:	481e      	ldr	r0, [pc, #120]	; (800cd30 <ai_layer_type_name+0x120>)
 800ccb6:	4770      	bx	lr
 800ccb8:	481e      	ldr	r0, [pc, #120]	; (800cd34 <ai_layer_type_name+0x124>)
 800ccba:	4770      	bx	lr
 800ccbc:	481e      	ldr	r0, [pc, #120]	; (800cd38 <ai_layer_type_name+0x128>)
 800ccbe:	4770      	bx	lr
 800ccc0:	481e      	ldr	r0, [pc, #120]	; (800cd3c <ai_layer_type_name+0x12c>)
 800ccc2:	4770      	bx	lr
 800ccc4:	481e      	ldr	r0, [pc, #120]	; (800cd40 <ai_layer_type_name+0x130>)
 800ccc6:	4770      	bx	lr
 800ccc8:	481e      	ldr	r0, [pc, #120]	; (800cd44 <ai_layer_type_name+0x134>)
 800ccca:	4770      	bx	lr
 800cccc:	481e      	ldr	r0, [pc, #120]	; (800cd48 <ai_layer_type_name+0x138>)
 800ccce:	4770      	bx	lr
 800ccd0:	481e      	ldr	r0, [pc, #120]	; (800cd4c <ai_layer_type_name+0x13c>)
 800ccd2:	4770      	bx	lr
 800ccd4:	481e      	ldr	r0, [pc, #120]	; (800cd50 <ai_layer_type_name+0x140>)
 800ccd6:	4770      	bx	lr
 800ccd8:	481e      	ldr	r0, [pc, #120]	; (800cd54 <ai_layer_type_name+0x144>)
 800ccda:	4770      	bx	lr
 800ccdc:	481e      	ldr	r0, [pc, #120]	; (800cd58 <ai_layer_type_name+0x148>)
 800ccde:	4770      	bx	lr
 800cce0:	481e      	ldr	r0, [pc, #120]	; (800cd5c <ai_layer_type_name+0x14c>)
 800cce2:	4770      	bx	lr
 800cce4:	481e      	ldr	r0, [pc, #120]	; (800cd60 <ai_layer_type_name+0x150>)
 800cce6:	4770      	bx	lr
 800cce8:	481e      	ldr	r0, [pc, #120]	; (800cd64 <ai_layer_type_name+0x154>)
 800ccea:	4770      	bx	lr
 800ccec:	481e      	ldr	r0, [pc, #120]	; (800cd68 <ai_layer_type_name+0x158>)
 800ccee:	4770      	bx	lr
 800ccf0:	481e      	ldr	r0, [pc, #120]	; (800cd6c <ai_layer_type_name+0x15c>)
 800ccf2:	4770      	bx	lr
 800ccf4:	481e      	ldr	r0, [pc, #120]	; (800cd70 <ai_layer_type_name+0x160>)
 800ccf6:	4770      	bx	lr
 800ccf8:	481e      	ldr	r0, [pc, #120]	; (800cd74 <ai_layer_type_name+0x164>)
 800ccfa:	4770      	bx	lr
 800ccfc:	481e      	ldr	r0, [pc, #120]	; (800cd78 <ai_layer_type_name+0x168>)
 800ccfe:	4770      	bx	lr
 800cd00:	481e      	ldr	r0, [pc, #120]	; (800cd7c <ai_layer_type_name+0x16c>)
 800cd02:	4770      	bx	lr
 800cd04:	481e      	ldr	r0, [pc, #120]	; (800cd80 <ai_layer_type_name+0x170>)
 800cd06:	4770      	bx	lr
 800cd08:	481e      	ldr	r0, [pc, #120]	; (800cd84 <ai_layer_type_name+0x174>)
 800cd0a:	4770      	bx	lr
 800cd0c:	481e      	ldr	r0, [pc, #120]	; (800cd88 <ai_layer_type_name+0x178>)
 800cd0e:	4770      	bx	lr
 800cd10:	481e      	ldr	r0, [pc, #120]	; (800cd8c <ai_layer_type_name+0x17c>)
 800cd12:	4770      	bx	lr
 800cd14:	481e      	ldr	r0, [pc, #120]	; (800cd90 <ai_layer_type_name+0x180>)
 800cd16:	4770      	bx	lr
 800cd18:	481e      	ldr	r0, [pc, #120]	; (800cd94 <ai_layer_type_name+0x184>)
 800cd1a:	4770      	bx	lr
 800cd1c:	ffffd8ef 	.word	0xffffd8ef
 800cd20:	3ffdfffb 	.word	0x3ffdfffb
 800cd24:	0800ee18 	.word	0x0800ee18
 800cd28:	0800edd4 	.word	0x0800edd4
 800cd2c:	0800edd8 	.word	0x0800edd8
 800cd30:	0800eddc 	.word	0x0800eddc
 800cd34:	0800ede4 	.word	0x0800ede4
 800cd38:	0800edec 	.word	0x0800edec
 800cd3c:	0800edf0 	.word	0x0800edf0
 800cd40:	0800edf4 	.word	0x0800edf4
 800cd44:	0800edfc 	.word	0x0800edfc
 800cd48:	0800ee00 	.word	0x0800ee00
 800cd4c:	0800ee08 	.word	0x0800ee08
 800cd50:	0800ee1c 	.word	0x0800ee1c
 800cd54:	0800ee28 	.word	0x0800ee28
 800cd58:	0800ee30 	.word	0x0800ee30
 800cd5c:	0800ee34 	.word	0x0800ee34
 800cd60:	0800ee3c 	.word	0x0800ee3c
 800cd64:	0800ee48 	.word	0x0800ee48
 800cd68:	0800ee5c 	.word	0x0800ee5c
 800cd6c:	0800ee64 	.word	0x0800ee64
 800cd70:	0800ee6c 	.word	0x0800ee6c
 800cd74:	0800ee78 	.word	0x0800ee78
 800cd78:	0800ee80 	.word	0x0800ee80
 800cd7c:	0800ee88 	.word	0x0800ee88
 800cd80:	0800eea0 	.word	0x0800eea0
 800cd84:	0800eea4 	.word	0x0800eea4
 800cd88:	0800eeac 	.word	0x0800eeac
 800cd8c:	0800eeb4 	.word	0x0800eeb4
 800cd90:	0800eebc 	.word	0x0800eebc
 800cd94:	0800eec0 	.word	0x0800eec0

0800cd98 <ai_layers_forward_all>:
 800cd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd9a:	6d86      	ldr	r6, [r0, #88]	; 0x58
 800cd9c:	4604      	mov	r4, r0
 800cd9e:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800cda0:	b316      	cbz	r6, 800cde8 <ai_layers_forward_all+0x50>
 800cda2:	b1c5      	cbz	r5, 800cdd6 <ai_layers_forward_all+0x3e>
 800cda4:	6545      	str	r5, [r0, #84]	; 0x54
 800cda6:	4629      	mov	r1, r5
 800cda8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800cdaa:	2001      	movs	r0, #1
 800cdac:	47b0      	blx	r6
 800cdae:	2700      	movs	r7, #0
 800cdb0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800cdb2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800cdb4:	2002      	movs	r0, #2
 800cdb6:	47b0      	blx	r6
 800cdb8:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800cdba:	692b      	ldr	r3, [r5, #16]
 800cdbc:	4628      	mov	r0, r5
 800cdbe:	4798      	blx	r3
 800cdc0:	68eb      	ldr	r3, [r5, #12]
 800cdc2:	2003      	movs	r0, #3
 800cdc4:	429d      	cmp	r5, r3
 800cdc6:	4619      	mov	r1, r3
 800cdc8:	d006      	beq.n	800cdd8 <ai_layers_forward_all+0x40>
 800cdca:	6563      	str	r3, [r4, #84]	; 0x54
 800cdcc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800cdce:	47b0      	blx	r6
 800cdd0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800cdd2:	2900      	cmp	r1, #0
 800cdd4:	d1ed      	bne.n	800cdb2 <ai_layers_forward_all+0x1a>
 800cdd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdd8:	2100      	movs	r1, #0
 800cdda:	6567      	str	r7, [r4, #84]	; 0x54
 800cddc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800cdde:	47b0      	blx	r6
 800cde0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800cde2:	2900      	cmp	r1, #0
 800cde4:	d1e5      	bne.n	800cdb2 <ai_layers_forward_all+0x1a>
 800cde6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cde8:	2d00      	cmp	r5, #0
 800cdea:	d0f4      	beq.n	800cdd6 <ai_layers_forward_all+0x3e>
 800cdec:	6545      	str	r5, [r0, #84]	; 0x54
 800cdee:	692b      	ldr	r3, [r5, #16]
 800cdf0:	4628      	mov	r0, r5
 800cdf2:	4798      	blx	r3
 800cdf4:	68eb      	ldr	r3, [r5, #12]
 800cdf6:	42ab      	cmp	r3, r5
 800cdf8:	461d      	mov	r5, r3
 800cdfa:	d003      	beq.n	800ce04 <ai_layers_forward_all+0x6c>
 800cdfc:	6563      	str	r3, [r4, #84]	; 0x54
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d1f5      	bne.n	800cdee <ai_layers_forward_all+0x56>
 800ce02:	e7e8      	b.n	800cdd6 <ai_layers_forward_all+0x3e>
 800ce04:	2300      	movs	r3, #0
 800ce06:	6563      	str	r3, [r4, #84]	; 0x54
 800ce08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce0a:	bf00      	nop

0800ce0c <ai_array_to_buffer_fmt>:
 800ce0c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800ce10:	2b02      	cmp	r3, #2
 800ce12:	d01f      	beq.n	800ce54 <ai_array_to_buffer_fmt+0x48>
 800ce14:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800ce18:	4a1b      	ldr	r2, [pc, #108]	; (800ce88 <ai_array_to_buffer_fmt+0x7c>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d00a      	beq.n	800ce34 <ai_array_to_buffer_fmt+0x28>
 800ce1e:	dc0d      	bgt.n	800ce3c <ai_array_to_buffer_fmt+0x30>
 800ce20:	4a1a      	ldr	r2, [pc, #104]	; (800ce8c <ai_array_to_buffer_fmt+0x80>)
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d006      	beq.n	800ce34 <ai_array_to_buffer_fmt+0x28>
 800ce26:	dd1d      	ble.n	800ce64 <ai_array_to_buffer_fmt+0x58>
 800ce28:	4a19      	ldr	r2, [pc, #100]	; (800ce90 <ai_array_to_buffer_fmt+0x84>)
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	d002      	beq.n	800ce34 <ai_array_to_buffer_fmt+0x28>
 800ce2e:	320f      	adds	r2, #15
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d10d      	bne.n	800ce50 <ai_array_to_buffer_fmt+0x44>
 800ce34:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ce38:	4318      	orrs	r0, r3
 800ce3a:	4770      	bx	lr
 800ce3c:	4a15      	ldr	r2, [pc, #84]	; (800ce94 <ai_array_to_buffer_fmt+0x88>)
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	d0f8      	beq.n	800ce34 <ai_array_to_buffer_fmt+0x28>
 800ce42:	dd18      	ble.n	800ce76 <ai_array_to_buffer_fmt+0x6a>
 800ce44:	4a14      	ldr	r2, [pc, #80]	; (800ce98 <ai_array_to_buffer_fmt+0x8c>)
 800ce46:	4293      	cmp	r3, r2
 800ce48:	d0f4      	beq.n	800ce34 <ai_array_to_buffer_fmt+0x28>
 800ce4a:	4a14      	ldr	r2, [pc, #80]	; (800ce9c <ai_array_to_buffer_fmt+0x90>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d0f1      	beq.n	800ce34 <ai_array_to_buffer_fmt+0x28>
 800ce50:	2340      	movs	r3, #64	; 0x40
 800ce52:	e7ef      	b.n	800ce34 <ai_array_to_buffer_fmt+0x28>
 800ce54:	4b12      	ldr	r3, [pc, #72]	; (800cea0 <ai_array_to_buffer_fmt+0x94>)
 800ce56:	4003      	ands	r3, r0
 800ce58:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ce5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ce60:	4318      	orrs	r0, r3
 800ce62:	4770      	bx	lr
 800ce64:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800ce68:	4293      	cmp	r3, r2
 800ce6a:	d0e3      	beq.n	800ce34 <ai_array_to_buffer_fmt+0x28>
 800ce6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ce70:	4293      	cmp	r3, r2
 800ce72:	d0df      	beq.n	800ce34 <ai_array_to_buffer_fmt+0x28>
 800ce74:	e7ec      	b.n	800ce50 <ai_array_to_buffer_fmt+0x44>
 800ce76:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d0da      	beq.n	800ce34 <ai_array_to_buffer_fmt+0x28>
 800ce7e:	3207      	adds	r2, #7
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d0d7      	beq.n	800ce34 <ai_array_to_buffer_fmt+0x28>
 800ce84:	e7e4      	b.n	800ce50 <ai_array_to_buffer_fmt+0x44>
 800ce86:	bf00      	nop
 800ce88:	00840040 	.word	0x00840040
 800ce8c:	00040447 	.word	0x00040447
 800ce90:	00040840 	.word	0x00040840
 800ce94:	00840840 	.word	0x00840840
 800ce98:	0084084f 	.word	0x0084084f
 800ce9c:	01821040 	.word	0x01821040
 800cea0:	00803fff 	.word	0x00803fff

0800cea4 <ai_array_get_byte_size>:
 800cea4:	b1e1      	cbz	r1, 800cee0 <ai_array_get_byte_size+0x3c>
 800cea6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800ceaa:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800ceae:	b410      	push	{r4}
 800ceb0:	f3c0 3482 	ubfx	r4, r0, #14, #3
 800ceb4:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800ceb8:	4423      	add	r3, r4
 800ceba:	2804      	cmp	r0, #4
 800cebc:	fb01 f103 	mul.w	r1, r1, r3
 800cec0:	f101 0107 	add.w	r1, r1, #7
 800cec4:	f021 0107 	bic.w	r1, r1, #7
 800cec8:	fa21 f102 	lsr.w	r1, r1, r2
 800cecc:	d00a      	beq.n	800cee4 <ai_array_get_byte_size+0x40>
 800cece:	2808      	cmp	r0, #8
 800ced0:	d101      	bne.n	800ced6 <ai_array_get_byte_size+0x32>
 800ced2:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800ced6:	3107      	adds	r1, #7
 800ced8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cedc:	08c8      	lsrs	r0, r1, #3
 800cede:	4770      	bx	lr
 800cee0:	4608      	mov	r0, r1
 800cee2:	4770      	bx	lr
 800cee4:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800cee8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ceec:	3107      	adds	r1, #7
 800ceee:	08c8      	lsrs	r0, r1, #3
 800cef0:	4770      	bx	lr
 800cef2:	bf00      	nop

0800cef4 <__errno>:
 800cef4:	4b01      	ldr	r3, [pc, #4]	; (800cefc <__errno+0x8>)
 800cef6:	6818      	ldr	r0, [r3, #0]
 800cef8:	4770      	bx	lr
 800cefa:	bf00      	nop
 800cefc:	24000378 	.word	0x24000378

0800cf00 <__sflush_r>:
 800cf00:	898a      	ldrh	r2, [r1, #12]
 800cf02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf06:	4605      	mov	r5, r0
 800cf08:	0710      	lsls	r0, r2, #28
 800cf0a:	460c      	mov	r4, r1
 800cf0c:	d458      	bmi.n	800cfc0 <__sflush_r+0xc0>
 800cf0e:	684b      	ldr	r3, [r1, #4]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	dc05      	bgt.n	800cf20 <__sflush_r+0x20>
 800cf14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	dc02      	bgt.n	800cf20 <__sflush_r+0x20>
 800cf1a:	2000      	movs	r0, #0
 800cf1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf22:	2e00      	cmp	r6, #0
 800cf24:	d0f9      	beq.n	800cf1a <__sflush_r+0x1a>
 800cf26:	2300      	movs	r3, #0
 800cf28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf2c:	682f      	ldr	r7, [r5, #0]
 800cf2e:	6a21      	ldr	r1, [r4, #32]
 800cf30:	602b      	str	r3, [r5, #0]
 800cf32:	d032      	beq.n	800cf9a <__sflush_r+0x9a>
 800cf34:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf36:	89a3      	ldrh	r3, [r4, #12]
 800cf38:	075a      	lsls	r2, r3, #29
 800cf3a:	d505      	bpl.n	800cf48 <__sflush_r+0x48>
 800cf3c:	6863      	ldr	r3, [r4, #4]
 800cf3e:	1ac0      	subs	r0, r0, r3
 800cf40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf42:	b10b      	cbz	r3, 800cf48 <__sflush_r+0x48>
 800cf44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf46:	1ac0      	subs	r0, r0, r3
 800cf48:	2300      	movs	r3, #0
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf4e:	6a21      	ldr	r1, [r4, #32]
 800cf50:	4628      	mov	r0, r5
 800cf52:	47b0      	blx	r6
 800cf54:	1c43      	adds	r3, r0, #1
 800cf56:	89a3      	ldrh	r3, [r4, #12]
 800cf58:	d106      	bne.n	800cf68 <__sflush_r+0x68>
 800cf5a:	6829      	ldr	r1, [r5, #0]
 800cf5c:	291d      	cmp	r1, #29
 800cf5e:	d848      	bhi.n	800cff2 <__sflush_r+0xf2>
 800cf60:	4a29      	ldr	r2, [pc, #164]	; (800d008 <__sflush_r+0x108>)
 800cf62:	40ca      	lsrs	r2, r1
 800cf64:	07d6      	lsls	r6, r2, #31
 800cf66:	d544      	bpl.n	800cff2 <__sflush_r+0xf2>
 800cf68:	2200      	movs	r2, #0
 800cf6a:	6062      	str	r2, [r4, #4]
 800cf6c:	04d9      	lsls	r1, r3, #19
 800cf6e:	6922      	ldr	r2, [r4, #16]
 800cf70:	6022      	str	r2, [r4, #0]
 800cf72:	d504      	bpl.n	800cf7e <__sflush_r+0x7e>
 800cf74:	1c42      	adds	r2, r0, #1
 800cf76:	d101      	bne.n	800cf7c <__sflush_r+0x7c>
 800cf78:	682b      	ldr	r3, [r5, #0]
 800cf7a:	b903      	cbnz	r3, 800cf7e <__sflush_r+0x7e>
 800cf7c:	6560      	str	r0, [r4, #84]	; 0x54
 800cf7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf80:	602f      	str	r7, [r5, #0]
 800cf82:	2900      	cmp	r1, #0
 800cf84:	d0c9      	beq.n	800cf1a <__sflush_r+0x1a>
 800cf86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf8a:	4299      	cmp	r1, r3
 800cf8c:	d002      	beq.n	800cf94 <__sflush_r+0x94>
 800cf8e:	4628      	mov	r0, r5
 800cf90:	f000 f98a 	bl	800d2a8 <_free_r>
 800cf94:	2000      	movs	r0, #0
 800cf96:	6360      	str	r0, [r4, #52]	; 0x34
 800cf98:	e7c0      	b.n	800cf1c <__sflush_r+0x1c>
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	4628      	mov	r0, r5
 800cf9e:	47b0      	blx	r6
 800cfa0:	1c41      	adds	r1, r0, #1
 800cfa2:	d1c8      	bne.n	800cf36 <__sflush_r+0x36>
 800cfa4:	682b      	ldr	r3, [r5, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d0c5      	beq.n	800cf36 <__sflush_r+0x36>
 800cfaa:	2b1d      	cmp	r3, #29
 800cfac:	d001      	beq.n	800cfb2 <__sflush_r+0xb2>
 800cfae:	2b16      	cmp	r3, #22
 800cfb0:	d101      	bne.n	800cfb6 <__sflush_r+0xb6>
 800cfb2:	602f      	str	r7, [r5, #0]
 800cfb4:	e7b1      	b.n	800cf1a <__sflush_r+0x1a>
 800cfb6:	89a3      	ldrh	r3, [r4, #12]
 800cfb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfbc:	81a3      	strh	r3, [r4, #12]
 800cfbe:	e7ad      	b.n	800cf1c <__sflush_r+0x1c>
 800cfc0:	690f      	ldr	r7, [r1, #16]
 800cfc2:	2f00      	cmp	r7, #0
 800cfc4:	d0a9      	beq.n	800cf1a <__sflush_r+0x1a>
 800cfc6:	0793      	lsls	r3, r2, #30
 800cfc8:	680e      	ldr	r6, [r1, #0]
 800cfca:	bf08      	it	eq
 800cfcc:	694b      	ldreq	r3, [r1, #20]
 800cfce:	600f      	str	r7, [r1, #0]
 800cfd0:	bf18      	it	ne
 800cfd2:	2300      	movne	r3, #0
 800cfd4:	eba6 0807 	sub.w	r8, r6, r7
 800cfd8:	608b      	str	r3, [r1, #8]
 800cfda:	f1b8 0f00 	cmp.w	r8, #0
 800cfde:	dd9c      	ble.n	800cf1a <__sflush_r+0x1a>
 800cfe0:	4643      	mov	r3, r8
 800cfe2:	463a      	mov	r2, r7
 800cfe4:	6a21      	ldr	r1, [r4, #32]
 800cfe6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cfe8:	4628      	mov	r0, r5
 800cfea:	47b0      	blx	r6
 800cfec:	2800      	cmp	r0, #0
 800cfee:	dc06      	bgt.n	800cffe <__sflush_r+0xfe>
 800cff0:	89a3      	ldrh	r3, [r4, #12]
 800cff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cff6:	81a3      	strh	r3, [r4, #12]
 800cff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cffc:	e78e      	b.n	800cf1c <__sflush_r+0x1c>
 800cffe:	4407      	add	r7, r0
 800d000:	eba8 0800 	sub.w	r8, r8, r0
 800d004:	e7e9      	b.n	800cfda <__sflush_r+0xda>
 800d006:	bf00      	nop
 800d008:	20400001 	.word	0x20400001

0800d00c <_fflush_r>:
 800d00c:	b538      	push	{r3, r4, r5, lr}
 800d00e:	690b      	ldr	r3, [r1, #16]
 800d010:	4605      	mov	r5, r0
 800d012:	460c      	mov	r4, r1
 800d014:	b1db      	cbz	r3, 800d04e <_fflush_r+0x42>
 800d016:	b118      	cbz	r0, 800d020 <_fflush_r+0x14>
 800d018:	6983      	ldr	r3, [r0, #24]
 800d01a:	b90b      	cbnz	r3, 800d020 <_fflush_r+0x14>
 800d01c:	f000 f872 	bl	800d104 <__sinit>
 800d020:	4b0c      	ldr	r3, [pc, #48]	; (800d054 <_fflush_r+0x48>)
 800d022:	429c      	cmp	r4, r3
 800d024:	d109      	bne.n	800d03a <_fflush_r+0x2e>
 800d026:	686c      	ldr	r4, [r5, #4]
 800d028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d02c:	b17b      	cbz	r3, 800d04e <_fflush_r+0x42>
 800d02e:	4621      	mov	r1, r4
 800d030:	4628      	mov	r0, r5
 800d032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d036:	f7ff bf63 	b.w	800cf00 <__sflush_r>
 800d03a:	4b07      	ldr	r3, [pc, #28]	; (800d058 <_fflush_r+0x4c>)
 800d03c:	429c      	cmp	r4, r3
 800d03e:	d101      	bne.n	800d044 <_fflush_r+0x38>
 800d040:	68ac      	ldr	r4, [r5, #8]
 800d042:	e7f1      	b.n	800d028 <_fflush_r+0x1c>
 800d044:	4b05      	ldr	r3, [pc, #20]	; (800d05c <_fflush_r+0x50>)
 800d046:	429c      	cmp	r4, r3
 800d048:	bf08      	it	eq
 800d04a:	68ec      	ldreq	r4, [r5, #12]
 800d04c:	e7ec      	b.n	800d028 <_fflush_r+0x1c>
 800d04e:	2000      	movs	r0, #0
 800d050:	bd38      	pop	{r3, r4, r5, pc}
 800d052:	bf00      	nop
 800d054:	0800eee8 	.word	0x0800eee8
 800d058:	0800ef08 	.word	0x0800ef08
 800d05c:	0800eec8 	.word	0x0800eec8

0800d060 <fflush>:
 800d060:	4601      	mov	r1, r0
 800d062:	b920      	cbnz	r0, 800d06e <fflush+0xe>
 800d064:	4b04      	ldr	r3, [pc, #16]	; (800d078 <fflush+0x18>)
 800d066:	4905      	ldr	r1, [pc, #20]	; (800d07c <fflush+0x1c>)
 800d068:	6818      	ldr	r0, [r3, #0]
 800d06a:	f000 b8b7 	b.w	800d1dc <_fwalk_reent>
 800d06e:	4b04      	ldr	r3, [pc, #16]	; (800d080 <fflush+0x20>)
 800d070:	6818      	ldr	r0, [r3, #0]
 800d072:	f7ff bfcb 	b.w	800d00c <_fflush_r>
 800d076:	bf00      	nop
 800d078:	0800ef28 	.word	0x0800ef28
 800d07c:	0800d00d 	.word	0x0800d00d
 800d080:	24000378 	.word	0x24000378

0800d084 <std>:
 800d084:	2300      	movs	r3, #0
 800d086:	b510      	push	{r4, lr}
 800d088:	4604      	mov	r4, r0
 800d08a:	e9c0 3300 	strd	r3, r3, [r0]
 800d08e:	6083      	str	r3, [r0, #8]
 800d090:	8181      	strh	r1, [r0, #12]
 800d092:	6643      	str	r3, [r0, #100]	; 0x64
 800d094:	81c2      	strh	r2, [r0, #14]
 800d096:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d09a:	6183      	str	r3, [r0, #24]
 800d09c:	4619      	mov	r1, r3
 800d09e:	2208      	movs	r2, #8
 800d0a0:	305c      	adds	r0, #92	; 0x5c
 800d0a2:	f000 f8f8 	bl	800d296 <memset>
 800d0a6:	4b05      	ldr	r3, [pc, #20]	; (800d0bc <std+0x38>)
 800d0a8:	6263      	str	r3, [r4, #36]	; 0x24
 800d0aa:	4b05      	ldr	r3, [pc, #20]	; (800d0c0 <std+0x3c>)
 800d0ac:	62a3      	str	r3, [r4, #40]	; 0x28
 800d0ae:	4b05      	ldr	r3, [pc, #20]	; (800d0c4 <std+0x40>)
 800d0b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d0b2:	4b05      	ldr	r3, [pc, #20]	; (800d0c8 <std+0x44>)
 800d0b4:	6224      	str	r4, [r4, #32]
 800d0b6:	6323      	str	r3, [r4, #48]	; 0x30
 800d0b8:	bd10      	pop	{r4, pc}
 800d0ba:	bf00      	nop
 800d0bc:	0800d5e9 	.word	0x0800d5e9
 800d0c0:	0800d60b 	.word	0x0800d60b
 800d0c4:	0800d643 	.word	0x0800d643
 800d0c8:	0800d667 	.word	0x0800d667

0800d0cc <_cleanup_r>:
 800d0cc:	4901      	ldr	r1, [pc, #4]	; (800d0d4 <_cleanup_r+0x8>)
 800d0ce:	f000 b885 	b.w	800d1dc <_fwalk_reent>
 800d0d2:	bf00      	nop
 800d0d4:	0800d00d 	.word	0x0800d00d

0800d0d8 <__sfmoreglue>:
 800d0d8:	b570      	push	{r4, r5, r6, lr}
 800d0da:	1e4a      	subs	r2, r1, #1
 800d0dc:	2568      	movs	r5, #104	; 0x68
 800d0de:	4355      	muls	r5, r2
 800d0e0:	460e      	mov	r6, r1
 800d0e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d0e6:	f000 f92d 	bl	800d344 <_malloc_r>
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	b140      	cbz	r0, 800d100 <__sfmoreglue+0x28>
 800d0ee:	2100      	movs	r1, #0
 800d0f0:	e9c0 1600 	strd	r1, r6, [r0]
 800d0f4:	300c      	adds	r0, #12
 800d0f6:	60a0      	str	r0, [r4, #8]
 800d0f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d0fc:	f000 f8cb 	bl	800d296 <memset>
 800d100:	4620      	mov	r0, r4
 800d102:	bd70      	pop	{r4, r5, r6, pc}

0800d104 <__sinit>:
 800d104:	6983      	ldr	r3, [r0, #24]
 800d106:	b510      	push	{r4, lr}
 800d108:	4604      	mov	r4, r0
 800d10a:	bb33      	cbnz	r3, 800d15a <__sinit+0x56>
 800d10c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d110:	6503      	str	r3, [r0, #80]	; 0x50
 800d112:	4b12      	ldr	r3, [pc, #72]	; (800d15c <__sinit+0x58>)
 800d114:	4a12      	ldr	r2, [pc, #72]	; (800d160 <__sinit+0x5c>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	6282      	str	r2, [r0, #40]	; 0x28
 800d11a:	4298      	cmp	r0, r3
 800d11c:	bf04      	itt	eq
 800d11e:	2301      	moveq	r3, #1
 800d120:	6183      	streq	r3, [r0, #24]
 800d122:	f000 f81f 	bl	800d164 <__sfp>
 800d126:	6060      	str	r0, [r4, #4]
 800d128:	4620      	mov	r0, r4
 800d12a:	f000 f81b 	bl	800d164 <__sfp>
 800d12e:	60a0      	str	r0, [r4, #8]
 800d130:	4620      	mov	r0, r4
 800d132:	f000 f817 	bl	800d164 <__sfp>
 800d136:	2200      	movs	r2, #0
 800d138:	60e0      	str	r0, [r4, #12]
 800d13a:	2104      	movs	r1, #4
 800d13c:	6860      	ldr	r0, [r4, #4]
 800d13e:	f7ff ffa1 	bl	800d084 <std>
 800d142:	2201      	movs	r2, #1
 800d144:	2109      	movs	r1, #9
 800d146:	68a0      	ldr	r0, [r4, #8]
 800d148:	f7ff ff9c 	bl	800d084 <std>
 800d14c:	2202      	movs	r2, #2
 800d14e:	2112      	movs	r1, #18
 800d150:	68e0      	ldr	r0, [r4, #12]
 800d152:	f7ff ff97 	bl	800d084 <std>
 800d156:	2301      	movs	r3, #1
 800d158:	61a3      	str	r3, [r4, #24]
 800d15a:	bd10      	pop	{r4, pc}
 800d15c:	0800ef28 	.word	0x0800ef28
 800d160:	0800d0cd 	.word	0x0800d0cd

0800d164 <__sfp>:
 800d164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d166:	4b1b      	ldr	r3, [pc, #108]	; (800d1d4 <__sfp+0x70>)
 800d168:	681e      	ldr	r6, [r3, #0]
 800d16a:	69b3      	ldr	r3, [r6, #24]
 800d16c:	4607      	mov	r7, r0
 800d16e:	b913      	cbnz	r3, 800d176 <__sfp+0x12>
 800d170:	4630      	mov	r0, r6
 800d172:	f7ff ffc7 	bl	800d104 <__sinit>
 800d176:	3648      	adds	r6, #72	; 0x48
 800d178:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d17c:	3b01      	subs	r3, #1
 800d17e:	d503      	bpl.n	800d188 <__sfp+0x24>
 800d180:	6833      	ldr	r3, [r6, #0]
 800d182:	b133      	cbz	r3, 800d192 <__sfp+0x2e>
 800d184:	6836      	ldr	r6, [r6, #0]
 800d186:	e7f7      	b.n	800d178 <__sfp+0x14>
 800d188:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d18c:	b16d      	cbz	r5, 800d1aa <__sfp+0x46>
 800d18e:	3468      	adds	r4, #104	; 0x68
 800d190:	e7f4      	b.n	800d17c <__sfp+0x18>
 800d192:	2104      	movs	r1, #4
 800d194:	4638      	mov	r0, r7
 800d196:	f7ff ff9f 	bl	800d0d8 <__sfmoreglue>
 800d19a:	6030      	str	r0, [r6, #0]
 800d19c:	2800      	cmp	r0, #0
 800d19e:	d1f1      	bne.n	800d184 <__sfp+0x20>
 800d1a0:	230c      	movs	r3, #12
 800d1a2:	603b      	str	r3, [r7, #0]
 800d1a4:	4604      	mov	r4, r0
 800d1a6:	4620      	mov	r0, r4
 800d1a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1aa:	4b0b      	ldr	r3, [pc, #44]	; (800d1d8 <__sfp+0x74>)
 800d1ac:	6665      	str	r5, [r4, #100]	; 0x64
 800d1ae:	e9c4 5500 	strd	r5, r5, [r4]
 800d1b2:	60a5      	str	r5, [r4, #8]
 800d1b4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d1b8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d1bc:	2208      	movs	r2, #8
 800d1be:	4629      	mov	r1, r5
 800d1c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d1c4:	f000 f867 	bl	800d296 <memset>
 800d1c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d1cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d1d0:	e7e9      	b.n	800d1a6 <__sfp+0x42>
 800d1d2:	bf00      	nop
 800d1d4:	0800ef28 	.word	0x0800ef28
 800d1d8:	ffff0001 	.word	0xffff0001

0800d1dc <_fwalk_reent>:
 800d1dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1e0:	4680      	mov	r8, r0
 800d1e2:	4689      	mov	r9, r1
 800d1e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d1e8:	2600      	movs	r6, #0
 800d1ea:	b914      	cbnz	r4, 800d1f2 <_fwalk_reent+0x16>
 800d1ec:	4630      	mov	r0, r6
 800d1ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1f2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d1f6:	3f01      	subs	r7, #1
 800d1f8:	d501      	bpl.n	800d1fe <_fwalk_reent+0x22>
 800d1fa:	6824      	ldr	r4, [r4, #0]
 800d1fc:	e7f5      	b.n	800d1ea <_fwalk_reent+0xe>
 800d1fe:	89ab      	ldrh	r3, [r5, #12]
 800d200:	2b01      	cmp	r3, #1
 800d202:	d907      	bls.n	800d214 <_fwalk_reent+0x38>
 800d204:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d208:	3301      	adds	r3, #1
 800d20a:	d003      	beq.n	800d214 <_fwalk_reent+0x38>
 800d20c:	4629      	mov	r1, r5
 800d20e:	4640      	mov	r0, r8
 800d210:	47c8      	blx	r9
 800d212:	4306      	orrs	r6, r0
 800d214:	3568      	adds	r5, #104	; 0x68
 800d216:	e7ee      	b.n	800d1f6 <_fwalk_reent+0x1a>

0800d218 <__libc_init_array>:
 800d218:	b570      	push	{r4, r5, r6, lr}
 800d21a:	4e0d      	ldr	r6, [pc, #52]	; (800d250 <__libc_init_array+0x38>)
 800d21c:	4c0d      	ldr	r4, [pc, #52]	; (800d254 <__libc_init_array+0x3c>)
 800d21e:	1ba4      	subs	r4, r4, r6
 800d220:	10a4      	asrs	r4, r4, #2
 800d222:	2500      	movs	r5, #0
 800d224:	42a5      	cmp	r5, r4
 800d226:	d109      	bne.n	800d23c <__libc_init_array+0x24>
 800d228:	4e0b      	ldr	r6, [pc, #44]	; (800d258 <__libc_init_array+0x40>)
 800d22a:	4c0c      	ldr	r4, [pc, #48]	; (800d25c <__libc_init_array+0x44>)
 800d22c:	f000 febe 	bl	800dfac <_init>
 800d230:	1ba4      	subs	r4, r4, r6
 800d232:	10a4      	asrs	r4, r4, #2
 800d234:	2500      	movs	r5, #0
 800d236:	42a5      	cmp	r5, r4
 800d238:	d105      	bne.n	800d246 <__libc_init_array+0x2e>
 800d23a:	bd70      	pop	{r4, r5, r6, pc}
 800d23c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d240:	4798      	blx	r3
 800d242:	3501      	adds	r5, #1
 800d244:	e7ee      	b.n	800d224 <__libc_init_array+0xc>
 800d246:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d24a:	4798      	blx	r3
 800d24c:	3501      	adds	r5, #1
 800d24e:	e7f2      	b.n	800d236 <__libc_init_array+0x1e>
 800d250:	0800ef68 	.word	0x0800ef68
 800d254:	0800ef68 	.word	0x0800ef68
 800d258:	0800ef68 	.word	0x0800ef68
 800d25c:	0800ef6c 	.word	0x0800ef6c

0800d260 <malloc>:
 800d260:	4b02      	ldr	r3, [pc, #8]	; (800d26c <malloc+0xc>)
 800d262:	4601      	mov	r1, r0
 800d264:	6818      	ldr	r0, [r3, #0]
 800d266:	f000 b86d 	b.w	800d344 <_malloc_r>
 800d26a:	bf00      	nop
 800d26c:	24000378 	.word	0x24000378

0800d270 <free>:
 800d270:	4b02      	ldr	r3, [pc, #8]	; (800d27c <free+0xc>)
 800d272:	4601      	mov	r1, r0
 800d274:	6818      	ldr	r0, [r3, #0]
 800d276:	f000 b817 	b.w	800d2a8 <_free_r>
 800d27a:	bf00      	nop
 800d27c:	24000378 	.word	0x24000378

0800d280 <memcpy>:
 800d280:	b510      	push	{r4, lr}
 800d282:	1e43      	subs	r3, r0, #1
 800d284:	440a      	add	r2, r1
 800d286:	4291      	cmp	r1, r2
 800d288:	d100      	bne.n	800d28c <memcpy+0xc>
 800d28a:	bd10      	pop	{r4, pc}
 800d28c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d290:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d294:	e7f7      	b.n	800d286 <memcpy+0x6>

0800d296 <memset>:
 800d296:	4402      	add	r2, r0
 800d298:	4603      	mov	r3, r0
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d100      	bne.n	800d2a0 <memset+0xa>
 800d29e:	4770      	bx	lr
 800d2a0:	f803 1b01 	strb.w	r1, [r3], #1
 800d2a4:	e7f9      	b.n	800d29a <memset+0x4>
	...

0800d2a8 <_free_r>:
 800d2a8:	b538      	push	{r3, r4, r5, lr}
 800d2aa:	4605      	mov	r5, r0
 800d2ac:	2900      	cmp	r1, #0
 800d2ae:	d045      	beq.n	800d33c <_free_r+0x94>
 800d2b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2b4:	1f0c      	subs	r4, r1, #4
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	bfb8      	it	lt
 800d2ba:	18e4      	addlt	r4, r4, r3
 800d2bc:	f000 fb42 	bl	800d944 <__malloc_lock>
 800d2c0:	4a1f      	ldr	r2, [pc, #124]	; (800d340 <_free_r+0x98>)
 800d2c2:	6813      	ldr	r3, [r2, #0]
 800d2c4:	4610      	mov	r0, r2
 800d2c6:	b933      	cbnz	r3, 800d2d6 <_free_r+0x2e>
 800d2c8:	6063      	str	r3, [r4, #4]
 800d2ca:	6014      	str	r4, [r2, #0]
 800d2cc:	4628      	mov	r0, r5
 800d2ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2d2:	f000 bb38 	b.w	800d946 <__malloc_unlock>
 800d2d6:	42a3      	cmp	r3, r4
 800d2d8:	d90c      	bls.n	800d2f4 <_free_r+0x4c>
 800d2da:	6821      	ldr	r1, [r4, #0]
 800d2dc:	1862      	adds	r2, r4, r1
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	bf04      	itt	eq
 800d2e2:	681a      	ldreq	r2, [r3, #0]
 800d2e4:	685b      	ldreq	r3, [r3, #4]
 800d2e6:	6063      	str	r3, [r4, #4]
 800d2e8:	bf04      	itt	eq
 800d2ea:	1852      	addeq	r2, r2, r1
 800d2ec:	6022      	streq	r2, [r4, #0]
 800d2ee:	6004      	str	r4, [r0, #0]
 800d2f0:	e7ec      	b.n	800d2cc <_free_r+0x24>
 800d2f2:	4613      	mov	r3, r2
 800d2f4:	685a      	ldr	r2, [r3, #4]
 800d2f6:	b10a      	cbz	r2, 800d2fc <_free_r+0x54>
 800d2f8:	42a2      	cmp	r2, r4
 800d2fa:	d9fa      	bls.n	800d2f2 <_free_r+0x4a>
 800d2fc:	6819      	ldr	r1, [r3, #0]
 800d2fe:	1858      	adds	r0, r3, r1
 800d300:	42a0      	cmp	r0, r4
 800d302:	d10b      	bne.n	800d31c <_free_r+0x74>
 800d304:	6820      	ldr	r0, [r4, #0]
 800d306:	4401      	add	r1, r0
 800d308:	1858      	adds	r0, r3, r1
 800d30a:	4282      	cmp	r2, r0
 800d30c:	6019      	str	r1, [r3, #0]
 800d30e:	d1dd      	bne.n	800d2cc <_free_r+0x24>
 800d310:	6810      	ldr	r0, [r2, #0]
 800d312:	6852      	ldr	r2, [r2, #4]
 800d314:	605a      	str	r2, [r3, #4]
 800d316:	4401      	add	r1, r0
 800d318:	6019      	str	r1, [r3, #0]
 800d31a:	e7d7      	b.n	800d2cc <_free_r+0x24>
 800d31c:	d902      	bls.n	800d324 <_free_r+0x7c>
 800d31e:	230c      	movs	r3, #12
 800d320:	602b      	str	r3, [r5, #0]
 800d322:	e7d3      	b.n	800d2cc <_free_r+0x24>
 800d324:	6820      	ldr	r0, [r4, #0]
 800d326:	1821      	adds	r1, r4, r0
 800d328:	428a      	cmp	r2, r1
 800d32a:	bf04      	itt	eq
 800d32c:	6811      	ldreq	r1, [r2, #0]
 800d32e:	6852      	ldreq	r2, [r2, #4]
 800d330:	6062      	str	r2, [r4, #4]
 800d332:	bf04      	itt	eq
 800d334:	1809      	addeq	r1, r1, r0
 800d336:	6021      	streq	r1, [r4, #0]
 800d338:	605c      	str	r4, [r3, #4]
 800d33a:	e7c7      	b.n	800d2cc <_free_r+0x24>
 800d33c:	bd38      	pop	{r3, r4, r5, pc}
 800d33e:	bf00      	nop
 800d340:	24000648 	.word	0x24000648

0800d344 <_malloc_r>:
 800d344:	b570      	push	{r4, r5, r6, lr}
 800d346:	1ccd      	adds	r5, r1, #3
 800d348:	f025 0503 	bic.w	r5, r5, #3
 800d34c:	3508      	adds	r5, #8
 800d34e:	2d0c      	cmp	r5, #12
 800d350:	bf38      	it	cc
 800d352:	250c      	movcc	r5, #12
 800d354:	2d00      	cmp	r5, #0
 800d356:	4606      	mov	r6, r0
 800d358:	db01      	blt.n	800d35e <_malloc_r+0x1a>
 800d35a:	42a9      	cmp	r1, r5
 800d35c:	d903      	bls.n	800d366 <_malloc_r+0x22>
 800d35e:	230c      	movs	r3, #12
 800d360:	6033      	str	r3, [r6, #0]
 800d362:	2000      	movs	r0, #0
 800d364:	bd70      	pop	{r4, r5, r6, pc}
 800d366:	f000 faed 	bl	800d944 <__malloc_lock>
 800d36a:	4a21      	ldr	r2, [pc, #132]	; (800d3f0 <_malloc_r+0xac>)
 800d36c:	6814      	ldr	r4, [r2, #0]
 800d36e:	4621      	mov	r1, r4
 800d370:	b991      	cbnz	r1, 800d398 <_malloc_r+0x54>
 800d372:	4c20      	ldr	r4, [pc, #128]	; (800d3f4 <_malloc_r+0xb0>)
 800d374:	6823      	ldr	r3, [r4, #0]
 800d376:	b91b      	cbnz	r3, 800d380 <_malloc_r+0x3c>
 800d378:	4630      	mov	r0, r6
 800d37a:	f000 f925 	bl	800d5c8 <_sbrk_r>
 800d37e:	6020      	str	r0, [r4, #0]
 800d380:	4629      	mov	r1, r5
 800d382:	4630      	mov	r0, r6
 800d384:	f000 f920 	bl	800d5c8 <_sbrk_r>
 800d388:	1c43      	adds	r3, r0, #1
 800d38a:	d124      	bne.n	800d3d6 <_malloc_r+0x92>
 800d38c:	230c      	movs	r3, #12
 800d38e:	6033      	str	r3, [r6, #0]
 800d390:	4630      	mov	r0, r6
 800d392:	f000 fad8 	bl	800d946 <__malloc_unlock>
 800d396:	e7e4      	b.n	800d362 <_malloc_r+0x1e>
 800d398:	680b      	ldr	r3, [r1, #0]
 800d39a:	1b5b      	subs	r3, r3, r5
 800d39c:	d418      	bmi.n	800d3d0 <_malloc_r+0x8c>
 800d39e:	2b0b      	cmp	r3, #11
 800d3a0:	d90f      	bls.n	800d3c2 <_malloc_r+0x7e>
 800d3a2:	600b      	str	r3, [r1, #0]
 800d3a4:	50cd      	str	r5, [r1, r3]
 800d3a6:	18cc      	adds	r4, r1, r3
 800d3a8:	4630      	mov	r0, r6
 800d3aa:	f000 facc 	bl	800d946 <__malloc_unlock>
 800d3ae:	f104 000b 	add.w	r0, r4, #11
 800d3b2:	1d23      	adds	r3, r4, #4
 800d3b4:	f020 0007 	bic.w	r0, r0, #7
 800d3b8:	1ac3      	subs	r3, r0, r3
 800d3ba:	d0d3      	beq.n	800d364 <_malloc_r+0x20>
 800d3bc:	425a      	negs	r2, r3
 800d3be:	50e2      	str	r2, [r4, r3]
 800d3c0:	e7d0      	b.n	800d364 <_malloc_r+0x20>
 800d3c2:	428c      	cmp	r4, r1
 800d3c4:	684b      	ldr	r3, [r1, #4]
 800d3c6:	bf16      	itet	ne
 800d3c8:	6063      	strne	r3, [r4, #4]
 800d3ca:	6013      	streq	r3, [r2, #0]
 800d3cc:	460c      	movne	r4, r1
 800d3ce:	e7eb      	b.n	800d3a8 <_malloc_r+0x64>
 800d3d0:	460c      	mov	r4, r1
 800d3d2:	6849      	ldr	r1, [r1, #4]
 800d3d4:	e7cc      	b.n	800d370 <_malloc_r+0x2c>
 800d3d6:	1cc4      	adds	r4, r0, #3
 800d3d8:	f024 0403 	bic.w	r4, r4, #3
 800d3dc:	42a0      	cmp	r0, r4
 800d3de:	d005      	beq.n	800d3ec <_malloc_r+0xa8>
 800d3e0:	1a21      	subs	r1, r4, r0
 800d3e2:	4630      	mov	r0, r6
 800d3e4:	f000 f8f0 	bl	800d5c8 <_sbrk_r>
 800d3e8:	3001      	adds	r0, #1
 800d3ea:	d0cf      	beq.n	800d38c <_malloc_r+0x48>
 800d3ec:	6025      	str	r5, [r4, #0]
 800d3ee:	e7db      	b.n	800d3a8 <_malloc_r+0x64>
 800d3f0:	24000648 	.word	0x24000648
 800d3f4:	2400064c 	.word	0x2400064c

0800d3f8 <iprintf>:
 800d3f8:	b40f      	push	{r0, r1, r2, r3}
 800d3fa:	4b0a      	ldr	r3, [pc, #40]	; (800d424 <iprintf+0x2c>)
 800d3fc:	b513      	push	{r0, r1, r4, lr}
 800d3fe:	681c      	ldr	r4, [r3, #0]
 800d400:	b124      	cbz	r4, 800d40c <iprintf+0x14>
 800d402:	69a3      	ldr	r3, [r4, #24]
 800d404:	b913      	cbnz	r3, 800d40c <iprintf+0x14>
 800d406:	4620      	mov	r0, r4
 800d408:	f7ff fe7c 	bl	800d104 <__sinit>
 800d40c:	ab05      	add	r3, sp, #20
 800d40e:	9a04      	ldr	r2, [sp, #16]
 800d410:	68a1      	ldr	r1, [r4, #8]
 800d412:	9301      	str	r3, [sp, #4]
 800d414:	4620      	mov	r0, r4
 800d416:	f000 fac1 	bl	800d99c <_vfiprintf_r>
 800d41a:	b002      	add	sp, #8
 800d41c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d420:	b004      	add	sp, #16
 800d422:	4770      	bx	lr
 800d424:	24000378 	.word	0x24000378

0800d428 <putchar>:
 800d428:	b538      	push	{r3, r4, r5, lr}
 800d42a:	4b08      	ldr	r3, [pc, #32]	; (800d44c <putchar+0x24>)
 800d42c:	681c      	ldr	r4, [r3, #0]
 800d42e:	4605      	mov	r5, r0
 800d430:	b124      	cbz	r4, 800d43c <putchar+0x14>
 800d432:	69a3      	ldr	r3, [r4, #24]
 800d434:	b913      	cbnz	r3, 800d43c <putchar+0x14>
 800d436:	4620      	mov	r0, r4
 800d438:	f7ff fe64 	bl	800d104 <__sinit>
 800d43c:	68a2      	ldr	r2, [r4, #8]
 800d43e:	4629      	mov	r1, r5
 800d440:	4620      	mov	r0, r4
 800d442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d446:	f000 bd47 	b.w	800ded8 <_putc_r>
 800d44a:	bf00      	nop
 800d44c:	24000378 	.word	0x24000378

0800d450 <_puts_r>:
 800d450:	b570      	push	{r4, r5, r6, lr}
 800d452:	460e      	mov	r6, r1
 800d454:	4605      	mov	r5, r0
 800d456:	b118      	cbz	r0, 800d460 <_puts_r+0x10>
 800d458:	6983      	ldr	r3, [r0, #24]
 800d45a:	b90b      	cbnz	r3, 800d460 <_puts_r+0x10>
 800d45c:	f7ff fe52 	bl	800d104 <__sinit>
 800d460:	69ab      	ldr	r3, [r5, #24]
 800d462:	68ac      	ldr	r4, [r5, #8]
 800d464:	b913      	cbnz	r3, 800d46c <_puts_r+0x1c>
 800d466:	4628      	mov	r0, r5
 800d468:	f7ff fe4c 	bl	800d104 <__sinit>
 800d46c:	4b23      	ldr	r3, [pc, #140]	; (800d4fc <_puts_r+0xac>)
 800d46e:	429c      	cmp	r4, r3
 800d470:	d117      	bne.n	800d4a2 <_puts_r+0x52>
 800d472:	686c      	ldr	r4, [r5, #4]
 800d474:	89a3      	ldrh	r3, [r4, #12]
 800d476:	071b      	lsls	r3, r3, #28
 800d478:	d51d      	bpl.n	800d4b6 <_puts_r+0x66>
 800d47a:	6923      	ldr	r3, [r4, #16]
 800d47c:	b1db      	cbz	r3, 800d4b6 <_puts_r+0x66>
 800d47e:	3e01      	subs	r6, #1
 800d480:	68a3      	ldr	r3, [r4, #8]
 800d482:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d486:	3b01      	subs	r3, #1
 800d488:	60a3      	str	r3, [r4, #8]
 800d48a:	b9e9      	cbnz	r1, 800d4c8 <_puts_r+0x78>
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	da2e      	bge.n	800d4ee <_puts_r+0x9e>
 800d490:	4622      	mov	r2, r4
 800d492:	210a      	movs	r1, #10
 800d494:	4628      	mov	r0, r5
 800d496:	f000 f8fd 	bl	800d694 <__swbuf_r>
 800d49a:	3001      	adds	r0, #1
 800d49c:	d011      	beq.n	800d4c2 <_puts_r+0x72>
 800d49e:	200a      	movs	r0, #10
 800d4a0:	e011      	b.n	800d4c6 <_puts_r+0x76>
 800d4a2:	4b17      	ldr	r3, [pc, #92]	; (800d500 <_puts_r+0xb0>)
 800d4a4:	429c      	cmp	r4, r3
 800d4a6:	d101      	bne.n	800d4ac <_puts_r+0x5c>
 800d4a8:	68ac      	ldr	r4, [r5, #8]
 800d4aa:	e7e3      	b.n	800d474 <_puts_r+0x24>
 800d4ac:	4b15      	ldr	r3, [pc, #84]	; (800d504 <_puts_r+0xb4>)
 800d4ae:	429c      	cmp	r4, r3
 800d4b0:	bf08      	it	eq
 800d4b2:	68ec      	ldreq	r4, [r5, #12]
 800d4b4:	e7de      	b.n	800d474 <_puts_r+0x24>
 800d4b6:	4621      	mov	r1, r4
 800d4b8:	4628      	mov	r0, r5
 800d4ba:	f000 f94f 	bl	800d75c <__swsetup_r>
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	d0dd      	beq.n	800d47e <_puts_r+0x2e>
 800d4c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4c6:	bd70      	pop	{r4, r5, r6, pc}
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	da04      	bge.n	800d4d6 <_puts_r+0x86>
 800d4cc:	69a2      	ldr	r2, [r4, #24]
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	dc06      	bgt.n	800d4e0 <_puts_r+0x90>
 800d4d2:	290a      	cmp	r1, #10
 800d4d4:	d004      	beq.n	800d4e0 <_puts_r+0x90>
 800d4d6:	6823      	ldr	r3, [r4, #0]
 800d4d8:	1c5a      	adds	r2, r3, #1
 800d4da:	6022      	str	r2, [r4, #0]
 800d4dc:	7019      	strb	r1, [r3, #0]
 800d4de:	e7cf      	b.n	800d480 <_puts_r+0x30>
 800d4e0:	4622      	mov	r2, r4
 800d4e2:	4628      	mov	r0, r5
 800d4e4:	f000 f8d6 	bl	800d694 <__swbuf_r>
 800d4e8:	3001      	adds	r0, #1
 800d4ea:	d1c9      	bne.n	800d480 <_puts_r+0x30>
 800d4ec:	e7e9      	b.n	800d4c2 <_puts_r+0x72>
 800d4ee:	6823      	ldr	r3, [r4, #0]
 800d4f0:	200a      	movs	r0, #10
 800d4f2:	1c5a      	adds	r2, r3, #1
 800d4f4:	6022      	str	r2, [r4, #0]
 800d4f6:	7018      	strb	r0, [r3, #0]
 800d4f8:	e7e5      	b.n	800d4c6 <_puts_r+0x76>
 800d4fa:	bf00      	nop
 800d4fc:	0800eee8 	.word	0x0800eee8
 800d500:	0800ef08 	.word	0x0800ef08
 800d504:	0800eec8 	.word	0x0800eec8

0800d508 <puts>:
 800d508:	4b02      	ldr	r3, [pc, #8]	; (800d514 <puts+0xc>)
 800d50a:	4601      	mov	r1, r0
 800d50c:	6818      	ldr	r0, [r3, #0]
 800d50e:	f7ff bf9f 	b.w	800d450 <_puts_r>
 800d512:	bf00      	nop
 800d514:	24000378 	.word	0x24000378

0800d518 <srand>:
 800d518:	b538      	push	{r3, r4, r5, lr}
 800d51a:	4b0d      	ldr	r3, [pc, #52]	; (800d550 <srand+0x38>)
 800d51c:	681c      	ldr	r4, [r3, #0]
 800d51e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d520:	4605      	mov	r5, r0
 800d522:	b97b      	cbnz	r3, 800d544 <srand+0x2c>
 800d524:	2018      	movs	r0, #24
 800d526:	f7ff fe9b 	bl	800d260 <malloc>
 800d52a:	4a0a      	ldr	r2, [pc, #40]	; (800d554 <srand+0x3c>)
 800d52c:	4b0a      	ldr	r3, [pc, #40]	; (800d558 <srand+0x40>)
 800d52e:	63a0      	str	r0, [r4, #56]	; 0x38
 800d530:	e9c0 2300 	strd	r2, r3, [r0]
 800d534:	4b09      	ldr	r3, [pc, #36]	; (800d55c <srand+0x44>)
 800d536:	6083      	str	r3, [r0, #8]
 800d538:	230b      	movs	r3, #11
 800d53a:	8183      	strh	r3, [r0, #12]
 800d53c:	2201      	movs	r2, #1
 800d53e:	2300      	movs	r3, #0
 800d540:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800d544:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d546:	2200      	movs	r2, #0
 800d548:	611d      	str	r5, [r3, #16]
 800d54a:	615a      	str	r2, [r3, #20]
 800d54c:	bd38      	pop	{r3, r4, r5, pc}
 800d54e:	bf00      	nop
 800d550:	24000378 	.word	0x24000378
 800d554:	abcd330e 	.word	0xabcd330e
 800d558:	e66d1234 	.word	0xe66d1234
 800d55c:	0005deec 	.word	0x0005deec

0800d560 <rand>:
 800d560:	b538      	push	{r3, r4, r5, lr}
 800d562:	4b13      	ldr	r3, [pc, #76]	; (800d5b0 <rand+0x50>)
 800d564:	681c      	ldr	r4, [r3, #0]
 800d566:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d568:	b97b      	cbnz	r3, 800d58a <rand+0x2a>
 800d56a:	2018      	movs	r0, #24
 800d56c:	f7ff fe78 	bl	800d260 <malloc>
 800d570:	4a10      	ldr	r2, [pc, #64]	; (800d5b4 <rand+0x54>)
 800d572:	4b11      	ldr	r3, [pc, #68]	; (800d5b8 <rand+0x58>)
 800d574:	63a0      	str	r0, [r4, #56]	; 0x38
 800d576:	e9c0 2300 	strd	r2, r3, [r0]
 800d57a:	4b10      	ldr	r3, [pc, #64]	; (800d5bc <rand+0x5c>)
 800d57c:	6083      	str	r3, [r0, #8]
 800d57e:	230b      	movs	r3, #11
 800d580:	8183      	strh	r3, [r0, #12]
 800d582:	2201      	movs	r2, #1
 800d584:	2300      	movs	r3, #0
 800d586:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800d58a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d58c:	480c      	ldr	r0, [pc, #48]	; (800d5c0 <rand+0x60>)
 800d58e:	690a      	ldr	r2, [r1, #16]
 800d590:	694b      	ldr	r3, [r1, #20]
 800d592:	4c0c      	ldr	r4, [pc, #48]	; (800d5c4 <rand+0x64>)
 800d594:	4350      	muls	r0, r2
 800d596:	fb04 0003 	mla	r0, r4, r3, r0
 800d59a:	fba2 2304 	umull	r2, r3, r2, r4
 800d59e:	4403      	add	r3, r0
 800d5a0:	1c54      	adds	r4, r2, #1
 800d5a2:	f143 0500 	adc.w	r5, r3, #0
 800d5a6:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800d5aa:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800d5ae:	bd38      	pop	{r3, r4, r5, pc}
 800d5b0:	24000378 	.word	0x24000378
 800d5b4:	abcd330e 	.word	0xabcd330e
 800d5b8:	e66d1234 	.word	0xe66d1234
 800d5bc:	0005deec 	.word	0x0005deec
 800d5c0:	5851f42d 	.word	0x5851f42d
 800d5c4:	4c957f2d 	.word	0x4c957f2d

0800d5c8 <_sbrk_r>:
 800d5c8:	b538      	push	{r3, r4, r5, lr}
 800d5ca:	4c06      	ldr	r4, [pc, #24]	; (800d5e4 <_sbrk_r+0x1c>)
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	4605      	mov	r5, r0
 800d5d0:	4608      	mov	r0, r1
 800d5d2:	6023      	str	r3, [r4, #0]
 800d5d4:	f7f6 fb84 	bl	8003ce0 <_sbrk>
 800d5d8:	1c43      	adds	r3, r0, #1
 800d5da:	d102      	bne.n	800d5e2 <_sbrk_r+0x1a>
 800d5dc:	6823      	ldr	r3, [r4, #0]
 800d5de:	b103      	cbz	r3, 800d5e2 <_sbrk_r+0x1a>
 800d5e0:	602b      	str	r3, [r5, #0]
 800d5e2:	bd38      	pop	{r3, r4, r5, pc}
 800d5e4:	24000bb8 	.word	0x24000bb8

0800d5e8 <__sread>:
 800d5e8:	b510      	push	{r4, lr}
 800d5ea:	460c      	mov	r4, r1
 800d5ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5f0:	f000 fca8 	bl	800df44 <_read_r>
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	bfab      	itete	ge
 800d5f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d5fa:	89a3      	ldrhlt	r3, [r4, #12]
 800d5fc:	181b      	addge	r3, r3, r0
 800d5fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d602:	bfac      	ite	ge
 800d604:	6563      	strge	r3, [r4, #84]	; 0x54
 800d606:	81a3      	strhlt	r3, [r4, #12]
 800d608:	bd10      	pop	{r4, pc}

0800d60a <__swrite>:
 800d60a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d60e:	461f      	mov	r7, r3
 800d610:	898b      	ldrh	r3, [r1, #12]
 800d612:	05db      	lsls	r3, r3, #23
 800d614:	4605      	mov	r5, r0
 800d616:	460c      	mov	r4, r1
 800d618:	4616      	mov	r6, r2
 800d61a:	d505      	bpl.n	800d628 <__swrite+0x1e>
 800d61c:	2302      	movs	r3, #2
 800d61e:	2200      	movs	r2, #0
 800d620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d624:	f000 f918 	bl	800d858 <_lseek_r>
 800d628:	89a3      	ldrh	r3, [r4, #12]
 800d62a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d62e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d632:	81a3      	strh	r3, [r4, #12]
 800d634:	4632      	mov	r2, r6
 800d636:	463b      	mov	r3, r7
 800d638:	4628      	mov	r0, r5
 800d63a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d63e:	f000 b87b 	b.w	800d738 <_write_r>

0800d642 <__sseek>:
 800d642:	b510      	push	{r4, lr}
 800d644:	460c      	mov	r4, r1
 800d646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d64a:	f000 f905 	bl	800d858 <_lseek_r>
 800d64e:	1c43      	adds	r3, r0, #1
 800d650:	89a3      	ldrh	r3, [r4, #12]
 800d652:	bf15      	itete	ne
 800d654:	6560      	strne	r0, [r4, #84]	; 0x54
 800d656:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d65a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d65e:	81a3      	strheq	r3, [r4, #12]
 800d660:	bf18      	it	ne
 800d662:	81a3      	strhne	r3, [r4, #12]
 800d664:	bd10      	pop	{r4, pc}

0800d666 <__sclose>:
 800d666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d66a:	f000 b8e5 	b.w	800d838 <_close_r>

0800d66e <strncmp>:
 800d66e:	b510      	push	{r4, lr}
 800d670:	b16a      	cbz	r2, 800d68e <strncmp+0x20>
 800d672:	3901      	subs	r1, #1
 800d674:	1884      	adds	r4, r0, r2
 800d676:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d67a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d67e:	4293      	cmp	r3, r2
 800d680:	d103      	bne.n	800d68a <strncmp+0x1c>
 800d682:	42a0      	cmp	r0, r4
 800d684:	d001      	beq.n	800d68a <strncmp+0x1c>
 800d686:	2b00      	cmp	r3, #0
 800d688:	d1f5      	bne.n	800d676 <strncmp+0x8>
 800d68a:	1a98      	subs	r0, r3, r2
 800d68c:	bd10      	pop	{r4, pc}
 800d68e:	4610      	mov	r0, r2
 800d690:	e7fc      	b.n	800d68c <strncmp+0x1e>
	...

0800d694 <__swbuf_r>:
 800d694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d696:	460e      	mov	r6, r1
 800d698:	4614      	mov	r4, r2
 800d69a:	4605      	mov	r5, r0
 800d69c:	b118      	cbz	r0, 800d6a6 <__swbuf_r+0x12>
 800d69e:	6983      	ldr	r3, [r0, #24]
 800d6a0:	b90b      	cbnz	r3, 800d6a6 <__swbuf_r+0x12>
 800d6a2:	f7ff fd2f 	bl	800d104 <__sinit>
 800d6a6:	4b21      	ldr	r3, [pc, #132]	; (800d72c <__swbuf_r+0x98>)
 800d6a8:	429c      	cmp	r4, r3
 800d6aa:	d12a      	bne.n	800d702 <__swbuf_r+0x6e>
 800d6ac:	686c      	ldr	r4, [r5, #4]
 800d6ae:	69a3      	ldr	r3, [r4, #24]
 800d6b0:	60a3      	str	r3, [r4, #8]
 800d6b2:	89a3      	ldrh	r3, [r4, #12]
 800d6b4:	071a      	lsls	r2, r3, #28
 800d6b6:	d52e      	bpl.n	800d716 <__swbuf_r+0x82>
 800d6b8:	6923      	ldr	r3, [r4, #16]
 800d6ba:	b363      	cbz	r3, 800d716 <__swbuf_r+0x82>
 800d6bc:	6923      	ldr	r3, [r4, #16]
 800d6be:	6820      	ldr	r0, [r4, #0]
 800d6c0:	1ac0      	subs	r0, r0, r3
 800d6c2:	6963      	ldr	r3, [r4, #20]
 800d6c4:	b2f6      	uxtb	r6, r6
 800d6c6:	4283      	cmp	r3, r0
 800d6c8:	4637      	mov	r7, r6
 800d6ca:	dc04      	bgt.n	800d6d6 <__swbuf_r+0x42>
 800d6cc:	4621      	mov	r1, r4
 800d6ce:	4628      	mov	r0, r5
 800d6d0:	f7ff fc9c 	bl	800d00c <_fflush_r>
 800d6d4:	bb28      	cbnz	r0, 800d722 <__swbuf_r+0x8e>
 800d6d6:	68a3      	ldr	r3, [r4, #8]
 800d6d8:	3b01      	subs	r3, #1
 800d6da:	60a3      	str	r3, [r4, #8]
 800d6dc:	6823      	ldr	r3, [r4, #0]
 800d6de:	1c5a      	adds	r2, r3, #1
 800d6e0:	6022      	str	r2, [r4, #0]
 800d6e2:	701e      	strb	r6, [r3, #0]
 800d6e4:	6963      	ldr	r3, [r4, #20]
 800d6e6:	3001      	adds	r0, #1
 800d6e8:	4283      	cmp	r3, r0
 800d6ea:	d004      	beq.n	800d6f6 <__swbuf_r+0x62>
 800d6ec:	89a3      	ldrh	r3, [r4, #12]
 800d6ee:	07db      	lsls	r3, r3, #31
 800d6f0:	d519      	bpl.n	800d726 <__swbuf_r+0x92>
 800d6f2:	2e0a      	cmp	r6, #10
 800d6f4:	d117      	bne.n	800d726 <__swbuf_r+0x92>
 800d6f6:	4621      	mov	r1, r4
 800d6f8:	4628      	mov	r0, r5
 800d6fa:	f7ff fc87 	bl	800d00c <_fflush_r>
 800d6fe:	b190      	cbz	r0, 800d726 <__swbuf_r+0x92>
 800d700:	e00f      	b.n	800d722 <__swbuf_r+0x8e>
 800d702:	4b0b      	ldr	r3, [pc, #44]	; (800d730 <__swbuf_r+0x9c>)
 800d704:	429c      	cmp	r4, r3
 800d706:	d101      	bne.n	800d70c <__swbuf_r+0x78>
 800d708:	68ac      	ldr	r4, [r5, #8]
 800d70a:	e7d0      	b.n	800d6ae <__swbuf_r+0x1a>
 800d70c:	4b09      	ldr	r3, [pc, #36]	; (800d734 <__swbuf_r+0xa0>)
 800d70e:	429c      	cmp	r4, r3
 800d710:	bf08      	it	eq
 800d712:	68ec      	ldreq	r4, [r5, #12]
 800d714:	e7cb      	b.n	800d6ae <__swbuf_r+0x1a>
 800d716:	4621      	mov	r1, r4
 800d718:	4628      	mov	r0, r5
 800d71a:	f000 f81f 	bl	800d75c <__swsetup_r>
 800d71e:	2800      	cmp	r0, #0
 800d720:	d0cc      	beq.n	800d6bc <__swbuf_r+0x28>
 800d722:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d726:	4638      	mov	r0, r7
 800d728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d72a:	bf00      	nop
 800d72c:	0800eee8 	.word	0x0800eee8
 800d730:	0800ef08 	.word	0x0800ef08
 800d734:	0800eec8 	.word	0x0800eec8

0800d738 <_write_r>:
 800d738:	b538      	push	{r3, r4, r5, lr}
 800d73a:	4c07      	ldr	r4, [pc, #28]	; (800d758 <_write_r+0x20>)
 800d73c:	4605      	mov	r5, r0
 800d73e:	4608      	mov	r0, r1
 800d740:	4611      	mov	r1, r2
 800d742:	2200      	movs	r2, #0
 800d744:	6022      	str	r2, [r4, #0]
 800d746:	461a      	mov	r2, r3
 800d748:	f7f3 fd02 	bl	8001150 <_write>
 800d74c:	1c43      	adds	r3, r0, #1
 800d74e:	d102      	bne.n	800d756 <_write_r+0x1e>
 800d750:	6823      	ldr	r3, [r4, #0]
 800d752:	b103      	cbz	r3, 800d756 <_write_r+0x1e>
 800d754:	602b      	str	r3, [r5, #0]
 800d756:	bd38      	pop	{r3, r4, r5, pc}
 800d758:	24000bb8 	.word	0x24000bb8

0800d75c <__swsetup_r>:
 800d75c:	4b32      	ldr	r3, [pc, #200]	; (800d828 <__swsetup_r+0xcc>)
 800d75e:	b570      	push	{r4, r5, r6, lr}
 800d760:	681d      	ldr	r5, [r3, #0]
 800d762:	4606      	mov	r6, r0
 800d764:	460c      	mov	r4, r1
 800d766:	b125      	cbz	r5, 800d772 <__swsetup_r+0x16>
 800d768:	69ab      	ldr	r3, [r5, #24]
 800d76a:	b913      	cbnz	r3, 800d772 <__swsetup_r+0x16>
 800d76c:	4628      	mov	r0, r5
 800d76e:	f7ff fcc9 	bl	800d104 <__sinit>
 800d772:	4b2e      	ldr	r3, [pc, #184]	; (800d82c <__swsetup_r+0xd0>)
 800d774:	429c      	cmp	r4, r3
 800d776:	d10f      	bne.n	800d798 <__swsetup_r+0x3c>
 800d778:	686c      	ldr	r4, [r5, #4]
 800d77a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d77e:	b29a      	uxth	r2, r3
 800d780:	0715      	lsls	r5, r2, #28
 800d782:	d42c      	bmi.n	800d7de <__swsetup_r+0x82>
 800d784:	06d0      	lsls	r0, r2, #27
 800d786:	d411      	bmi.n	800d7ac <__swsetup_r+0x50>
 800d788:	2209      	movs	r2, #9
 800d78a:	6032      	str	r2, [r6, #0]
 800d78c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d790:	81a3      	strh	r3, [r4, #12]
 800d792:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d796:	e03e      	b.n	800d816 <__swsetup_r+0xba>
 800d798:	4b25      	ldr	r3, [pc, #148]	; (800d830 <__swsetup_r+0xd4>)
 800d79a:	429c      	cmp	r4, r3
 800d79c:	d101      	bne.n	800d7a2 <__swsetup_r+0x46>
 800d79e:	68ac      	ldr	r4, [r5, #8]
 800d7a0:	e7eb      	b.n	800d77a <__swsetup_r+0x1e>
 800d7a2:	4b24      	ldr	r3, [pc, #144]	; (800d834 <__swsetup_r+0xd8>)
 800d7a4:	429c      	cmp	r4, r3
 800d7a6:	bf08      	it	eq
 800d7a8:	68ec      	ldreq	r4, [r5, #12]
 800d7aa:	e7e6      	b.n	800d77a <__swsetup_r+0x1e>
 800d7ac:	0751      	lsls	r1, r2, #29
 800d7ae:	d512      	bpl.n	800d7d6 <__swsetup_r+0x7a>
 800d7b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d7b2:	b141      	cbz	r1, 800d7c6 <__swsetup_r+0x6a>
 800d7b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d7b8:	4299      	cmp	r1, r3
 800d7ba:	d002      	beq.n	800d7c2 <__swsetup_r+0x66>
 800d7bc:	4630      	mov	r0, r6
 800d7be:	f7ff fd73 	bl	800d2a8 <_free_r>
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	6363      	str	r3, [r4, #52]	; 0x34
 800d7c6:	89a3      	ldrh	r3, [r4, #12]
 800d7c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d7cc:	81a3      	strh	r3, [r4, #12]
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	6063      	str	r3, [r4, #4]
 800d7d2:	6923      	ldr	r3, [r4, #16]
 800d7d4:	6023      	str	r3, [r4, #0]
 800d7d6:	89a3      	ldrh	r3, [r4, #12]
 800d7d8:	f043 0308 	orr.w	r3, r3, #8
 800d7dc:	81a3      	strh	r3, [r4, #12]
 800d7de:	6923      	ldr	r3, [r4, #16]
 800d7e0:	b94b      	cbnz	r3, 800d7f6 <__swsetup_r+0x9a>
 800d7e2:	89a3      	ldrh	r3, [r4, #12]
 800d7e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d7e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7ec:	d003      	beq.n	800d7f6 <__swsetup_r+0x9a>
 800d7ee:	4621      	mov	r1, r4
 800d7f0:	4630      	mov	r0, r6
 800d7f2:	f000 f867 	bl	800d8c4 <__smakebuf_r>
 800d7f6:	89a2      	ldrh	r2, [r4, #12]
 800d7f8:	f012 0301 	ands.w	r3, r2, #1
 800d7fc:	d00c      	beq.n	800d818 <__swsetup_r+0xbc>
 800d7fe:	2300      	movs	r3, #0
 800d800:	60a3      	str	r3, [r4, #8]
 800d802:	6963      	ldr	r3, [r4, #20]
 800d804:	425b      	negs	r3, r3
 800d806:	61a3      	str	r3, [r4, #24]
 800d808:	6923      	ldr	r3, [r4, #16]
 800d80a:	b953      	cbnz	r3, 800d822 <__swsetup_r+0xc6>
 800d80c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d810:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800d814:	d1ba      	bne.n	800d78c <__swsetup_r+0x30>
 800d816:	bd70      	pop	{r4, r5, r6, pc}
 800d818:	0792      	lsls	r2, r2, #30
 800d81a:	bf58      	it	pl
 800d81c:	6963      	ldrpl	r3, [r4, #20]
 800d81e:	60a3      	str	r3, [r4, #8]
 800d820:	e7f2      	b.n	800d808 <__swsetup_r+0xac>
 800d822:	2000      	movs	r0, #0
 800d824:	e7f7      	b.n	800d816 <__swsetup_r+0xba>
 800d826:	bf00      	nop
 800d828:	24000378 	.word	0x24000378
 800d82c:	0800eee8 	.word	0x0800eee8
 800d830:	0800ef08 	.word	0x0800ef08
 800d834:	0800eec8 	.word	0x0800eec8

0800d838 <_close_r>:
 800d838:	b538      	push	{r3, r4, r5, lr}
 800d83a:	4c06      	ldr	r4, [pc, #24]	; (800d854 <_close_r+0x1c>)
 800d83c:	2300      	movs	r3, #0
 800d83e:	4605      	mov	r5, r0
 800d840:	4608      	mov	r0, r1
 800d842:	6023      	str	r3, [r4, #0]
 800d844:	f7f6 fa17 	bl	8003c76 <_close>
 800d848:	1c43      	adds	r3, r0, #1
 800d84a:	d102      	bne.n	800d852 <_close_r+0x1a>
 800d84c:	6823      	ldr	r3, [r4, #0]
 800d84e:	b103      	cbz	r3, 800d852 <_close_r+0x1a>
 800d850:	602b      	str	r3, [r5, #0]
 800d852:	bd38      	pop	{r3, r4, r5, pc}
 800d854:	24000bb8 	.word	0x24000bb8

0800d858 <_lseek_r>:
 800d858:	b538      	push	{r3, r4, r5, lr}
 800d85a:	4c07      	ldr	r4, [pc, #28]	; (800d878 <_lseek_r+0x20>)
 800d85c:	4605      	mov	r5, r0
 800d85e:	4608      	mov	r0, r1
 800d860:	4611      	mov	r1, r2
 800d862:	2200      	movs	r2, #0
 800d864:	6022      	str	r2, [r4, #0]
 800d866:	461a      	mov	r2, r3
 800d868:	f7f6 fa2c 	bl	8003cc4 <_lseek>
 800d86c:	1c43      	adds	r3, r0, #1
 800d86e:	d102      	bne.n	800d876 <_lseek_r+0x1e>
 800d870:	6823      	ldr	r3, [r4, #0]
 800d872:	b103      	cbz	r3, 800d876 <_lseek_r+0x1e>
 800d874:	602b      	str	r3, [r5, #0]
 800d876:	bd38      	pop	{r3, r4, r5, pc}
 800d878:	24000bb8 	.word	0x24000bb8

0800d87c <__swhatbuf_r>:
 800d87c:	b570      	push	{r4, r5, r6, lr}
 800d87e:	460e      	mov	r6, r1
 800d880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d884:	2900      	cmp	r1, #0
 800d886:	b096      	sub	sp, #88	; 0x58
 800d888:	4614      	mov	r4, r2
 800d88a:	461d      	mov	r5, r3
 800d88c:	da07      	bge.n	800d89e <__swhatbuf_r+0x22>
 800d88e:	2300      	movs	r3, #0
 800d890:	602b      	str	r3, [r5, #0]
 800d892:	89b3      	ldrh	r3, [r6, #12]
 800d894:	061a      	lsls	r2, r3, #24
 800d896:	d410      	bmi.n	800d8ba <__swhatbuf_r+0x3e>
 800d898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d89c:	e00e      	b.n	800d8bc <__swhatbuf_r+0x40>
 800d89e:	466a      	mov	r2, sp
 800d8a0:	f000 fb62 	bl	800df68 <_fstat_r>
 800d8a4:	2800      	cmp	r0, #0
 800d8a6:	dbf2      	blt.n	800d88e <__swhatbuf_r+0x12>
 800d8a8:	9a01      	ldr	r2, [sp, #4]
 800d8aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d8ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d8b2:	425a      	negs	r2, r3
 800d8b4:	415a      	adcs	r2, r3
 800d8b6:	602a      	str	r2, [r5, #0]
 800d8b8:	e7ee      	b.n	800d898 <__swhatbuf_r+0x1c>
 800d8ba:	2340      	movs	r3, #64	; 0x40
 800d8bc:	2000      	movs	r0, #0
 800d8be:	6023      	str	r3, [r4, #0]
 800d8c0:	b016      	add	sp, #88	; 0x58
 800d8c2:	bd70      	pop	{r4, r5, r6, pc}

0800d8c4 <__smakebuf_r>:
 800d8c4:	898b      	ldrh	r3, [r1, #12]
 800d8c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d8c8:	079d      	lsls	r5, r3, #30
 800d8ca:	4606      	mov	r6, r0
 800d8cc:	460c      	mov	r4, r1
 800d8ce:	d507      	bpl.n	800d8e0 <__smakebuf_r+0x1c>
 800d8d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d8d4:	6023      	str	r3, [r4, #0]
 800d8d6:	6123      	str	r3, [r4, #16]
 800d8d8:	2301      	movs	r3, #1
 800d8da:	6163      	str	r3, [r4, #20]
 800d8dc:	b002      	add	sp, #8
 800d8de:	bd70      	pop	{r4, r5, r6, pc}
 800d8e0:	ab01      	add	r3, sp, #4
 800d8e2:	466a      	mov	r2, sp
 800d8e4:	f7ff ffca 	bl	800d87c <__swhatbuf_r>
 800d8e8:	9900      	ldr	r1, [sp, #0]
 800d8ea:	4605      	mov	r5, r0
 800d8ec:	4630      	mov	r0, r6
 800d8ee:	f7ff fd29 	bl	800d344 <_malloc_r>
 800d8f2:	b948      	cbnz	r0, 800d908 <__smakebuf_r+0x44>
 800d8f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8f8:	059a      	lsls	r2, r3, #22
 800d8fa:	d4ef      	bmi.n	800d8dc <__smakebuf_r+0x18>
 800d8fc:	f023 0303 	bic.w	r3, r3, #3
 800d900:	f043 0302 	orr.w	r3, r3, #2
 800d904:	81a3      	strh	r3, [r4, #12]
 800d906:	e7e3      	b.n	800d8d0 <__smakebuf_r+0xc>
 800d908:	4b0d      	ldr	r3, [pc, #52]	; (800d940 <__smakebuf_r+0x7c>)
 800d90a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d90c:	89a3      	ldrh	r3, [r4, #12]
 800d90e:	6020      	str	r0, [r4, #0]
 800d910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d914:	81a3      	strh	r3, [r4, #12]
 800d916:	9b00      	ldr	r3, [sp, #0]
 800d918:	6163      	str	r3, [r4, #20]
 800d91a:	9b01      	ldr	r3, [sp, #4]
 800d91c:	6120      	str	r0, [r4, #16]
 800d91e:	b15b      	cbz	r3, 800d938 <__smakebuf_r+0x74>
 800d920:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d924:	4630      	mov	r0, r6
 800d926:	f000 fb31 	bl	800df8c <_isatty_r>
 800d92a:	b128      	cbz	r0, 800d938 <__smakebuf_r+0x74>
 800d92c:	89a3      	ldrh	r3, [r4, #12]
 800d92e:	f023 0303 	bic.w	r3, r3, #3
 800d932:	f043 0301 	orr.w	r3, r3, #1
 800d936:	81a3      	strh	r3, [r4, #12]
 800d938:	89a3      	ldrh	r3, [r4, #12]
 800d93a:	431d      	orrs	r5, r3
 800d93c:	81a5      	strh	r5, [r4, #12]
 800d93e:	e7cd      	b.n	800d8dc <__smakebuf_r+0x18>
 800d940:	0800d0cd 	.word	0x0800d0cd

0800d944 <__malloc_lock>:
 800d944:	4770      	bx	lr

0800d946 <__malloc_unlock>:
 800d946:	4770      	bx	lr

0800d948 <__sfputc_r>:
 800d948:	6893      	ldr	r3, [r2, #8]
 800d94a:	3b01      	subs	r3, #1
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	b410      	push	{r4}
 800d950:	6093      	str	r3, [r2, #8]
 800d952:	da08      	bge.n	800d966 <__sfputc_r+0x1e>
 800d954:	6994      	ldr	r4, [r2, #24]
 800d956:	42a3      	cmp	r3, r4
 800d958:	db01      	blt.n	800d95e <__sfputc_r+0x16>
 800d95a:	290a      	cmp	r1, #10
 800d95c:	d103      	bne.n	800d966 <__sfputc_r+0x1e>
 800d95e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d962:	f7ff be97 	b.w	800d694 <__swbuf_r>
 800d966:	6813      	ldr	r3, [r2, #0]
 800d968:	1c58      	adds	r0, r3, #1
 800d96a:	6010      	str	r0, [r2, #0]
 800d96c:	7019      	strb	r1, [r3, #0]
 800d96e:	4608      	mov	r0, r1
 800d970:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d974:	4770      	bx	lr

0800d976 <__sfputs_r>:
 800d976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d978:	4606      	mov	r6, r0
 800d97a:	460f      	mov	r7, r1
 800d97c:	4614      	mov	r4, r2
 800d97e:	18d5      	adds	r5, r2, r3
 800d980:	42ac      	cmp	r4, r5
 800d982:	d101      	bne.n	800d988 <__sfputs_r+0x12>
 800d984:	2000      	movs	r0, #0
 800d986:	e007      	b.n	800d998 <__sfputs_r+0x22>
 800d988:	463a      	mov	r2, r7
 800d98a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d98e:	4630      	mov	r0, r6
 800d990:	f7ff ffda 	bl	800d948 <__sfputc_r>
 800d994:	1c43      	adds	r3, r0, #1
 800d996:	d1f3      	bne.n	800d980 <__sfputs_r+0xa>
 800d998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d99c <_vfiprintf_r>:
 800d99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9a0:	460c      	mov	r4, r1
 800d9a2:	b09d      	sub	sp, #116	; 0x74
 800d9a4:	4617      	mov	r7, r2
 800d9a6:	461d      	mov	r5, r3
 800d9a8:	4606      	mov	r6, r0
 800d9aa:	b118      	cbz	r0, 800d9b4 <_vfiprintf_r+0x18>
 800d9ac:	6983      	ldr	r3, [r0, #24]
 800d9ae:	b90b      	cbnz	r3, 800d9b4 <_vfiprintf_r+0x18>
 800d9b0:	f7ff fba8 	bl	800d104 <__sinit>
 800d9b4:	4b7c      	ldr	r3, [pc, #496]	; (800dba8 <_vfiprintf_r+0x20c>)
 800d9b6:	429c      	cmp	r4, r3
 800d9b8:	d158      	bne.n	800da6c <_vfiprintf_r+0xd0>
 800d9ba:	6874      	ldr	r4, [r6, #4]
 800d9bc:	89a3      	ldrh	r3, [r4, #12]
 800d9be:	0718      	lsls	r0, r3, #28
 800d9c0:	d55e      	bpl.n	800da80 <_vfiprintf_r+0xe4>
 800d9c2:	6923      	ldr	r3, [r4, #16]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d05b      	beq.n	800da80 <_vfiprintf_r+0xe4>
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	9309      	str	r3, [sp, #36]	; 0x24
 800d9cc:	2320      	movs	r3, #32
 800d9ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d9d2:	2330      	movs	r3, #48	; 0x30
 800d9d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d9d8:	9503      	str	r5, [sp, #12]
 800d9da:	f04f 0b01 	mov.w	fp, #1
 800d9de:	46b8      	mov	r8, r7
 800d9e0:	4645      	mov	r5, r8
 800d9e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d9e6:	b10b      	cbz	r3, 800d9ec <_vfiprintf_r+0x50>
 800d9e8:	2b25      	cmp	r3, #37	; 0x25
 800d9ea:	d154      	bne.n	800da96 <_vfiprintf_r+0xfa>
 800d9ec:	ebb8 0a07 	subs.w	sl, r8, r7
 800d9f0:	d00b      	beq.n	800da0a <_vfiprintf_r+0x6e>
 800d9f2:	4653      	mov	r3, sl
 800d9f4:	463a      	mov	r2, r7
 800d9f6:	4621      	mov	r1, r4
 800d9f8:	4630      	mov	r0, r6
 800d9fa:	f7ff ffbc 	bl	800d976 <__sfputs_r>
 800d9fe:	3001      	adds	r0, #1
 800da00:	f000 80c2 	beq.w	800db88 <_vfiprintf_r+0x1ec>
 800da04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da06:	4453      	add	r3, sl
 800da08:	9309      	str	r3, [sp, #36]	; 0x24
 800da0a:	f898 3000 	ldrb.w	r3, [r8]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	f000 80ba 	beq.w	800db88 <_vfiprintf_r+0x1ec>
 800da14:	2300      	movs	r3, #0
 800da16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800da1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da1e:	9304      	str	r3, [sp, #16]
 800da20:	9307      	str	r3, [sp, #28]
 800da22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da26:	931a      	str	r3, [sp, #104]	; 0x68
 800da28:	46a8      	mov	r8, r5
 800da2a:	2205      	movs	r2, #5
 800da2c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800da30:	485e      	ldr	r0, [pc, #376]	; (800dbac <_vfiprintf_r+0x210>)
 800da32:	f7f2 fc5d 	bl	80002f0 <memchr>
 800da36:	9b04      	ldr	r3, [sp, #16]
 800da38:	bb78      	cbnz	r0, 800da9a <_vfiprintf_r+0xfe>
 800da3a:	06d9      	lsls	r1, r3, #27
 800da3c:	bf44      	itt	mi
 800da3e:	2220      	movmi	r2, #32
 800da40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800da44:	071a      	lsls	r2, r3, #28
 800da46:	bf44      	itt	mi
 800da48:	222b      	movmi	r2, #43	; 0x2b
 800da4a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800da4e:	782a      	ldrb	r2, [r5, #0]
 800da50:	2a2a      	cmp	r2, #42	; 0x2a
 800da52:	d02a      	beq.n	800daaa <_vfiprintf_r+0x10e>
 800da54:	9a07      	ldr	r2, [sp, #28]
 800da56:	46a8      	mov	r8, r5
 800da58:	2000      	movs	r0, #0
 800da5a:	250a      	movs	r5, #10
 800da5c:	4641      	mov	r1, r8
 800da5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da62:	3b30      	subs	r3, #48	; 0x30
 800da64:	2b09      	cmp	r3, #9
 800da66:	d969      	bls.n	800db3c <_vfiprintf_r+0x1a0>
 800da68:	b360      	cbz	r0, 800dac4 <_vfiprintf_r+0x128>
 800da6a:	e024      	b.n	800dab6 <_vfiprintf_r+0x11a>
 800da6c:	4b50      	ldr	r3, [pc, #320]	; (800dbb0 <_vfiprintf_r+0x214>)
 800da6e:	429c      	cmp	r4, r3
 800da70:	d101      	bne.n	800da76 <_vfiprintf_r+0xda>
 800da72:	68b4      	ldr	r4, [r6, #8]
 800da74:	e7a2      	b.n	800d9bc <_vfiprintf_r+0x20>
 800da76:	4b4f      	ldr	r3, [pc, #316]	; (800dbb4 <_vfiprintf_r+0x218>)
 800da78:	429c      	cmp	r4, r3
 800da7a:	bf08      	it	eq
 800da7c:	68f4      	ldreq	r4, [r6, #12]
 800da7e:	e79d      	b.n	800d9bc <_vfiprintf_r+0x20>
 800da80:	4621      	mov	r1, r4
 800da82:	4630      	mov	r0, r6
 800da84:	f7ff fe6a 	bl	800d75c <__swsetup_r>
 800da88:	2800      	cmp	r0, #0
 800da8a:	d09d      	beq.n	800d9c8 <_vfiprintf_r+0x2c>
 800da8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da90:	b01d      	add	sp, #116	; 0x74
 800da92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da96:	46a8      	mov	r8, r5
 800da98:	e7a2      	b.n	800d9e0 <_vfiprintf_r+0x44>
 800da9a:	4a44      	ldr	r2, [pc, #272]	; (800dbac <_vfiprintf_r+0x210>)
 800da9c:	1a80      	subs	r0, r0, r2
 800da9e:	fa0b f000 	lsl.w	r0, fp, r0
 800daa2:	4318      	orrs	r0, r3
 800daa4:	9004      	str	r0, [sp, #16]
 800daa6:	4645      	mov	r5, r8
 800daa8:	e7be      	b.n	800da28 <_vfiprintf_r+0x8c>
 800daaa:	9a03      	ldr	r2, [sp, #12]
 800daac:	1d11      	adds	r1, r2, #4
 800daae:	6812      	ldr	r2, [r2, #0]
 800dab0:	9103      	str	r1, [sp, #12]
 800dab2:	2a00      	cmp	r2, #0
 800dab4:	db01      	blt.n	800daba <_vfiprintf_r+0x11e>
 800dab6:	9207      	str	r2, [sp, #28]
 800dab8:	e004      	b.n	800dac4 <_vfiprintf_r+0x128>
 800daba:	4252      	negs	r2, r2
 800dabc:	f043 0302 	orr.w	r3, r3, #2
 800dac0:	9207      	str	r2, [sp, #28]
 800dac2:	9304      	str	r3, [sp, #16]
 800dac4:	f898 3000 	ldrb.w	r3, [r8]
 800dac8:	2b2e      	cmp	r3, #46	; 0x2e
 800daca:	d10e      	bne.n	800daea <_vfiprintf_r+0x14e>
 800dacc:	f898 3001 	ldrb.w	r3, [r8, #1]
 800dad0:	2b2a      	cmp	r3, #42	; 0x2a
 800dad2:	d138      	bne.n	800db46 <_vfiprintf_r+0x1aa>
 800dad4:	9b03      	ldr	r3, [sp, #12]
 800dad6:	1d1a      	adds	r2, r3, #4
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	9203      	str	r2, [sp, #12]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	bfb8      	it	lt
 800dae0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dae4:	f108 0802 	add.w	r8, r8, #2
 800dae8:	9305      	str	r3, [sp, #20]
 800daea:	4d33      	ldr	r5, [pc, #204]	; (800dbb8 <_vfiprintf_r+0x21c>)
 800daec:	f898 1000 	ldrb.w	r1, [r8]
 800daf0:	2203      	movs	r2, #3
 800daf2:	4628      	mov	r0, r5
 800daf4:	f7f2 fbfc 	bl	80002f0 <memchr>
 800daf8:	b140      	cbz	r0, 800db0c <_vfiprintf_r+0x170>
 800dafa:	2340      	movs	r3, #64	; 0x40
 800dafc:	1b40      	subs	r0, r0, r5
 800dafe:	fa03 f000 	lsl.w	r0, r3, r0
 800db02:	9b04      	ldr	r3, [sp, #16]
 800db04:	4303      	orrs	r3, r0
 800db06:	f108 0801 	add.w	r8, r8, #1
 800db0a:	9304      	str	r3, [sp, #16]
 800db0c:	f898 1000 	ldrb.w	r1, [r8]
 800db10:	482a      	ldr	r0, [pc, #168]	; (800dbbc <_vfiprintf_r+0x220>)
 800db12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db16:	2206      	movs	r2, #6
 800db18:	f108 0701 	add.w	r7, r8, #1
 800db1c:	f7f2 fbe8 	bl	80002f0 <memchr>
 800db20:	2800      	cmp	r0, #0
 800db22:	d037      	beq.n	800db94 <_vfiprintf_r+0x1f8>
 800db24:	4b26      	ldr	r3, [pc, #152]	; (800dbc0 <_vfiprintf_r+0x224>)
 800db26:	bb1b      	cbnz	r3, 800db70 <_vfiprintf_r+0x1d4>
 800db28:	9b03      	ldr	r3, [sp, #12]
 800db2a:	3307      	adds	r3, #7
 800db2c:	f023 0307 	bic.w	r3, r3, #7
 800db30:	3308      	adds	r3, #8
 800db32:	9303      	str	r3, [sp, #12]
 800db34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db36:	444b      	add	r3, r9
 800db38:	9309      	str	r3, [sp, #36]	; 0x24
 800db3a:	e750      	b.n	800d9de <_vfiprintf_r+0x42>
 800db3c:	fb05 3202 	mla	r2, r5, r2, r3
 800db40:	2001      	movs	r0, #1
 800db42:	4688      	mov	r8, r1
 800db44:	e78a      	b.n	800da5c <_vfiprintf_r+0xc0>
 800db46:	2300      	movs	r3, #0
 800db48:	f108 0801 	add.w	r8, r8, #1
 800db4c:	9305      	str	r3, [sp, #20]
 800db4e:	4619      	mov	r1, r3
 800db50:	250a      	movs	r5, #10
 800db52:	4640      	mov	r0, r8
 800db54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db58:	3a30      	subs	r2, #48	; 0x30
 800db5a:	2a09      	cmp	r2, #9
 800db5c:	d903      	bls.n	800db66 <_vfiprintf_r+0x1ca>
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d0c3      	beq.n	800daea <_vfiprintf_r+0x14e>
 800db62:	9105      	str	r1, [sp, #20]
 800db64:	e7c1      	b.n	800daea <_vfiprintf_r+0x14e>
 800db66:	fb05 2101 	mla	r1, r5, r1, r2
 800db6a:	2301      	movs	r3, #1
 800db6c:	4680      	mov	r8, r0
 800db6e:	e7f0      	b.n	800db52 <_vfiprintf_r+0x1b6>
 800db70:	ab03      	add	r3, sp, #12
 800db72:	9300      	str	r3, [sp, #0]
 800db74:	4622      	mov	r2, r4
 800db76:	4b13      	ldr	r3, [pc, #76]	; (800dbc4 <_vfiprintf_r+0x228>)
 800db78:	a904      	add	r1, sp, #16
 800db7a:	4630      	mov	r0, r6
 800db7c:	f3af 8000 	nop.w
 800db80:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800db84:	4681      	mov	r9, r0
 800db86:	d1d5      	bne.n	800db34 <_vfiprintf_r+0x198>
 800db88:	89a3      	ldrh	r3, [r4, #12]
 800db8a:	065b      	lsls	r3, r3, #25
 800db8c:	f53f af7e 	bmi.w	800da8c <_vfiprintf_r+0xf0>
 800db90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db92:	e77d      	b.n	800da90 <_vfiprintf_r+0xf4>
 800db94:	ab03      	add	r3, sp, #12
 800db96:	9300      	str	r3, [sp, #0]
 800db98:	4622      	mov	r2, r4
 800db9a:	4b0a      	ldr	r3, [pc, #40]	; (800dbc4 <_vfiprintf_r+0x228>)
 800db9c:	a904      	add	r1, sp, #16
 800db9e:	4630      	mov	r0, r6
 800dba0:	f000 f888 	bl	800dcb4 <_printf_i>
 800dba4:	e7ec      	b.n	800db80 <_vfiprintf_r+0x1e4>
 800dba6:	bf00      	nop
 800dba8:	0800eee8 	.word	0x0800eee8
 800dbac:	0800ef2c 	.word	0x0800ef2c
 800dbb0:	0800ef08 	.word	0x0800ef08
 800dbb4:	0800eec8 	.word	0x0800eec8
 800dbb8:	0800ef32 	.word	0x0800ef32
 800dbbc:	0800ef36 	.word	0x0800ef36
 800dbc0:	00000000 	.word	0x00000000
 800dbc4:	0800d977 	.word	0x0800d977

0800dbc8 <_printf_common>:
 800dbc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbcc:	4691      	mov	r9, r2
 800dbce:	461f      	mov	r7, r3
 800dbd0:	688a      	ldr	r2, [r1, #8]
 800dbd2:	690b      	ldr	r3, [r1, #16]
 800dbd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dbd8:	4293      	cmp	r3, r2
 800dbda:	bfb8      	it	lt
 800dbdc:	4613      	movlt	r3, r2
 800dbde:	f8c9 3000 	str.w	r3, [r9]
 800dbe2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dbe6:	4606      	mov	r6, r0
 800dbe8:	460c      	mov	r4, r1
 800dbea:	b112      	cbz	r2, 800dbf2 <_printf_common+0x2a>
 800dbec:	3301      	adds	r3, #1
 800dbee:	f8c9 3000 	str.w	r3, [r9]
 800dbf2:	6823      	ldr	r3, [r4, #0]
 800dbf4:	0699      	lsls	r1, r3, #26
 800dbf6:	bf42      	ittt	mi
 800dbf8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800dbfc:	3302      	addmi	r3, #2
 800dbfe:	f8c9 3000 	strmi.w	r3, [r9]
 800dc02:	6825      	ldr	r5, [r4, #0]
 800dc04:	f015 0506 	ands.w	r5, r5, #6
 800dc08:	d107      	bne.n	800dc1a <_printf_common+0x52>
 800dc0a:	f104 0a19 	add.w	sl, r4, #25
 800dc0e:	68e3      	ldr	r3, [r4, #12]
 800dc10:	f8d9 2000 	ldr.w	r2, [r9]
 800dc14:	1a9b      	subs	r3, r3, r2
 800dc16:	42ab      	cmp	r3, r5
 800dc18:	dc28      	bgt.n	800dc6c <_printf_common+0xa4>
 800dc1a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800dc1e:	6822      	ldr	r2, [r4, #0]
 800dc20:	3300      	adds	r3, #0
 800dc22:	bf18      	it	ne
 800dc24:	2301      	movne	r3, #1
 800dc26:	0692      	lsls	r2, r2, #26
 800dc28:	d42d      	bmi.n	800dc86 <_printf_common+0xbe>
 800dc2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dc2e:	4639      	mov	r1, r7
 800dc30:	4630      	mov	r0, r6
 800dc32:	47c0      	blx	r8
 800dc34:	3001      	adds	r0, #1
 800dc36:	d020      	beq.n	800dc7a <_printf_common+0xb2>
 800dc38:	6823      	ldr	r3, [r4, #0]
 800dc3a:	68e5      	ldr	r5, [r4, #12]
 800dc3c:	f8d9 2000 	ldr.w	r2, [r9]
 800dc40:	f003 0306 	and.w	r3, r3, #6
 800dc44:	2b04      	cmp	r3, #4
 800dc46:	bf08      	it	eq
 800dc48:	1aad      	subeq	r5, r5, r2
 800dc4a:	68a3      	ldr	r3, [r4, #8]
 800dc4c:	6922      	ldr	r2, [r4, #16]
 800dc4e:	bf0c      	ite	eq
 800dc50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc54:	2500      	movne	r5, #0
 800dc56:	4293      	cmp	r3, r2
 800dc58:	bfc4      	itt	gt
 800dc5a:	1a9b      	subgt	r3, r3, r2
 800dc5c:	18ed      	addgt	r5, r5, r3
 800dc5e:	f04f 0900 	mov.w	r9, #0
 800dc62:	341a      	adds	r4, #26
 800dc64:	454d      	cmp	r5, r9
 800dc66:	d11a      	bne.n	800dc9e <_printf_common+0xd6>
 800dc68:	2000      	movs	r0, #0
 800dc6a:	e008      	b.n	800dc7e <_printf_common+0xb6>
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	4652      	mov	r2, sl
 800dc70:	4639      	mov	r1, r7
 800dc72:	4630      	mov	r0, r6
 800dc74:	47c0      	blx	r8
 800dc76:	3001      	adds	r0, #1
 800dc78:	d103      	bne.n	800dc82 <_printf_common+0xba>
 800dc7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc82:	3501      	adds	r5, #1
 800dc84:	e7c3      	b.n	800dc0e <_printf_common+0x46>
 800dc86:	18e1      	adds	r1, r4, r3
 800dc88:	1c5a      	adds	r2, r3, #1
 800dc8a:	2030      	movs	r0, #48	; 0x30
 800dc8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dc90:	4422      	add	r2, r4
 800dc92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dc96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dc9a:	3302      	adds	r3, #2
 800dc9c:	e7c5      	b.n	800dc2a <_printf_common+0x62>
 800dc9e:	2301      	movs	r3, #1
 800dca0:	4622      	mov	r2, r4
 800dca2:	4639      	mov	r1, r7
 800dca4:	4630      	mov	r0, r6
 800dca6:	47c0      	blx	r8
 800dca8:	3001      	adds	r0, #1
 800dcaa:	d0e6      	beq.n	800dc7a <_printf_common+0xb2>
 800dcac:	f109 0901 	add.w	r9, r9, #1
 800dcb0:	e7d8      	b.n	800dc64 <_printf_common+0x9c>
	...

0800dcb4 <_printf_i>:
 800dcb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dcb8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800dcbc:	460c      	mov	r4, r1
 800dcbe:	7e09      	ldrb	r1, [r1, #24]
 800dcc0:	b085      	sub	sp, #20
 800dcc2:	296e      	cmp	r1, #110	; 0x6e
 800dcc4:	4617      	mov	r7, r2
 800dcc6:	4606      	mov	r6, r0
 800dcc8:	4698      	mov	r8, r3
 800dcca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dccc:	f000 80b3 	beq.w	800de36 <_printf_i+0x182>
 800dcd0:	d822      	bhi.n	800dd18 <_printf_i+0x64>
 800dcd2:	2963      	cmp	r1, #99	; 0x63
 800dcd4:	d036      	beq.n	800dd44 <_printf_i+0x90>
 800dcd6:	d80a      	bhi.n	800dcee <_printf_i+0x3a>
 800dcd8:	2900      	cmp	r1, #0
 800dcda:	f000 80b9 	beq.w	800de50 <_printf_i+0x19c>
 800dcde:	2958      	cmp	r1, #88	; 0x58
 800dce0:	f000 8083 	beq.w	800ddea <_printf_i+0x136>
 800dce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dce8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800dcec:	e032      	b.n	800dd54 <_printf_i+0xa0>
 800dcee:	2964      	cmp	r1, #100	; 0x64
 800dcf0:	d001      	beq.n	800dcf6 <_printf_i+0x42>
 800dcf2:	2969      	cmp	r1, #105	; 0x69
 800dcf4:	d1f6      	bne.n	800dce4 <_printf_i+0x30>
 800dcf6:	6820      	ldr	r0, [r4, #0]
 800dcf8:	6813      	ldr	r3, [r2, #0]
 800dcfa:	0605      	lsls	r5, r0, #24
 800dcfc:	f103 0104 	add.w	r1, r3, #4
 800dd00:	d52a      	bpl.n	800dd58 <_printf_i+0xa4>
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	6011      	str	r1, [r2, #0]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	da03      	bge.n	800dd12 <_printf_i+0x5e>
 800dd0a:	222d      	movs	r2, #45	; 0x2d
 800dd0c:	425b      	negs	r3, r3
 800dd0e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800dd12:	486f      	ldr	r0, [pc, #444]	; (800ded0 <_printf_i+0x21c>)
 800dd14:	220a      	movs	r2, #10
 800dd16:	e039      	b.n	800dd8c <_printf_i+0xd8>
 800dd18:	2973      	cmp	r1, #115	; 0x73
 800dd1a:	f000 809d 	beq.w	800de58 <_printf_i+0x1a4>
 800dd1e:	d808      	bhi.n	800dd32 <_printf_i+0x7e>
 800dd20:	296f      	cmp	r1, #111	; 0x6f
 800dd22:	d020      	beq.n	800dd66 <_printf_i+0xb2>
 800dd24:	2970      	cmp	r1, #112	; 0x70
 800dd26:	d1dd      	bne.n	800dce4 <_printf_i+0x30>
 800dd28:	6823      	ldr	r3, [r4, #0]
 800dd2a:	f043 0320 	orr.w	r3, r3, #32
 800dd2e:	6023      	str	r3, [r4, #0]
 800dd30:	e003      	b.n	800dd3a <_printf_i+0x86>
 800dd32:	2975      	cmp	r1, #117	; 0x75
 800dd34:	d017      	beq.n	800dd66 <_printf_i+0xb2>
 800dd36:	2978      	cmp	r1, #120	; 0x78
 800dd38:	d1d4      	bne.n	800dce4 <_printf_i+0x30>
 800dd3a:	2378      	movs	r3, #120	; 0x78
 800dd3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dd40:	4864      	ldr	r0, [pc, #400]	; (800ded4 <_printf_i+0x220>)
 800dd42:	e055      	b.n	800ddf0 <_printf_i+0x13c>
 800dd44:	6813      	ldr	r3, [r2, #0]
 800dd46:	1d19      	adds	r1, r3, #4
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	6011      	str	r1, [r2, #0]
 800dd4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dd54:	2301      	movs	r3, #1
 800dd56:	e08c      	b.n	800de72 <_printf_i+0x1be>
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	6011      	str	r1, [r2, #0]
 800dd5c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dd60:	bf18      	it	ne
 800dd62:	b21b      	sxthne	r3, r3
 800dd64:	e7cf      	b.n	800dd06 <_printf_i+0x52>
 800dd66:	6813      	ldr	r3, [r2, #0]
 800dd68:	6825      	ldr	r5, [r4, #0]
 800dd6a:	1d18      	adds	r0, r3, #4
 800dd6c:	6010      	str	r0, [r2, #0]
 800dd6e:	0628      	lsls	r0, r5, #24
 800dd70:	d501      	bpl.n	800dd76 <_printf_i+0xc2>
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	e002      	b.n	800dd7c <_printf_i+0xc8>
 800dd76:	0668      	lsls	r0, r5, #25
 800dd78:	d5fb      	bpl.n	800dd72 <_printf_i+0xbe>
 800dd7a:	881b      	ldrh	r3, [r3, #0]
 800dd7c:	4854      	ldr	r0, [pc, #336]	; (800ded0 <_printf_i+0x21c>)
 800dd7e:	296f      	cmp	r1, #111	; 0x6f
 800dd80:	bf14      	ite	ne
 800dd82:	220a      	movne	r2, #10
 800dd84:	2208      	moveq	r2, #8
 800dd86:	2100      	movs	r1, #0
 800dd88:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dd8c:	6865      	ldr	r5, [r4, #4]
 800dd8e:	60a5      	str	r5, [r4, #8]
 800dd90:	2d00      	cmp	r5, #0
 800dd92:	f2c0 8095 	blt.w	800dec0 <_printf_i+0x20c>
 800dd96:	6821      	ldr	r1, [r4, #0]
 800dd98:	f021 0104 	bic.w	r1, r1, #4
 800dd9c:	6021      	str	r1, [r4, #0]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d13d      	bne.n	800de1e <_printf_i+0x16a>
 800dda2:	2d00      	cmp	r5, #0
 800dda4:	f040 808e 	bne.w	800dec4 <_printf_i+0x210>
 800dda8:	4665      	mov	r5, ip
 800ddaa:	2a08      	cmp	r2, #8
 800ddac:	d10b      	bne.n	800ddc6 <_printf_i+0x112>
 800ddae:	6823      	ldr	r3, [r4, #0]
 800ddb0:	07db      	lsls	r3, r3, #31
 800ddb2:	d508      	bpl.n	800ddc6 <_printf_i+0x112>
 800ddb4:	6923      	ldr	r3, [r4, #16]
 800ddb6:	6862      	ldr	r2, [r4, #4]
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	bfde      	ittt	le
 800ddbc:	2330      	movle	r3, #48	; 0x30
 800ddbe:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ddc2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ddc6:	ebac 0305 	sub.w	r3, ip, r5
 800ddca:	6123      	str	r3, [r4, #16]
 800ddcc:	f8cd 8000 	str.w	r8, [sp]
 800ddd0:	463b      	mov	r3, r7
 800ddd2:	aa03      	add	r2, sp, #12
 800ddd4:	4621      	mov	r1, r4
 800ddd6:	4630      	mov	r0, r6
 800ddd8:	f7ff fef6 	bl	800dbc8 <_printf_common>
 800dddc:	3001      	adds	r0, #1
 800ddde:	d14d      	bne.n	800de7c <_printf_i+0x1c8>
 800dde0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dde4:	b005      	add	sp, #20
 800dde6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddea:	4839      	ldr	r0, [pc, #228]	; (800ded0 <_printf_i+0x21c>)
 800ddec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ddf0:	6813      	ldr	r3, [r2, #0]
 800ddf2:	6821      	ldr	r1, [r4, #0]
 800ddf4:	1d1d      	adds	r5, r3, #4
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	6015      	str	r5, [r2, #0]
 800ddfa:	060a      	lsls	r2, r1, #24
 800ddfc:	d50b      	bpl.n	800de16 <_printf_i+0x162>
 800ddfe:	07ca      	lsls	r2, r1, #31
 800de00:	bf44      	itt	mi
 800de02:	f041 0120 	orrmi.w	r1, r1, #32
 800de06:	6021      	strmi	r1, [r4, #0]
 800de08:	b91b      	cbnz	r3, 800de12 <_printf_i+0x15e>
 800de0a:	6822      	ldr	r2, [r4, #0]
 800de0c:	f022 0220 	bic.w	r2, r2, #32
 800de10:	6022      	str	r2, [r4, #0]
 800de12:	2210      	movs	r2, #16
 800de14:	e7b7      	b.n	800dd86 <_printf_i+0xd2>
 800de16:	064d      	lsls	r5, r1, #25
 800de18:	bf48      	it	mi
 800de1a:	b29b      	uxthmi	r3, r3
 800de1c:	e7ef      	b.n	800ddfe <_printf_i+0x14a>
 800de1e:	4665      	mov	r5, ip
 800de20:	fbb3 f1f2 	udiv	r1, r3, r2
 800de24:	fb02 3311 	mls	r3, r2, r1, r3
 800de28:	5cc3      	ldrb	r3, [r0, r3]
 800de2a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800de2e:	460b      	mov	r3, r1
 800de30:	2900      	cmp	r1, #0
 800de32:	d1f5      	bne.n	800de20 <_printf_i+0x16c>
 800de34:	e7b9      	b.n	800ddaa <_printf_i+0xf6>
 800de36:	6813      	ldr	r3, [r2, #0]
 800de38:	6825      	ldr	r5, [r4, #0]
 800de3a:	6961      	ldr	r1, [r4, #20]
 800de3c:	1d18      	adds	r0, r3, #4
 800de3e:	6010      	str	r0, [r2, #0]
 800de40:	0628      	lsls	r0, r5, #24
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	d501      	bpl.n	800de4a <_printf_i+0x196>
 800de46:	6019      	str	r1, [r3, #0]
 800de48:	e002      	b.n	800de50 <_printf_i+0x19c>
 800de4a:	066a      	lsls	r2, r5, #25
 800de4c:	d5fb      	bpl.n	800de46 <_printf_i+0x192>
 800de4e:	8019      	strh	r1, [r3, #0]
 800de50:	2300      	movs	r3, #0
 800de52:	6123      	str	r3, [r4, #16]
 800de54:	4665      	mov	r5, ip
 800de56:	e7b9      	b.n	800ddcc <_printf_i+0x118>
 800de58:	6813      	ldr	r3, [r2, #0]
 800de5a:	1d19      	adds	r1, r3, #4
 800de5c:	6011      	str	r1, [r2, #0]
 800de5e:	681d      	ldr	r5, [r3, #0]
 800de60:	6862      	ldr	r2, [r4, #4]
 800de62:	2100      	movs	r1, #0
 800de64:	4628      	mov	r0, r5
 800de66:	f7f2 fa43 	bl	80002f0 <memchr>
 800de6a:	b108      	cbz	r0, 800de70 <_printf_i+0x1bc>
 800de6c:	1b40      	subs	r0, r0, r5
 800de6e:	6060      	str	r0, [r4, #4]
 800de70:	6863      	ldr	r3, [r4, #4]
 800de72:	6123      	str	r3, [r4, #16]
 800de74:	2300      	movs	r3, #0
 800de76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de7a:	e7a7      	b.n	800ddcc <_printf_i+0x118>
 800de7c:	6923      	ldr	r3, [r4, #16]
 800de7e:	462a      	mov	r2, r5
 800de80:	4639      	mov	r1, r7
 800de82:	4630      	mov	r0, r6
 800de84:	47c0      	blx	r8
 800de86:	3001      	adds	r0, #1
 800de88:	d0aa      	beq.n	800dde0 <_printf_i+0x12c>
 800de8a:	6823      	ldr	r3, [r4, #0]
 800de8c:	079b      	lsls	r3, r3, #30
 800de8e:	d413      	bmi.n	800deb8 <_printf_i+0x204>
 800de90:	68e0      	ldr	r0, [r4, #12]
 800de92:	9b03      	ldr	r3, [sp, #12]
 800de94:	4298      	cmp	r0, r3
 800de96:	bfb8      	it	lt
 800de98:	4618      	movlt	r0, r3
 800de9a:	e7a3      	b.n	800dde4 <_printf_i+0x130>
 800de9c:	2301      	movs	r3, #1
 800de9e:	464a      	mov	r2, r9
 800dea0:	4639      	mov	r1, r7
 800dea2:	4630      	mov	r0, r6
 800dea4:	47c0      	blx	r8
 800dea6:	3001      	adds	r0, #1
 800dea8:	d09a      	beq.n	800dde0 <_printf_i+0x12c>
 800deaa:	3501      	adds	r5, #1
 800deac:	68e3      	ldr	r3, [r4, #12]
 800deae:	9a03      	ldr	r2, [sp, #12]
 800deb0:	1a9b      	subs	r3, r3, r2
 800deb2:	42ab      	cmp	r3, r5
 800deb4:	dcf2      	bgt.n	800de9c <_printf_i+0x1e8>
 800deb6:	e7eb      	b.n	800de90 <_printf_i+0x1dc>
 800deb8:	2500      	movs	r5, #0
 800deba:	f104 0919 	add.w	r9, r4, #25
 800debe:	e7f5      	b.n	800deac <_printf_i+0x1f8>
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d1ac      	bne.n	800de1e <_printf_i+0x16a>
 800dec4:	7803      	ldrb	r3, [r0, #0]
 800dec6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800deca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dece:	e76c      	b.n	800ddaa <_printf_i+0xf6>
 800ded0:	0800ef3d 	.word	0x0800ef3d
 800ded4:	0800ef4e 	.word	0x0800ef4e

0800ded8 <_putc_r>:
 800ded8:	b570      	push	{r4, r5, r6, lr}
 800deda:	460d      	mov	r5, r1
 800dedc:	4614      	mov	r4, r2
 800dede:	4606      	mov	r6, r0
 800dee0:	b118      	cbz	r0, 800deea <_putc_r+0x12>
 800dee2:	6983      	ldr	r3, [r0, #24]
 800dee4:	b90b      	cbnz	r3, 800deea <_putc_r+0x12>
 800dee6:	f7ff f90d 	bl	800d104 <__sinit>
 800deea:	4b13      	ldr	r3, [pc, #76]	; (800df38 <_putc_r+0x60>)
 800deec:	429c      	cmp	r4, r3
 800deee:	d112      	bne.n	800df16 <_putc_r+0x3e>
 800def0:	6874      	ldr	r4, [r6, #4]
 800def2:	68a3      	ldr	r3, [r4, #8]
 800def4:	3b01      	subs	r3, #1
 800def6:	2b00      	cmp	r3, #0
 800def8:	60a3      	str	r3, [r4, #8]
 800defa:	da16      	bge.n	800df2a <_putc_r+0x52>
 800defc:	69a2      	ldr	r2, [r4, #24]
 800defe:	4293      	cmp	r3, r2
 800df00:	db02      	blt.n	800df08 <_putc_r+0x30>
 800df02:	b2eb      	uxtb	r3, r5
 800df04:	2b0a      	cmp	r3, #10
 800df06:	d110      	bne.n	800df2a <_putc_r+0x52>
 800df08:	4622      	mov	r2, r4
 800df0a:	4629      	mov	r1, r5
 800df0c:	4630      	mov	r0, r6
 800df0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800df12:	f7ff bbbf 	b.w	800d694 <__swbuf_r>
 800df16:	4b09      	ldr	r3, [pc, #36]	; (800df3c <_putc_r+0x64>)
 800df18:	429c      	cmp	r4, r3
 800df1a:	d101      	bne.n	800df20 <_putc_r+0x48>
 800df1c:	68b4      	ldr	r4, [r6, #8]
 800df1e:	e7e8      	b.n	800def2 <_putc_r+0x1a>
 800df20:	4b07      	ldr	r3, [pc, #28]	; (800df40 <_putc_r+0x68>)
 800df22:	429c      	cmp	r4, r3
 800df24:	bf08      	it	eq
 800df26:	68f4      	ldreq	r4, [r6, #12]
 800df28:	e7e3      	b.n	800def2 <_putc_r+0x1a>
 800df2a:	6823      	ldr	r3, [r4, #0]
 800df2c:	1c5a      	adds	r2, r3, #1
 800df2e:	6022      	str	r2, [r4, #0]
 800df30:	701d      	strb	r5, [r3, #0]
 800df32:	b2e8      	uxtb	r0, r5
 800df34:	bd70      	pop	{r4, r5, r6, pc}
 800df36:	bf00      	nop
 800df38:	0800eee8 	.word	0x0800eee8
 800df3c:	0800ef08 	.word	0x0800ef08
 800df40:	0800eec8 	.word	0x0800eec8

0800df44 <_read_r>:
 800df44:	b538      	push	{r3, r4, r5, lr}
 800df46:	4c07      	ldr	r4, [pc, #28]	; (800df64 <_read_r+0x20>)
 800df48:	4605      	mov	r5, r0
 800df4a:	4608      	mov	r0, r1
 800df4c:	4611      	mov	r1, r2
 800df4e:	2200      	movs	r2, #0
 800df50:	6022      	str	r2, [r4, #0]
 800df52:	461a      	mov	r2, r3
 800df54:	f7f5 fe72 	bl	8003c3c <_read>
 800df58:	1c43      	adds	r3, r0, #1
 800df5a:	d102      	bne.n	800df62 <_read_r+0x1e>
 800df5c:	6823      	ldr	r3, [r4, #0]
 800df5e:	b103      	cbz	r3, 800df62 <_read_r+0x1e>
 800df60:	602b      	str	r3, [r5, #0]
 800df62:	bd38      	pop	{r3, r4, r5, pc}
 800df64:	24000bb8 	.word	0x24000bb8

0800df68 <_fstat_r>:
 800df68:	b538      	push	{r3, r4, r5, lr}
 800df6a:	4c07      	ldr	r4, [pc, #28]	; (800df88 <_fstat_r+0x20>)
 800df6c:	2300      	movs	r3, #0
 800df6e:	4605      	mov	r5, r0
 800df70:	4608      	mov	r0, r1
 800df72:	4611      	mov	r1, r2
 800df74:	6023      	str	r3, [r4, #0]
 800df76:	f7f5 fe8a 	bl	8003c8e <_fstat>
 800df7a:	1c43      	adds	r3, r0, #1
 800df7c:	d102      	bne.n	800df84 <_fstat_r+0x1c>
 800df7e:	6823      	ldr	r3, [r4, #0]
 800df80:	b103      	cbz	r3, 800df84 <_fstat_r+0x1c>
 800df82:	602b      	str	r3, [r5, #0]
 800df84:	bd38      	pop	{r3, r4, r5, pc}
 800df86:	bf00      	nop
 800df88:	24000bb8 	.word	0x24000bb8

0800df8c <_isatty_r>:
 800df8c:	b538      	push	{r3, r4, r5, lr}
 800df8e:	4c06      	ldr	r4, [pc, #24]	; (800dfa8 <_isatty_r+0x1c>)
 800df90:	2300      	movs	r3, #0
 800df92:	4605      	mov	r5, r0
 800df94:	4608      	mov	r0, r1
 800df96:	6023      	str	r3, [r4, #0]
 800df98:	f7f5 fe89 	bl	8003cae <_isatty>
 800df9c:	1c43      	adds	r3, r0, #1
 800df9e:	d102      	bne.n	800dfa6 <_isatty_r+0x1a>
 800dfa0:	6823      	ldr	r3, [r4, #0]
 800dfa2:	b103      	cbz	r3, 800dfa6 <_isatty_r+0x1a>
 800dfa4:	602b      	str	r3, [r5, #0]
 800dfa6:	bd38      	pop	{r3, r4, r5, pc}
 800dfa8:	24000bb8 	.word	0x24000bb8

0800dfac <_init>:
 800dfac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfae:	bf00      	nop
 800dfb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfb2:	bc08      	pop	{r3}
 800dfb4:	469e      	mov	lr, r3
 800dfb6:	4770      	bx	lr

0800dfb8 <_fini>:
 800dfb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfba:	bf00      	nop
 800dfbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfbe:	bc08      	pop	{r3}
 800dfc0:	469e      	mov	lr, r3
 800dfc2:	4770      	bx	lr
